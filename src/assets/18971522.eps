%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: pattern_261.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Роман
%%CreationDate: 15.12.15
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="пїњ" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt/>
         </dc:title>
         <dc:headline>
            <rdf:Alt>
               <rdf:li/>
            </rdf:Alt>
         </dc:headline>
         <dc:description>
            <rdf:Alt/>
         </dc:description>
         <dc:creator>
            <rdf:Seq>
               <rdf:li/>
            </rdf:Seq>
         </dc:creator>
         <dc:subject>
            <rdf:Bag>
               <rdf:li/>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2015-12-15T16:45:46+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-15T16:45:46+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-15T16:45:46+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A855Ni7FU+sLC10u1i1TV&#xA;IhPcTjnpelv/ALt8J5x1EIP2V6yH/Jqcx5zMzwx5dT+gef3NoAiLPwCrdWurPq1zZXttdt5za7ia&#xA;ORZVUIFUswKqNiPhIIYKqjsBkYyjwggjw6SQbo3x2s1LUodPhn0/T5/rV5dVGr6uCWMxY1aGFjv6&#xA;VftN1kP+ThhAyIlIUByH6T5/ciUq2HxLH8yWp2KuxV2KuxV2Ksg03UodQhg0/UJ/qt5a0GkauSVM&#xA;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&#xA;Qx/MlqdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:46DC7F1C0A206811822A8285605A2AAD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:46DC7F1C0A206811822A8285605A2AAD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0662251a-6f16-433a-a5d6-cf918b03f15a</stRef:instanceID>
            <stRef:documentID>xmp.did:178C90E71EA3E5119823AFB28BB3401D</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:898CDDC04F72E511ABF2E0FDC670B5FA</stEvt:instanceID>
                  <stEvt:when>2015-10-14T12:44:16+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:46DC7F1C0A206811822A8285605A2AAD</stEvt:instanceID>
                  <stEvt:when>2015-12-15T16:45:46+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=223 G=187 B=107</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>223</xmpG:red>
                           <xmpG:green>187</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=28 G=29 B=33</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>28</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
gsave
0 450 mo
0 0 li
450 0 li
450 450 li
0 450 li
cp
clp
0 450 mo
0 0 li
450 0 li
450 450 li
0 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.109804 .113725 .129412 rgb
f
35.8486 141.259 mo
36.9014 137.09 li
32.7358 138.146 li
24.7036 146.179 li
24.6616 146.473 li
21.4434 143.255 li
21.6191 142.056 21.2568 140.792 20.3345 139.869 cv
18.7803 138.317 16.2646 138.315 14.7109 139.867 cv
13.1577 141.421 13.1577 143.94 14.7109 145.49 cv
15.6333 146.414 16.896 146.776 18.0957 146.603 cv
27.3906 155.897 li
27.2163 157.097 27.5776 158.361 28.502 159.283 cv
30.0522 160.834 32.5728 160.837 34.1245 159.283 cv
35.6753 157.729 35.6753 155.209 34.1245 153.66 cv
33.2012 152.735 31.937 152.375 30.7388 152.549 cv
27.522 149.333 li
27.8149 149.292 li
35.8486 141.259 li
cp
.87451 .733333 .419608 rgb
f
32.9819 132.106 mo
32.749 137.095 li
37.4336 136.557 li
36.8999 141.245 li
41.8848 141.009 li
42.188 131.806 li
32.9819 132.106 li
cp
f
16.4116 194.659 mo
23.2212 201.471 li
31.9316 206.32 li
17.7622 192.15 li
17.3213 193.032 16.8682 193.864 16.4116 194.659 cv
cp
f
19.2295 188.96 mo
18.8398 189.885 18.4341 190.769 18.0229 191.612 cv
32.3311 205.92 li
27.4814 197.213 li
19.2295 188.96 li
cp
f
23.5322 154.713 mo
21.6045 152.782 li
18.4097 155.978 li
20.5581 157.689 li
23.5322 154.713 li
cp
f
15.8154 153.914 mo
17.9639 155.625 li
21.2046 152.383 li
19.2754 150.455 li
15.8154 153.914 li
cp
f
.00244141 198.046 mo
.00244141 198.046 -15.2979 191.667 -15.2979 166.297 cv
.00244141 154.119 li
15.3013 166.297 li
15.3013 191.667 .00244141 198.046 .00244141 198.046 cv
cp
.00244141 202.799 mo
.00244141 202.799 -18.6079 195.039 -18.6079 164.18 cv
.00244141 149.367 li
18.6128 164.18 li
18.6128 195.039 .00244141 202.799 .00244141 202.799 cv
cp
2.18945 144.509 mo
2.04883 143.132 1.2417 142.71 .626465 142.594 cv
.17627 141.412 li
.380371 141.101 .681641 140.605 .992676 139.969 cv
3.50586 136.373 6.21777 135.974 6.21777 135.974 cv
6.17773 141.637 10.7998 142.691 10.7998 142.691 cv
7.21387 139.333 10.5317 133.038 10.5317 133.038 cv
6.34668 132.265 3.77441 133.811 2.20703 135.808 cv
2.23291 135.526 2.25049 135.242 2.25049 134.951 cv
2.25049 131.176 -.0844727 128.114 -.0844727 128.114 cv
-.0844727 128.114 -2.42188 131.176 -2.42188 134.951 cv
-2.42188 135.241 -2.4043 135.523 -2.37891 135.803 cv
-3.94678 133.808 -6.51904 132.266 -10.6997 133.038 cv
-10.6997 133.038 -7.38477 139.333 -10.9692 142.691 cv
-10.9692 142.691 -6.34473 141.637 -6.38574 135.974 cv
-6.38574 135.974 -3.67773 136.373 -1.16553 139.963 cv
-.851563 140.602 -.548828 141.1 -.34375 141.412 cv
-.793457 142.594 li
-1.4292 142.714 -2.26807 143.164 -2.36621 144.648 cv
-23.2041 161.234 li
-23.2041 199.71 -.000488281 209.386 -.000488281 209.386 cv
-.000488281 209.386 23.2026 199.71 23.2026 161.234 cv
2.18945 144.509 li
cp
f
421.498 159.283 mo
422.421 158.361 422.781 157.098 422.607 155.898 cv
431.901 146.603 li
433.102 146.776 434.366 146.415 435.289 145.49 cv
436.841 143.94 436.841 141.421 435.289 139.867 cv
433.736 138.315 431.218 138.317 429.668 139.869 cv
428.743 140.792 428.381 142.056 428.556 143.256 cv
425.34 146.472 li
425.297 146.179 li
417.264 138.146 li
413.096 137.09 li
414.15 141.259 li
422.186 149.292 li
422.479 149.334 li
419.262 152.549 li
418.063 152.374 416.799 152.735 415.875 153.66 cv
414.324 155.209 414.323 157.729 415.875 159.283 cv
417.426 160.837 419.947 160.834 421.498 159.283 cv
cp
f
417.25 137.095 mo
417.016 132.106 li
407.813 131.806 li
408.113 141.009 li
413.1 141.245 li
412.566 136.557 li
417.25 137.095 li
cp
f
426.467 154.713 mo
429.44 157.687 li
431.59 155.978 li
428.396 152.782 li
426.467 154.713 li
cp
f
434.182 153.914 mo
430.725 150.455 li
428.794 152.383 li
432.033 155.623 li
434.182 153.914 li
cp
f
418.066 206.32 mo
426.775 201.471 li
433.588 194.659 li
433.129 193.867 432.68 193.032 432.234 192.15 cv
418.066 206.32 li
cp
f
430.77 188.96 mo
422.519 197.213 li
417.669 205.92 li
431.974 191.615 li
431.563 190.769 431.158 189.887 430.77 188.96 cv
cp
f
450.002 198.046 mo
450.002 198.046 434.702 191.667 434.702 166.297 cv
450.002 154.119 li
465.301 166.297 li
465.301 191.667 450.002 198.046 450.002 198.046 cv
cp
450.002 202.799 mo
450.002 202.799 431.393 195.039 431.393 164.18 cv
450.002 149.367 li
468.613 164.18 li
468.613 195.039 450.002 202.799 450.002 202.799 cv
cp
452.189 144.509 mo
452.049 143.132 451.242 142.71 450.627 142.594 cv
450.176 141.412 li
450.381 141.101 450.682 140.605 450.992 139.969 cv
453.506 136.373 456.218 135.974 456.218 135.974 cv
456.178 141.637 460.8 142.691 460.8 142.691 cv
457.214 139.333 460.531 133.038 460.531 133.038 cv
456.347 132.265 453.774 133.811 452.207 135.808 cv
452.232 135.526 452.25 135.242 452.25 134.951 cv
452.25 131.176 449.916 128.114 449.916 128.114 cv
449.916 128.114 447.578 131.176 447.578 134.951 cv
447.578 135.241 447.596 135.523 447.621 135.803 cv
446.053 133.808 443.48 132.266 439.301 133.038 cv
439.301 133.038 442.615 139.333 439.031 142.691 cv
439.031 142.691 443.655 141.637 443.614 135.974 cv
443.614 135.974 446.322 136.373 448.834 139.963 cv
449.148 140.602 449.451 141.1 449.656 141.412 cv
449.207 142.594 li
448.57 142.714 447.732 143.164 447.634 144.648 cv
426.796 161.234 li
426.796 199.71 450 209.386 450 209.386 cv
450 209.386 473.203 199.71 473.203 161.234 cv
452.189 144.509 li
cp
f
308.998 46.7832 mo
309.922 45.8613 310.281 44.5977 310.107 43.3975 cv
319.401 34.1035 li
320.602 34.2754 321.865 33.9141 322.79 32.9902 cv
324.342 31.4404 324.342 28.9199 322.79 27.3672 cv
321.236 25.8145 318.718 25.8184 317.167 27.3691 cv
316.243 28.292 315.882 29.5566 316.057 30.7559 cv
312.84 33.9727 li
312.797 33.6787 li
304.763 25.6465 li
300.596 24.5898 li
301.65 28.7598 li
309.685 36.792 li
309.978 36.834 li
306.762 40.0498 li
305.563 39.875 304.299 40.2344 303.375 41.1602 cv
301.824 42.709 301.823 45.2285 303.375 46.7832 cv
304.926 48.3369 307.447 48.334 308.998 46.7832 cv
cp
f
304.75 24.5947 mo
304.516 19.6074 li
295.313 19.3047 li
295.613 28.5098 li
300.6 28.7441 li
300.066 24.0566 li
304.75 24.5947 li
cp
f
373.35 28.7598 mo
374.4 24.5898 li
370.236 25.6465 li
362.203 33.6787 li
362.162 33.9736 li
358.943 30.7559 li
359.119 29.5566 358.756 28.292 357.835 27.3691 cv
356.281 25.8184 353.764 25.8145 352.211 27.3672 cv
350.657 28.9199 350.657 31.4404 352.211 32.9902 cv
353.133 33.9141 354.396 34.2754 355.596 34.1035 cv
364.891 43.3975 li
364.717 44.5977 365.077 45.8613 366.002 46.7832 cv
367.553 48.334 370.072 48.3369 371.625 46.7832 cv
373.175 45.2285 373.175 42.709 371.625 41.1602 cv
370.701 40.2354 369.437 39.875 368.238 40.0498 cv
365.021 36.834 li
365.314 36.792 li
373.35 28.7598 li
cp
f
370.482 19.6074 mo
370.25 24.5947 li
374.934 24.0566 li
374.399 28.7441 li
379.385 28.5098 li
379.688 19.3047 li
370.482 19.6074 li
cp
f
353.912 82.1582 mo
360.721 88.9707 li
369.432 93.8203 li
355.263 79.6504 li
354.822 80.5332 354.367 81.3652 353.912 82.1582 cv
cp
f
313.967 42.2129 mo
316.941 45.1875 li
319.09 43.4785 li
315.896 40.2822 li
313.967 42.2129 li
cp
f
356.729 76.4609 mo
356.34 77.3848 355.934 78.2676 355.523 79.1113 cv
369.83 93.4199 li
364.982 84.7129 li
356.729 76.4609 li
cp
f
321.682 41.4141 mo
318.225 37.9551 li
316.293 39.8828 li
319.532 43.123 li
321.682 41.4141 li
cp
f
305.566 93.8203 mo
314.275 88.9707 li
321.088 82.1582 li
320.629 81.3672 320.179 80.5332 319.734 79.6504 cv
305.566 93.8203 li
cp
f
361.033 42.2129 mo
359.105 40.2822 li
355.91 43.4785 li
358.058 45.1895 li
361.033 42.2129 li
cp
f
353.316 41.4141 mo
355.463 43.125 li
358.705 39.8828 li
356.775 37.9551 li
353.316 41.4141 li
cp
f
318.27 76.4609 mo
310.018 84.7129 li
305.169 93.4199 li
319.474 79.1152 li
319.063 78.2676 318.659 77.3867 318.27 76.4609 cv
cp
f
337.503 85.5469 mo
337.503 85.5469 322.203 79.168 322.203 53.7969 cv
337.503 41.6191 li
352.802 53.7969 li
352.802 79.168 337.503 85.5469 337.503 85.5469 cv
cp
337.503 90.2988 mo
337.503 90.2988 318.893 82.5381 318.893 51.6797 cv
337.503 36.8672 li
356.112 51.6797 li
356.112 82.5381 337.503 90.2988 337.503 90.2988 cv
cp
339.689 32.0088 mo
339.549 30.6318 338.742 30.2109 338.127 30.0938 cv
337.676 28.9121 li
337.881 28.6016 338.182 28.1055 338.493 27.4697 cv
341.006 23.873 343.719 23.4746 343.719 23.4746 cv
343.678 29.1367 348.301 30.1904 348.301 30.1904 cv
344.715 26.833 348.032 20.5371 348.032 20.5371 cv
343.848 19.7656 341.275 21.3105 339.707 23.3066 cv
339.732 23.0264 339.75 22.7422 339.75 22.4512 cv
339.75 18.6758 337.415 15.6143 337.415 15.6143 cv
337.415 15.6143 335.078 18.6758 335.078 22.4512 cv
335.078 22.7402 335.096 23.0234 335.121 23.3037 cv
333.553 21.3086 330.981 19.7656 326.801 20.5371 cv
326.801 20.5371 330.115 26.833 326.531 30.1904 cv
326.531 30.1904 331.156 29.1367 331.115 23.4746 cv
331.115 23.4746 333.822 23.873 336.334 27.4629 cv
336.648 28.1025 336.951 28.6006 337.156 28.9121 cv
336.706 30.0938 li
336.07 30.2139 335.232 30.6641 335.135 32.1484 cv
314.295 48.7344 li
314.295 87.209 337.5 96.8867 337.5 96.8867 cv
337.5 96.8867 360.703 87.209 360.703 48.7344 cv
339.689 32.0088 li
cp
f
83.998 46.7832 mo
84.9209 45.8613 85.2813 44.5977 85.1079 43.3975 cv
94.4014 34.1035 li
95.6016 34.2754 96.8662 33.9141 97.7896 32.9902 cv
99.3408 31.4404 99.3408 28.9199 97.7896 27.3672 cv
96.2358 25.8145 93.7178 25.8184 92.1675 27.3691 cv
91.2432 28.292 90.8813 29.5566 91.0557 30.7559 cv
87.8394 33.9727 li
87.7974 33.6787 li
79.7632 25.6465 li
75.5957 24.5898 li
76.6504 28.7598 li
84.6851 36.792 li
84.978 36.834 li
81.7617 40.0498 li
80.5625 39.875 79.2993 40.2344 78.3745 41.1602 cv
76.8247 42.709 76.8232 45.2285 78.3745 46.7832 cv
79.9258 48.3369 82.4478 48.334 83.998 46.7832 cv
cp
f
79.75 24.5947 mo
79.5161 19.6074 li
70.3125 19.3047 li
70.6133 28.5098 li
75.5996 28.7441 li
75.0659 24.0566 li
79.75 24.5947 li
cp
f
148.349 28.7598 mo
149.401 24.5898 li
145.236 25.6465 li
137.204 33.6787 li
137.162 33.9736 li
133.943 30.7559 li
134.119 29.5566 133.757 28.292 132.834 27.3691 cv
131.28 25.8184 128.765 25.8145 127.211 27.3672 cv
125.658 28.9199 125.658 31.4404 127.211 32.9902 cv
128.133 33.9141 129.396 34.2754 130.596 34.1035 cv
139.891 43.3975 li
139.716 44.5977 140.078 45.8613 141.002 46.7832 cv
142.552 48.334 145.073 48.3369 146.625 46.7832 cv
148.175 45.2285 148.175 42.709 146.625 41.1602 cv
145.701 40.2354 144.437 39.875 143.239 40.0498 cv
140.022 36.834 li
140.315 36.792 li
148.349 28.7598 li
cp
f
145.482 19.6074 mo
145.249 24.5947 li
149.934 24.0566 li
149.4 28.7441 li
154.385 28.5098 li
154.688 19.3047 li
145.482 19.6074 li
cp
f
128.912 82.1582 mo
135.721 88.9707 li
144.432 93.8203 li
130.262 79.6504 li
129.821 80.5332 129.368 81.3652 128.912 82.1582 cv
cp
f
88.9668 42.2129 mo
91.9404 45.1875 li
94.0894 43.4785 li
90.896 40.2822 li
88.9668 42.2129 li
cp
f
131.729 76.4609 mo
131.34 77.3848 130.934 78.2676 130.523 79.1113 cv
144.831 93.4199 li
139.981 84.7129 li
131.729 76.4609 li
cp
f
96.6812 41.4141 mo
93.2246 37.9551 li
91.2939 39.8828 li
94.5327 43.123 li
96.6812 41.4141 li
cp
f
80.5669 93.8203 mo
89.2759 88.9707 li
96.0874 82.1582 li
95.6289 81.3672 95.1792 80.5332 94.7344 79.6504 cv
80.5669 93.8203 li
cp
f
136.032 42.2129 mo
134.104 40.2822 li
130.91 43.4785 li
133.058 45.1895 li
136.032 42.2129 li
cp
f
128.315 41.4141 mo
130.464 43.125 li
133.705 39.8828 li
131.775 37.9551 li
128.315 41.4141 li
cp
f
93.27 76.4609 mo
85.0186 84.7129 li
80.1689 93.4199 li
94.4736 79.1152 li
94.0635 78.2676 93.6587 77.3867 93.27 76.4609 cv
cp
f
112.502 85.5469 mo
112.502 85.5469 97.2021 79.168 97.2021 53.7969 cv
112.502 41.6191 li
127.801 53.7969 li
127.801 79.168 112.502 85.5469 112.502 85.5469 cv
cp
112.502 90.2988 mo
112.502 90.2988 93.8921 82.5381 93.8921 51.6797 cv
112.502 36.8672 li
131.113 51.6797 li
131.113 82.5381 112.502 90.2988 112.502 90.2988 cv
cp
114.689 32.0088 mo
114.549 30.6318 113.742 30.2109 113.126 30.0938 cv
112.676 28.9121 li
112.88 28.6016 113.182 28.1055 113.493 27.4697 cv
116.006 23.873 118.718 23.4746 118.718 23.4746 cv
118.678 29.1367 123.3 30.1904 123.3 30.1904 cv
119.714 26.833 123.032 20.5371 123.032 20.5371 cv
118.847 19.7656 116.274 21.3105 114.707 23.3066 cv
114.733 23.0264 114.75 22.7422 114.75 22.4512 cv
114.75 18.6758 112.416 15.6143 112.416 15.6143 cv
112.416 15.6143 110.078 18.6758 110.078 22.4512 cv
110.078 22.7402 110.096 23.0234 110.121 23.3037 cv
108.553 21.3086 105.981 19.7656 101.8 20.5371 cv
101.8 20.5371 105.115 26.833 101.531 30.1904 cv
101.531 30.1904 106.155 29.1367 106.114 23.4746 cv
106.114 23.4746 108.822 23.873 111.334 27.4629 cv
111.648 28.1025 111.951 28.6006 112.156 28.9121 cv
111.707 30.0938 li
111.071 30.2139 110.232 30.6641 110.134 32.1484 cv
89.2959 48.7344 li
89.2959 87.209 112.5 96.8867 112.5 96.8867 cv
112.5 96.8867 135.703 87.209 135.703 48.7344 cv
114.689 32.0088 li
cp
f
196.498 384.283 mo
197.421 383.361 197.781 382.098 197.608 380.897 cv
206.901 371.604 li
208.102 371.775 209.366 371.414 210.29 370.49 cv
211.841 368.94 211.841 366.42 210.29 364.867 cv
208.736 363.314 206.218 363.318 204.667 364.869 cv
203.743 365.792 203.381 367.057 203.556 368.256 cv
200.339 371.473 li
200.297 371.179 li
192.263 363.146 li
188.096 362.09 li
189.15 366.26 li
197.185 374.292 li
197.478 374.334 li
194.262 377.55 li
193.063 377.375 191.799 377.734 190.875 378.66 cv
189.324 380.209 189.323 382.729 190.875 384.283 cv
192.426 385.837 194.948 385.834 196.498 384.283 cv
cp
f
192.25 362.095 mo
192.016 357.107 li
182.813 356.805 li
183.113 366.01 li
188.1 366.244 li
187.566 361.557 li
192.25 362.095 li
cp
f
260.85 366.26 mo
261.9 362.09 li
257.736 363.146 li
249.703 371.179 li
249.662 371.474 li
246.443 368.256 li
246.619 367.057 246.256 365.792 245.335 364.869 cv
243.781 363.318 241.264 363.314 239.711 364.867 cv
238.157 366.42 238.157 368.94 239.711 370.49 cv
240.633 371.414 241.896 371.775 243.096 371.604 cv
252.391 380.897 li
252.217 382.098 252.577 383.361 253.502 384.283 cv
255.053 385.834 257.572 385.837 259.125 384.283 cv
260.675 382.729 260.675 380.209 259.125 378.66 cv
258.201 377.735 256.937 377.375 255.738 377.55 cv
252.521 374.334 li
252.814 374.292 li
260.85 366.26 li
cp
f
257.982 357.107 mo
257.75 362.095 li
262.434 361.557 li
261.899 366.244 li
266.885 366.01 li
267.188 356.805 li
257.982 357.107 li
cp
f
241.412 419.658 mo
248.221 426.471 li
256.932 431.32 li
242.763 417.15 li
242.322 418.033 241.867 418.865 241.412 419.658 cv
cp
f
201.467 379.713 mo
204.44 382.688 li
206.589 380.979 li
203.396 377.782 li
201.467 379.713 li
cp
f
244.229 413.961 mo
243.84 414.885 243.434 415.768 243.023 416.611 cv
257.33 430.92 li
252.482 422.213 li
244.229 413.961 li
cp
f
209.181 378.914 mo
205.725 375.455 li
203.794 377.383 li
207.033 380.623 li
209.181 378.914 li
cp
f
193.067 431.32 mo
201.775 426.471 li
208.587 419.658 li
208.129 418.867 207.679 418.033 207.234 417.15 cv
193.067 431.32 li
cp
f
248.533 379.713 mo
246.605 377.782 li
243.41 380.979 li
245.558 382.689 li
248.533 379.713 li
cp
f
240.816 378.914 mo
242.963 380.625 li
246.205 377.383 li
244.275 375.455 li
240.816 378.914 li
cp
f
205.77 413.961 mo
197.519 422.213 li
192.669 430.92 li
206.974 416.615 li
206.563 415.768 206.159 414.887 205.77 413.961 cv
cp
f
225.002 423.047 mo
225.002 423.047 209.702 416.668 209.702 391.297 cv
225.002 379.119 li
240.302 391.297 li
240.302 416.668 225.002 423.047 225.002 423.047 cv
cp
225.002 427.799 mo
225.002 427.799 206.392 420.038 206.392 389.18 cv
225.002 374.367 li
243.612 389.18 li
243.612 420.038 225.002 427.799 225.002 427.799 cv
cp
227.189 369.509 mo
227.049 368.132 226.242 367.711 225.626 367.594 cv
225.176 366.412 li
225.38 366.102 225.682 365.605 225.993 364.97 cv
228.506 361.373 231.219 360.975 231.219 360.975 cv
231.178 366.637 235.801 367.69 235.801 367.69 cv
232.215 364.333 235.532 358.037 235.532 358.037 cv
231.348 357.266 228.775 358.811 227.207 360.807 cv
227.232 360.526 227.25 360.242 227.25 359.951 cv
227.25 356.176 224.916 353.114 224.916 353.114 cv
224.916 353.114 222.578 356.176 222.578 359.951 cv
222.578 360.24 222.596 360.523 222.621 360.804 cv
221.053 358.809 218.481 357.266 214.3 358.037 cv
214.3 358.037 217.615 364.333 214.031 367.69 cv
214.031 367.69 218.655 366.637 218.614 360.975 cv
218.614 360.975 221.322 361.373 223.834 364.963 cv
224.148 365.603 224.451 366.101 224.656 366.412 cv
224.207 367.594 li
223.571 367.714 222.732 368.164 222.634 369.648 cv
201.796 386.234 li
201.796 424.709 225 434.387 225 434.387 cv
225 434.387 248.203 424.709 248.203 386.234 cv
227.189 369.509 li
cp
f
35.8486 366.26 mo
36.9014 362.09 li
32.7358 363.146 li
24.7036 371.179 li
24.6616 371.474 li
21.4434 368.256 li
21.6191 367.057 21.2568 365.792 20.3345 364.869 cv
18.7803 363.318 16.2646 363.314 14.7109 364.867 cv
13.1577 366.42 13.1577 368.94 14.7109 370.49 cv
15.6333 371.414 16.896 371.775 18.0957 371.604 cv
27.3906 380.897 li
27.2163 382.098 27.5776 383.361 28.502 384.283 cv
30.0522 385.834 32.5728 385.837 34.1245 384.283 cv
35.6753 382.729 35.6753 380.209 34.1245 378.66 cv
33.2012 377.735 31.937 377.375 30.7388 377.55 cv
27.522 374.334 li
27.8149 374.292 li
35.8486 366.26 li
cp
f
32.9819 357.107 mo
32.749 362.095 li
37.4336 361.557 li
36.8999 366.244 li
41.8848 366.01 li
42.188 356.805 li
32.9819 357.107 li
cp
f
16.4116 419.658 mo
23.2212 426.471 li
31.9316 431.32 li
17.7622 417.15 li
17.3213 418.033 16.8682 418.865 16.4116 419.658 cv
cp
f
19.2295 413.961 mo
18.8398 414.885 18.4341 415.768 18.0229 416.611 cv
32.3311 430.92 li
27.4814 422.213 li
19.2295 413.961 li
cp
f
23.5322 379.713 mo
21.6045 377.782 li
18.4097 380.979 li
20.5581 382.689 li
23.5322 379.713 li
cp
f
15.8154 378.914 mo
17.9639 380.625 li
21.2046 377.383 li
19.2754 375.455 li
15.8154 378.914 li
cp
f
.00244141 423.047 mo
.00244141 423.047 -15.2979 416.668 -15.2979 391.297 cv
.00244141 379.119 li
15.3013 391.297 li
15.3013 416.668 .00244141 423.047 .00244141 423.047 cv
cp
.00244141 427.799 mo
.00244141 427.799 -18.6079 420.038 -18.6079 389.18 cv
.00244141 374.367 li
18.6128 389.18 li
18.6128 420.038 .00244141 427.799 .00244141 427.799 cv
cp
2.18945 369.509 mo
2.04883 368.132 1.2417 367.711 .626465 367.594 cv
.17627 366.412 li
.380371 366.102 .681641 365.605 .992676 364.97 cv
3.50586 361.373 6.21777 360.975 6.21777 360.975 cv
6.17773 366.637 10.7998 367.69 10.7998 367.69 cv
7.21387 364.333 10.5317 358.037 10.5317 358.037 cv
6.34668 357.266 3.77441 358.811 2.20703 360.807 cv
2.23291 360.526 2.25049 360.242 2.25049 359.951 cv
2.25049 356.176 -.0844727 353.114 -.0844727 353.114 cv
-.0844727 353.114 -2.42188 356.176 -2.42188 359.951 cv
-2.42188 360.24 -2.4043 360.523 -2.37891 360.804 cv
-3.94678 358.809 -6.51904 357.266 -10.6997 358.037 cv
-10.6997 358.037 -7.38477 364.333 -10.9692 367.69 cv
-10.9692 367.69 -6.34473 366.637 -6.38574 360.975 cv
-6.38574 360.975 -3.67773 361.373 -1.16553 364.963 cv
-.851563 365.603 -.548828 366.101 -.34375 366.412 cv
-.793457 367.594 li
-1.4292 367.714 -2.26807 368.164 -2.36621 369.648 cv
-23.2041 386.234 li
-23.2041 424.709 -.000488281 434.387 -.000488281 434.387 cv
-.000488281 434.387 23.2026 424.709 23.2026 386.234 cv
2.18945 369.509 li
cp
f
421.498 384.283 mo
422.421 383.361 422.781 382.098 422.607 380.897 cv
431.901 371.604 li
433.102 371.775 434.366 371.414 435.289 370.49 cv
436.841 368.94 436.841 366.42 435.289 364.867 cv
433.736 363.314 431.218 363.318 429.668 364.869 cv
428.743 365.792 428.381 367.057 428.556 368.256 cv
425.34 371.473 li
425.297 371.179 li
417.264 363.146 li
413.096 362.09 li
414.15 366.26 li
422.186 374.292 li
422.479 374.334 li
419.262 377.55 li
418.063 377.375 416.799 377.734 415.875 378.66 cv
414.324 380.209 414.323 382.729 415.875 384.283 cv
417.426 385.837 419.947 385.834 421.498 384.283 cv
cp
f
417.25 362.095 mo
417.016 357.107 li
407.813 356.805 li
408.113 366.01 li
413.1 366.244 li
412.566 361.557 li
417.25 362.095 li
cp
f
426.467 379.713 mo
429.44 382.688 li
431.59 380.979 li
428.396 377.782 li
426.467 379.713 li
cp
f
434.182 378.914 mo
430.725 375.455 li
428.794 377.383 li
432.033 380.623 li
434.182 378.914 li
cp
f
418.066 431.32 mo
426.775 426.471 li
433.588 419.658 li
433.129 418.867 432.68 418.033 432.234 417.15 cv
418.066 431.32 li
cp
f
430.77 413.961 mo
422.519 422.213 li
417.669 430.92 li
431.974 416.615 li
431.563 415.768 431.158 414.887 430.77 413.961 cv
cp
f
450.002 423.047 mo
450.002 423.047 434.702 416.668 434.702 391.297 cv
450.002 379.119 li
465.301 391.297 li
465.301 416.668 450.002 423.047 450.002 423.047 cv
cp
450.002 427.799 mo
450.002 427.799 431.393 420.038 431.393 389.18 cv
450.002 374.367 li
468.613 389.18 li
468.613 420.038 450.002 427.799 450.002 427.799 cv
cp
452.189 369.509 mo
452.049 368.132 451.242 367.711 450.627 367.594 cv
450.176 366.412 li
450.381 366.102 450.682 365.605 450.992 364.97 cv
453.506 361.373 456.218 360.975 456.218 360.975 cv
456.178 366.637 460.8 367.69 460.8 367.69 cv
457.214 364.333 460.531 358.037 460.531 358.037 cv
456.347 357.266 453.774 358.811 452.207 360.807 cv
452.232 360.526 452.25 360.242 452.25 359.951 cv
452.25 356.176 449.916 353.114 449.916 353.114 cv
449.916 353.114 447.578 356.176 447.578 359.951 cv
447.578 360.24 447.596 360.523 447.621 360.804 cv
446.053 358.809 443.48 357.266 439.301 358.037 cv
439.301 358.037 442.615 364.333 439.031 367.69 cv
439.031 367.69 443.655 366.637 443.614 360.975 cv
443.614 360.975 446.322 361.373 448.834 364.963 cv
449.148 365.603 449.451 366.101 449.656 366.412 cv
449.207 367.594 li
448.57 367.714 447.732 368.164 447.634 369.648 cv
426.796 386.234 li
426.796 424.709 450 434.387 450 434.387 cv
450 434.387 473.203 424.709 473.203 386.234 cv
452.189 369.509 li
cp
f
308.998 271.783 mo
309.922 270.861 310.281 269.598 310.107 268.397 cv
319.401 259.104 li
320.602 259.275 321.865 258.914 322.79 257.99 cv
324.342 256.44 324.342 253.92 322.79 252.367 cv
321.236 250.814 318.718 250.818 317.167 252.369 cv
316.243 253.292 315.882 254.557 316.057 255.756 cv
312.84 258.973 li
312.797 258.679 li
304.763 250.646 li
300.596 249.59 li
301.65 253.76 li
309.685 261.792 li
309.978 261.834 li
306.762 265.05 li
305.563 264.875 304.299 265.234 303.375 266.16 cv
301.824 267.709 301.823 270.229 303.375 271.783 cv
304.926 273.337 307.447 273.334 308.998 271.783 cv
cp
f
304.75 249.595 mo
304.516 244.607 li
295.313 244.305 li
295.613 253.51 li
300.6 253.744 li
300.066 249.057 li
304.75 249.595 li
cp
f
373.35 253.76 mo
374.4 249.59 li
370.236 250.646 li
362.203 258.679 li
362.162 258.974 li
358.943 255.756 li
359.119 254.557 358.756 253.292 357.835 252.369 cv
356.281 250.818 353.764 250.814 352.211 252.367 cv
350.657 253.92 350.657 256.44 352.211 257.99 cv
353.133 258.914 354.396 259.275 355.596 259.104 cv
364.891 268.397 li
364.717 269.598 365.077 270.861 366.002 271.783 cv
367.553 273.334 370.072 273.337 371.625 271.783 cv
373.175 270.229 373.175 267.709 371.625 266.16 cv
370.701 265.235 369.437 264.875 368.238 265.05 cv
365.021 261.834 li
365.314 261.792 li
373.35 253.76 li
cp
f
370.482 244.607 mo
370.25 249.595 li
374.934 249.057 li
374.399 253.744 li
379.385 253.51 li
379.688 244.305 li
370.482 244.607 li
cp
f
353.912 307.158 mo
360.721 313.971 li
369.432 318.82 li
355.263 304.65 li
354.822 305.533 354.367 306.365 353.912 307.158 cv
cp
f
313.967 267.213 mo
316.941 270.188 li
319.09 268.479 li
315.896 265.282 li
313.967 267.213 li
cp
f
356.729 301.461 mo
356.34 302.385 355.934 303.268 355.523 304.111 cv
369.83 318.42 li
364.982 309.713 li
356.729 301.461 li
cp
f
321.682 266.414 mo
318.225 262.955 li
316.293 264.883 li
319.532 268.123 li
321.682 266.414 li
cp
f
305.566 318.82 mo
314.275 313.971 li
321.088 307.158 li
320.629 306.367 320.179 305.533 319.734 304.65 cv
305.566 318.82 li
cp
f
361.033 267.213 mo
359.105 265.282 li
355.91 268.479 li
358.058 270.189 li
361.033 267.213 li
cp
f
353.316 266.414 mo
355.463 268.125 li
358.705 264.883 li
356.775 262.955 li
353.316 266.414 li
cp
f
318.27 301.461 mo
310.018 309.713 li
305.169 318.42 li
319.474 304.115 li
319.063 303.268 318.659 302.387 318.27 301.461 cv
cp
f
337.503 310.547 mo
337.503 310.547 322.203 304.168 322.203 278.797 cv
337.503 266.619 li
352.802 278.797 li
352.802 304.168 337.503 310.547 337.503 310.547 cv
cp
337.503 315.299 mo
337.503 315.299 318.893 307.538 318.893 276.68 cv
337.503 261.867 li
356.112 276.68 li
356.112 307.538 337.503 315.299 337.503 315.299 cv
cp
339.689 257.009 mo
339.549 255.632 338.742 255.211 338.127 255.094 cv
337.676 253.912 li
337.881 253.602 338.182 253.105 338.493 252.47 cv
341.006 248.873 343.719 248.475 343.719 248.475 cv
343.678 254.137 348.301 255.19 348.301 255.19 cv
344.715 251.833 348.032 245.537 348.032 245.537 cv
343.848 244.766 341.275 246.311 339.707 248.307 cv
339.732 248.026 339.75 247.742 339.75 247.451 cv
339.75 243.676 337.415 240.614 337.415 240.614 cv
337.415 240.614 335.078 243.676 335.078 247.451 cv
335.078 247.74 335.096 248.023 335.121 248.304 cv
333.553 246.309 330.981 244.766 326.801 245.537 cv
326.801 245.537 330.115 251.833 326.531 255.19 cv
326.531 255.19 331.156 254.137 331.115 248.475 cv
331.115 248.475 333.822 248.873 336.334 252.463 cv
336.648 253.103 336.951 253.601 337.156 253.912 cv
336.706 255.094 li
336.07 255.214 335.232 255.664 335.135 257.148 cv
314.295 273.734 li
314.295 312.209 337.5 321.887 337.5 321.887 cv
337.5 321.887 360.703 312.209 360.703 273.734 cv
339.689 257.009 li
cp
f
83.998 271.783 mo
84.9209 270.861 85.2813 269.598 85.1079 268.397 cv
94.4014 259.104 li
95.6016 259.275 96.8662 258.914 97.7896 257.99 cv
99.3408 256.44 99.3408 253.92 97.7896 252.367 cv
96.2358 250.814 93.7178 250.818 92.1675 252.369 cv
91.2432 253.292 90.8813 254.557 91.0557 255.756 cv
87.8394 258.973 li
87.7974 258.679 li
79.7632 250.646 li
75.5957 249.59 li
76.6504 253.76 li
84.6851 261.792 li
84.978 261.834 li
81.7617 265.05 li
80.5625 264.875 79.2993 265.234 78.3745 266.16 cv
76.8247 267.709 76.8232 270.229 78.3745 271.783 cv
79.9258 273.337 82.4478 273.334 83.998 271.783 cv
cp
f
79.75 249.595 mo
79.5161 244.607 li
70.3125 244.305 li
70.6133 253.51 li
75.5996 253.744 li
75.0659 249.057 li
79.75 249.595 li
cp
f
148.349 253.76 mo
149.401 249.59 li
145.236 250.646 li
137.204 258.679 li
137.162 258.974 li
133.943 255.756 li
134.119 254.557 133.757 253.292 132.834 252.369 cv
131.28 250.818 128.765 250.814 127.211 252.367 cv
125.658 253.92 125.658 256.44 127.211 257.99 cv
128.133 258.914 129.396 259.275 130.596 259.104 cv
139.891 268.397 li
139.716 269.598 140.078 270.861 141.002 271.783 cv
142.552 273.334 145.073 273.337 146.625 271.783 cv
148.175 270.229 148.175 267.709 146.625 266.16 cv
145.701 265.235 144.437 264.875 143.239 265.05 cv
140.022 261.834 li
140.315 261.792 li
148.349 253.76 li
cp
f
145.482 244.607 mo
145.249 249.595 li
149.934 249.057 li
149.4 253.744 li
154.385 253.51 li
154.688 244.305 li
145.482 244.607 li
cp
f
128.912 307.158 mo
135.721 313.971 li
144.432 318.82 li
130.262 304.65 li
129.821 305.533 129.368 306.365 128.912 307.158 cv
cp
f
88.9668 267.213 mo
91.9404 270.188 li
94.0894 268.479 li
90.896 265.282 li
88.9668 267.213 li
cp
f
131.729 301.461 mo
131.34 302.385 130.934 303.268 130.523 304.111 cv
144.831 318.42 li
139.981 309.713 li
131.729 301.461 li
cp
f
96.6812 266.414 mo
93.2246 262.955 li
91.2939 264.883 li
94.5327 268.123 li
96.6812 266.414 li
cp
f
80.5669 318.82 mo
89.2759 313.971 li
96.0874 307.158 li
95.6289 306.367 95.1792 305.533 94.7344 304.65 cv
80.5669 318.82 li
cp
f
136.032 267.213 mo
134.104 265.282 li
130.91 268.479 li
133.058 270.189 li
136.032 267.213 li
cp
f
128.315 266.414 mo
130.464 268.125 li
133.705 264.883 li
131.775 262.955 li
128.315 266.414 li
cp
f
93.27 301.461 mo
85.0186 309.713 li
80.1689 318.42 li
94.4736 304.115 li
94.0635 303.268 93.6587 302.387 93.27 301.461 cv
cp
f
112.502 310.547 mo
112.502 310.547 97.2021 304.168 97.2021 278.797 cv
112.502 266.619 li
127.801 278.797 li
127.801 304.168 112.502 310.547 112.502 310.547 cv
cp
112.502 315.299 mo
112.502 315.299 93.8921 307.538 93.8921 276.68 cv
112.502 261.867 li
131.113 276.68 li
131.113 307.538 112.502 315.299 112.502 315.299 cv
cp
114.689 257.009 mo
114.549 255.632 113.742 255.211 113.126 255.094 cv
112.676 253.912 li
112.88 253.602 113.182 253.105 113.493 252.47 cv
116.006 248.873 118.718 248.475 118.718 248.475 cv
118.678 254.137 123.3 255.19 123.3 255.19 cv
119.714 251.833 123.032 245.537 123.032 245.537 cv
118.847 244.766 116.274 246.311 114.707 248.307 cv
114.733 248.026 114.75 247.742 114.75 247.451 cv
114.75 243.676 112.416 240.614 112.416 240.614 cv
112.416 240.614 110.078 243.676 110.078 247.451 cv
110.078 247.74 110.096 248.023 110.121 248.304 cv
108.553 246.309 105.981 244.766 101.8 245.537 cv
101.8 245.537 105.115 251.833 101.531 255.19 cv
101.531 255.19 106.155 254.137 106.114 248.475 cv
106.114 248.475 108.822 248.873 111.334 252.463 cv
111.648 253.103 111.951 253.601 112.156 253.912 cv
111.707 255.094 li
111.071 255.214 110.232 255.664 110.134 257.148 cv
89.2959 273.734 li
89.2959 312.209 112.5 321.887 112.5 321.887 cv
112.5 321.887 135.703 312.209 135.703 273.734 cv
114.689 257.009 li
cp
f
196.498 159.283 mo
197.421 158.361 197.781 157.098 197.608 155.898 cv
206.901 146.603 li
208.102 146.776 209.366 146.415 210.29 145.49 cv
211.841 143.94 211.841 141.421 210.29 139.867 cv
208.736 138.315 206.218 138.317 204.667 139.869 cv
203.743 140.792 203.381 142.056 203.556 143.256 cv
200.339 146.472 li
200.297 146.179 li
192.263 138.146 li
188.096 137.09 li
189.15 141.259 li
197.185 149.292 li
197.478 149.334 li
194.262 152.549 li
193.063 152.374 191.799 152.735 190.875 153.66 cv
189.324 155.209 189.323 157.729 190.875 159.283 cv
192.426 160.837 194.948 160.834 196.498 159.283 cv
cp
f
192.25 137.095 mo
192.016 132.106 li
182.813 131.806 li
183.113 141.009 li
188.1 141.245 li
187.566 136.557 li
192.25 137.095 li
cp
f
260.85 141.259 mo
261.9 137.09 li
257.736 138.146 li
249.703 146.179 li
249.662 146.473 li
246.443 143.255 li
246.619 142.056 246.256 140.792 245.335 139.869 cv
243.781 138.317 241.264 138.315 239.711 139.867 cv
238.157 141.421 238.157 143.94 239.711 145.49 cv
240.633 146.414 241.896 146.776 243.096 146.603 cv
252.391 155.897 li
252.217 157.097 252.577 158.361 253.502 159.283 cv
255.053 160.834 257.572 160.837 259.125 159.283 cv
260.675 157.729 260.675 155.209 259.125 153.66 cv
258.201 152.735 256.937 152.375 255.738 152.549 cv
252.521 149.333 li
252.814 149.292 li
260.85 141.259 li
cp
f
257.982 132.106 mo
257.75 137.095 li
262.434 136.557 li
261.899 141.245 li
266.885 141.009 li
267.188 131.806 li
257.982 132.106 li
cp
f
241.412 194.659 mo
248.221 201.471 li
256.932 206.32 li
242.763 192.15 li
242.322 193.032 241.867 193.864 241.412 194.659 cv
cp
f
201.467 154.713 mo
204.44 157.687 li
206.589 155.978 li
203.396 152.782 li
201.467 154.713 li
cp
f
244.229 188.96 mo
243.84 189.885 243.434 190.769 243.023 191.612 cv
257.33 205.92 li
252.482 197.213 li
244.229 188.96 li
cp
f
209.181 153.914 mo
205.725 150.455 li
203.794 152.383 li
207.033 155.623 li
209.181 153.914 li
cp
f
193.067 206.32 mo
201.775 201.471 li
208.587 194.659 li
208.129 193.867 207.679 193.032 207.234 192.15 cv
193.067 206.32 li
cp
f
248.533 154.713 mo
246.605 152.782 li
243.41 155.978 li
245.558 157.689 li
248.533 154.713 li
cp
f
240.816 153.914 mo
242.963 155.625 li
246.205 152.383 li
244.275 150.455 li
240.816 153.914 li
cp
f
205.77 188.96 mo
197.519 197.213 li
192.669 205.92 li
206.974 191.615 li
206.563 190.769 206.159 189.887 205.77 188.96 cv
cp
f
225.002 198.046 mo
225.002 198.046 209.702 191.667 209.702 166.297 cv
225.002 154.119 li
240.302 166.297 li
240.302 191.667 225.002 198.046 225.002 198.046 cv
cp
225.002 202.799 mo
225.002 202.799 206.392 195.039 206.392 164.18 cv
225.002 149.367 li
243.612 164.18 li
243.612 195.039 225.002 202.799 225.002 202.799 cv
cp
227.189 144.509 mo
227.049 143.132 226.242 142.71 225.626 142.594 cv
225.176 141.412 li
225.38 141.101 225.682 140.605 225.993 139.969 cv
228.506 136.373 231.219 135.974 231.219 135.974 cv
231.178 141.637 235.801 142.691 235.801 142.691 cv
232.215 139.333 235.532 133.038 235.532 133.038 cv
231.348 132.265 228.775 133.811 227.207 135.808 cv
227.232 135.526 227.25 135.242 227.25 134.951 cv
227.25 131.176 224.916 128.114 224.916 128.114 cv
224.916 128.114 222.578 131.176 222.578 134.951 cv
222.578 135.241 222.596 135.523 222.621 135.803 cv
221.053 133.808 218.481 132.266 214.3 133.038 cv
214.3 133.038 217.615 139.333 214.031 142.691 cv
214.031 142.691 218.655 141.637 218.614 135.974 cv
218.614 135.974 221.322 136.373 223.834 139.963 cv
224.148 140.602 224.451 141.1 224.656 141.412 cv
224.207 142.594 li
223.571 142.714 222.732 143.164 222.634 144.648 cv
201.796 161.234 li
201.796 199.71 225 209.386 225 209.386 cv
225 209.386 248.203 199.71 248.203 161.234 cv
227.189 144.509 li
cp
f
66.9043 0 mo
56.25 10.6543 li
56.25 12.2979 li
68.5483 0 li
66.9043 0 li
cp
f
158.096 0 mo
156.45 0 li
168.75 12.2979 li
168.75 10.6543 li
158.096 0 li
cp
f
56.25 100.199 mo
56.25 101.843 li
66.9043 112.5 li
68.5483 112.5 li
56.25 100.199 li
cp
f
156.474 112.5 mo
158.12 112.5 li
168.75 101.865 li
168.75 100.222 li
156.474 112.5 li
cp
f
57.9883 .00683594 mo
57.9883 .96875 57.2095 1.74316 56.2515 1.74316 cv
56.2515 .00683594 li
57.9883 .00683594 li
cp
f
168.749 .00683594 mo
168.749 1.74316 li
167.791 1.74316 167.012 .96875 167.012 .00683594 cv
168.749 .00683594 li
cp
f
168.749 110.76 mo
168.749 112.493 li
167.012 112.493 li
167.012 111.537 167.791 110.76 168.749 110.76 cv
cp
f
57.9883 112.493 mo
56.2515 112.493 li
56.2515 110.757 li
57.2095 110.757 57.9883 111.534 57.9883 112.493 cv
cp
f
66.9043 450 mo
56.25 460.654 li
56.25 462.298 li
68.5483 450 li
66.9043 450 li
cp
f
158.096 450 mo
156.45 450 li
168.75 462.298 li
168.75 460.654 li
158.096 450 li
cp
f
404.404 337.5 mo
393.75 348.154 li
393.75 349.798 li
406.049 337.5 li
404.404 337.5 li
cp
f
393.75 437.699 mo
393.75 439.343 li
404.404 450 li
406.049 450 li
393.75 437.699 li
cp
f
395.488 337.507 mo
395.488 338.469 394.709 339.243 393.752 339.243 cv
393.752 337.507 li
395.488 337.507 li
cp
f
395.488 449.993 mo
393.752 449.993 li
393.752 448.257 li
394.709 448.257 395.488 449.034 395.488 449.993 cv
cp
f
45.5957 337.5 mo
43.9502 337.5 li
56.25 349.798 li
56.25 348.154 li
45.5957 337.5 li
cp
f
43.9746 450 mo
45.6191 450 li
56.25 439.365 li
56.25 437.722 li
43.9746 450 li
cp
f
56.248 337.507 mo
56.248 339.243 li
55.291 339.243 54.5117 338.469 54.5117 337.507 cv
56.248 337.507 li
cp
f
56.248 448.26 mo
56.248 449.993 li
54.5117 449.993 li
54.5117 449.037 55.291 448.26 56.248 448.26 cv
cp
f
179.404 337.5 mo
168.75 348.154 li
168.75 349.798 li
181.048 337.5 li
179.404 337.5 li
cp
f
270.596 337.5 mo
268.95 337.5 li
281.25 349.798 li
281.25 348.154 li
270.596 337.5 li
cp
f
168.75 437.699 mo
168.75 439.343 li
179.404 450 li
181.048 450 li
168.75 437.699 li
cp
f
268.975 450 mo
270.619 450 li
281.25 439.365 li
281.25 437.722 li
268.975 450 li
cp
f
170.488 337.507 mo
170.488 338.469 169.709 339.243 168.751 339.243 cv
168.751 337.507 li
170.488 337.507 li
cp
f
281.248 337.507 mo
281.248 339.243 li
280.291 339.243 279.512 338.469 279.512 337.507 cv
281.248 337.507 li
cp
f
281.248 448.26 mo
281.248 449.993 li
279.512 449.993 li
279.512 449.037 280.291 448.26 281.248 448.26 cv
cp
f
170.488 449.993 mo
168.751 449.993 li
168.751 448.257 li
169.709 448.257 170.488 449.034 170.488 449.993 cv
cp
f
291.904 225 mo
281.25 235.654 li
281.25 237.298 li
293.549 225 li
291.904 225 li
cp
f
383.096 225 mo
381.45 225 li
393.75 237.298 li
393.75 235.654 li
383.096 225 li
cp
f
281.25 325.199 mo
281.25 326.843 li
291.904 337.5 li
293.549 337.5 li
281.25 325.199 li
cp
f
381.475 337.5 mo
383.119 337.5 li
393.75 326.865 li
393.75 325.222 li
381.475 337.5 li
cp
f
282.988 225.007 mo
282.988 225.969 282.209 226.743 281.252 226.743 cv
281.252 225.007 li
282.988 225.007 li
cp
f
393.748 225.007 mo
393.748 226.743 li
392.791 226.743 392.012 225.969 392.012 225.007 cv
393.748 225.007 li
cp
f
393.748 335.76 mo
393.748 337.493 li
392.012 337.493 li
392.012 336.537 392.791 335.76 393.748 335.76 cv
cp
f
282.988 337.493 mo
281.252 337.493 li
281.252 335.757 li
282.209 335.757 282.988 336.534 282.988 337.493 cv
cp
f
66.9043 225 mo
56.25 235.654 li
56.25 237.298 li
68.5483 225 li
66.9043 225 li
cp
f
158.096 225 mo
156.45 225 li
168.75 237.298 li
168.75 235.654 li
158.096 225 li
cp
f
56.25 325.199 mo
56.25 326.843 li
66.9043 337.5 li
68.5483 337.5 li
56.25 325.199 li
cp
f
156.474 337.5 mo
158.12 337.5 li
168.75 326.865 li
168.75 325.222 li
156.474 337.5 li
cp
f
57.9883 225.007 mo
57.9883 225.969 57.2095 226.743 56.2515 226.743 cv
56.2515 225.007 li
57.9883 225.007 li
cp
f
168.749 225.007 mo
168.749 226.743 li
167.791 226.743 167.012 225.969 167.012 225.007 cv
168.749 225.007 li
cp
f
168.749 335.76 mo
168.749 337.493 li
167.012 337.493 li
167.012 336.537 167.791 335.76 168.749 335.76 cv
cp
f
57.9883 337.493 mo
56.2515 337.493 li
56.2515 335.757 li
57.2095 335.757 57.9883 336.534 57.9883 337.493 cv
cp
f
404.404 112.5 mo
393.75 123.154 li
393.75 124.798 li
406.049 112.5 li
404.404 112.5 li
cp
f
393.75 212.699 mo
393.75 214.343 li
404.404 225 li
406.049 225 li
393.75 212.699 li
cp
f
395.488 112.507 mo
395.488 113.469 394.709 114.243 393.752 114.243 cv
393.752 112.507 li
395.488 112.507 li
cp
f
395.488 224.993 mo
393.752 224.993 li
393.752 223.257 li
394.709 223.257 395.488 224.034 395.488 224.993 cv
cp
f
45.5957 112.5 mo
43.9502 112.5 li
56.25 124.798 li
56.25 123.154 li
45.5957 112.5 li
cp
f
43.9746 225 mo
45.6191 225 li
56.25 214.365 li
56.25 212.722 li
43.9746 225 li
cp
f
56.248 112.507 mo
56.248 114.243 li
55.291 114.243 54.5117 113.469 54.5117 112.507 cv
56.248 112.507 li
cp
f
56.248 223.26 mo
56.248 224.993 li
54.5117 224.993 li
54.5117 224.037 55.291 223.26 56.248 223.26 cv
cp
f
179.404 112.5 mo
168.75 123.154 li
168.75 124.798 li
181.048 112.5 li
179.404 112.5 li
cp
f
270.596 112.5 mo
268.95 112.5 li
281.25 124.798 li
281.25 123.154 li
270.596 112.5 li
cp
f
168.75 212.699 mo
168.75 214.343 li
179.404 225 li
181.048 225 li
168.75 212.699 li
cp
f
268.975 225 mo
270.619 225 li
281.25 214.365 li
281.25 212.722 li
268.975 225 li
cp
f
170.488 112.507 mo
170.488 113.469 169.709 114.243 168.751 114.243 cv
168.751 112.507 li
170.488 112.507 li
cp
f
281.248 112.507 mo
281.248 114.243 li
280.291 114.243 279.512 113.469 279.512 112.507 cv
281.248 112.507 li
cp
f
281.248 223.26 mo
281.248 224.993 li
279.512 224.993 li
279.512 224.037 280.291 223.26 281.248 223.26 cv
cp
f
170.488 224.993 mo
168.751 224.993 li
168.751 223.257 li
169.709 223.257 170.488 224.034 170.488 224.993 cv
cp
f
291.904 0 mo
281.25 10.6543 li
281.25 12.2979 li
293.549 0 li
291.904 0 li
cp
f
383.096 0 mo
381.45 0 li
393.75 12.2979 li
393.75 10.6543 li
383.096 0 li
cp
f
281.25 100.199 mo
281.25 101.843 li
291.904 112.5 li
293.549 112.5 li
281.25 100.199 li
cp
f
381.475 112.5 mo
383.119 112.5 li
393.75 101.865 li
393.75 100.222 li
381.475 112.5 li
cp
f
282.988 .00683594 mo
282.988 .96875 282.209 1.74316 281.252 1.74316 cv
281.252 .00683594 li
282.988 .00683594 li
cp
f
393.748 .00683594 mo
393.748 1.74316 li
392.791 1.74316 392.012 .96875 392.012 .00683594 cv
393.748 .00683594 li
cp
f
393.748 110.76 mo
393.748 112.493 li
392.012 112.493 li
392.012 111.537 392.791 110.76 393.748 110.76 cv
cp
f
282.988 112.493 mo
281.252 112.493 li
281.252 110.757 li
282.209 110.757 282.988 111.534 282.988 112.493 cv
cp
f
291.904 450 mo
281.25 460.654 li
281.25 462.298 li
293.549 450 li
291.904 450 li
cp
f
383.096 450 mo
381.45 450 li
393.75 462.298 li
393.75 460.654 li
383.096 450 li
cp
f
10.6396 56.2607 mo
.00976563 66.8955 li
-.82373 67.7236 li
-45.5962 112.497 li
-43.9521 112.497 li
.00976563 68.5361 li
.820313 67.7236 li
11.4756 57.0732 li
10.6396 56.2607 li
cp
10.6396 56.2607 mo
.00976563 66.8955 li
-.82373 67.7236 li
-45.5962 112.497 li
-43.9521 112.497 li
.00976563 68.5361 li
.820313 67.7236 li
11.4756 57.0732 li
10.6396 56.2607 li
cp
43.9956 0 mo
.00976563 43.9863 li
-.80127 44.7988 li
-11.4551 55.4492 li
-12.2881 56.2607 li
-56.25 100.222 li
-56.25 101.865 li
-11.4551 57.0732 li
-10.644 56.2607 li
.00976563 45.6074 li
.820313 44.7988 li
45.6138 0 li
43.9956 0 li
cp
11.4756 55.4492 mo
10.6396 56.2607 li
.00976563 66.8955 li
-.82373 67.7236 li
-45.5962 112.497 li
-43.9521 112.497 li
.00976563 68.5361 li
.820313 67.7236 li
11.4756 57.0732 li
12.2866 56.2607 li
56.2466 12.3008 li
56.2466 10.6572 li
11.4756 55.4492 li
cp
10.6396 56.2607 mo
.00976563 66.8955 li
-.82373 67.7236 li
-45.5962 112.497 li
-43.9521 112.497 li
.00976563 68.5361 li
.820313 67.7236 li
11.4756 57.0732 li
10.6396 56.2607 li
cp
f
12.2866 56.2607 mo
11.4756 55.4492 li
.820313 44.7988 li
.00976563 43.9863 li
-43.9746 0 li
-45.5962 0 li
-.80127 44.7988 li
.00976563 45.6074 li
10.6396 56.2607 li
11.4756 57.0732 li
56.2466 101.865 li
56.2466 100.222 li
12.2866 56.2607 li
cp
.820313 67.7236 mo
.00976563 66.8955 li
-10.644 56.2607 li
-11.4551 55.4492 li
-56.25 10.6572 li
-56.25 12.3008 li
-12.2881 56.2607 li
-11.4551 57.0732 li
-.82373 67.7236 li
.00976563 68.5361 li
43.9697 112.497 li
45.6138 112.497 li
.820313 67.7236 li
cp
f
3.45117 56.2607 mo
3.45117 58.1611 1.90771 59.7021 .00488281 59.7021 cv
-1.89648 59.7021 -3.44141 58.1611 -3.44141 56.2607 cv
-3.44141 54.3555 -1.89648 52.8105 .00488281 52.8105 cv
1.90771 52.8105 3.45117 54.3555 3.45117 56.2607 cv
cp
f
10.3003 44.2227 mo
10.3003 45.1826 11.0776 45.96 12.0386 45.96 cv
12.9966 45.96 13.7754 45.1826 13.7754 44.2227 cv
13.7754 43.2637 12.9966 42.4863 12.0386 42.4863 cv
11.0776 42.4863 10.3003 43.2637 10.3003 44.2227 cv
cp
f
16.6426 37.8809 mo
16.6426 38.8398 17.4199 39.6172 18.3779 39.6172 cv
19.3374 39.6172 20.1162 38.8398 20.1162 37.8809 cv
20.1162 36.9209 19.3374 36.1436 18.3779 36.1436 cv
17.4199 36.1436 16.6426 36.9209 16.6426 37.8809 cv
cp
f
22.9482 31.5732 mo
22.9482 32.5332 23.7256 33.3135 24.6851 33.3135 cv
25.6431 33.3135 26.4219 32.5332 26.4219 31.5732 cv
26.4219 30.6172 25.6431 29.8398 24.6851 29.8398 cv
23.7256 29.8398 22.9482 30.6172 22.9482 31.5732 cv
cp
f
29.2559 25.2666 mo
29.2559 26.2256 30.0313 27.0068 30.9941 27.0068 cv
31.9517 27.0068 32.7305 26.2256 32.7305 25.2666 cv
32.7305 24.3105 31.9517 23.5332 30.9941 23.5332 cv
30.0313 23.5332 29.2559 24.3105 29.2559 25.2666 cv
cp
f
35.563 18.9629 mo
35.563 19.9189 36.3384 20.6992 37.2998 20.6992 cv
38.2593 20.6992 39.0361 19.9189 39.0361 18.9629 cv
39.0361 18.0029 38.2593 17.2227 37.2998 17.2227 cv
36.3384 17.2227 35.563 18.0029 35.563 18.9629 cv
cp
f
41.8667 12.6553 mo
41.8667 13.6152 42.644 14.3926 43.605 14.3926 cv
44.5645 14.3926 45.3438 13.6152 45.3438 12.6553 cv
45.3438 11.6963 44.5645 10.9189 43.605 10.9189 cv
42.644 10.9189 41.8667 11.6963 41.8667 12.6553 cv
cp
f
48.1743 6.35156 mo
48.1743 7.31152 48.9512 8.08887 49.9106 8.08887 cv
50.8701 8.08887 51.6489 7.31152 51.6489 6.35156 cv
51.6489 5.39258 50.8701 4.6123 49.9106 4.6123 cv
48.9512 4.6123 48.1743 5.39258 48.1743 6.35156 cv
cp
f
10.3003 68.293 mo
10.3003 67.3369 11.0776 66.5566 12.0386 66.5566 cv
12.9966 66.5566 13.7754 67.3369 13.7754 68.293 cv
13.7754 69.2529 12.9966 70.0332 12.0386 70.0332 cv
11.0776 70.0332 10.3003 69.2529 10.3003 68.293 cv
cp
f
16.6426 74.6357 mo
16.6426 73.6787 17.4199 72.8984 18.3779 72.8984 cv
19.3374 72.8984 20.1162 73.6787 20.1162 74.6357 cv
20.1162 75.5947 19.3374 76.3721 18.3779 76.3721 cv
17.4199 76.3721 16.6426 75.5947 16.6426 74.6357 cv
cp
f
22.9482 80.9424 mo
22.9482 79.9834 23.7256 79.2061 24.6851 79.2061 cv
25.6431 79.2061 26.4219 79.9834 26.4219 80.9424 cv
26.4219 81.9023 25.6431 82.6787 24.6851 82.6787 cv
23.7256 82.6787 22.9482 81.9023 22.9482 80.9424 cv
cp
f
29.2559 87.2461 mo
29.2559 86.29 30.0313 85.5098 30.9941 85.5098 cv
31.9517 85.5098 32.7305 86.29 32.7305 87.2461 cv
32.7305 88.2061 31.9517 88.9834 30.9941 88.9834 cv
30.0313 88.9834 29.2559 88.2061 29.2559 87.2461 cv
cp
f
35.563 93.5537 mo
35.563 92.5938 36.3384 91.8164 37.2998 91.8164 cv
38.2593 91.8164 39.0361 92.5938 39.0361 93.5537 cv
39.0361 94.5127 38.2593 95.29 37.2998 95.29 cv
36.3384 95.29 35.563 94.5127 35.563 93.5537 cv
cp
f
41.8667 99.8604 mo
41.8667 98.9014 42.644 98.124 43.605 98.124 cv
44.5645 98.124 45.3438 98.9014 45.3438 99.8604 cv
45.3438 100.819 44.5645 101.594 43.605 101.594 cv
42.644 101.594 41.8667 100.819 41.8667 99.8604 cv
cp
f
48.1743 106.167 mo
48.1743 105.208 48.9512 104.428 49.9106 104.428 cv
50.8701 104.428 51.6489 105.208 51.6489 106.167 cv
51.6489 107.127 50.8701 107.904 49.9106 107.904 cv
48.9512 107.904 48.1743 107.127 48.1743 106.167 cv
cp
f
56.25 .0126953 mo
56.25 1.74902 li
55.2905 1.74902 54.5132 .972656 54.5132 .0126953 cv
56.25 .0126953 li
cp
f
56.25 110.764 mo
56.25 112.5 li
54.5132 112.5 li
54.5132 111.54 55.2905 110.764 56.25 110.764 cv
cp
f
460.64 56.2607 mo
450.01 66.8955 li
449.176 67.7236 li
404.404 112.497 li
406.048 112.497 li
450.01 68.5361 li
450.82 67.7236 li
461.476 57.0732 li
460.64 56.2607 li
cp
460.64 56.2607 mo
450.01 66.8955 li
449.176 67.7236 li
404.404 112.497 li
406.048 112.497 li
450.01 68.5361 li
450.82 67.7236 li
461.476 57.0732 li
460.64 56.2607 li
cp
493.996 0 mo
450.01 43.9863 li
449.199 44.7988 li
438.545 55.4492 li
437.712 56.2607 li
393.75 100.222 li
393.75 101.865 li
438.545 57.0732 li
439.355 56.2607 li
450.01 45.6074 li
450.82 44.7988 li
495.613 0 li
493.996 0 li
cp
461.476 55.4492 mo
460.64 56.2607 li
450.01 66.8955 li
449.176 67.7236 li
404.404 112.497 li
406.048 112.497 li
450.01 68.5361 li
450.82 67.7236 li
461.476 57.0732 li
462.287 56.2607 li
506.246 12.3008 li
506.246 10.6572 li
461.476 55.4492 li
cp
460.64 56.2607 mo
450.01 66.8955 li
449.176 67.7236 li
404.404 112.497 li
406.048 112.497 li
450.01 68.5361 li
450.82 67.7236 li
461.476 57.0732 li
460.64 56.2607 li
cp
f
462.287 56.2607 mo
461.476 55.4492 li
450.82 44.7988 li
450.01 43.9863 li
406.025 0 li
404.404 0 li
449.199 44.7988 li
450.01 45.6074 li
460.64 56.2607 li
461.476 57.0732 li
506.246 101.865 li
506.246 100.222 li
462.287 56.2607 li
cp
450.82 67.7236 mo
450.01 66.8955 li
439.355 56.2607 li
438.545 55.4492 li
393.75 10.6572 li
393.75 12.3008 li
437.712 56.2607 li
438.545 57.0732 li
449.176 67.7236 li
450.01 68.5361 li
493.97 112.497 li
495.613 112.497 li
450.82 67.7236 li
cp
f
453.451 56.2607 mo
453.451 58.1611 451.908 59.7021 450.005 59.7021 cv
448.104 59.7021 446.559 58.1611 446.559 56.2607 cv
446.559 54.3555 448.104 52.8105 450.005 52.8105 cv
451.908 52.8105 453.451 54.3555 453.451 56.2607 cv
cp
f
439.706 44.2227 mo
439.706 45.1826 438.93 45.96 437.969 45.96 cv
437.012 45.96 436.234 45.1826 436.234 44.2227 cv
436.234 43.2637 437.012 42.4863 437.969 42.4863 cv
438.93 42.4863 439.706 43.2637 439.706 44.2227 cv
cp
f
433.365 37.8809 mo
433.365 38.8398 432.59 39.6172 431.629 39.6172 cv
430.669 39.6172 429.892 38.8398 429.892 37.8809 cv
429.892 36.9209 430.669 36.1436 431.629 36.1436 cv
432.59 36.1436 433.365 36.9209 433.365 37.8809 cv
cp
f
427.061 31.5732 mo
427.061 32.5332 426.284 33.3135 425.322 33.3135 cv
424.363 33.3135 423.584 32.5332 423.584 31.5732 cv
423.584 30.6172 424.363 29.8398 425.322 29.8398 cv
426.284 29.8398 427.061 30.6172 427.061 31.5732 cv
cp
f
420.751 25.2666 mo
420.751 26.2256 419.974 27.0068 419.016 27.0068 cv
418.058 27.0068 417.277 26.2256 417.277 25.2666 cv
417.277 24.3105 418.058 23.5332 419.016 23.5332 cv
419.974 23.5332 420.751 24.3105 420.751 25.2666 cv
cp
f
414.445 18.9629 mo
414.445 19.9189 413.67 20.6992 412.71 20.6992 cv
411.75 20.6992 410.972 19.9189 410.972 18.9629 cv
410.972 18.0029 411.75 17.2227 412.71 17.2227 cv
413.67 17.2227 414.445 18.0029 414.445 18.9629 cv
cp
f
408.14 12.6553 mo
408.14 13.6152 407.362 14.3926 406.404 14.3926 cv
405.445 14.3926 404.666 13.6152 404.666 12.6553 cv
404.666 11.6963 405.445 10.9189 406.404 10.9189 cv
407.362 10.9189 408.14 11.6963 408.14 12.6553 cv
cp
f
401.834 6.35156 mo
401.834 7.31152 401.057 8.08887 400.099 8.08887 cv
399.139 8.08887 398.36 7.31152 398.36 6.35156 cv
398.36 5.39258 399.139 4.6123 400.099 4.6123 cv
401.057 4.6123 401.834 5.39258 401.834 6.35156 cv
cp
f
439.706 68.293 mo
439.706 67.3369 438.93 66.5566 437.969 66.5566 cv
437.012 66.5566 436.234 67.3369 436.234 68.293 cv
436.234 69.2529 437.012 70.0332 437.969 70.0332 cv
438.93 70.0332 439.706 69.2529 439.706 68.293 cv
cp
f
433.365 74.6357 mo
433.365 73.6787 432.59 72.8984 431.629 72.8984 cv
430.669 72.8984 429.892 73.6787 429.892 74.6357 cv
429.892 75.5947 430.669 76.3721 431.629 76.3721 cv
432.59 76.3721 433.365 75.5947 433.365 74.6357 cv
cp
f
427.061 80.9424 mo
427.061 79.9834 426.284 79.2061 425.322 79.2061 cv
424.363 79.2061 423.584 79.9834 423.584 80.9424 cv
423.584 81.9023 424.363 82.6787 425.322 82.6787 cv
426.284 82.6787 427.061 81.9023 427.061 80.9424 cv
cp
f
420.751 87.2461 mo
420.751 86.29 419.974 85.5098 419.016 85.5098 cv
418.058 85.5098 417.277 86.29 417.277 87.2461 cv
417.277 88.2061 418.058 88.9834 419.016 88.9834 cv
419.974 88.9834 420.751 88.2061 420.751 87.2461 cv
cp
f
414.445 93.5537 mo
414.445 92.5938 413.67 91.8164 412.71 91.8164 cv
411.75 91.8164 410.972 92.5938 410.972 93.5537 cv
410.972 94.5127 411.75 95.29 412.71 95.29 cv
413.67 95.29 414.445 94.5127 414.445 93.5537 cv
cp
f
408.14 99.8604 mo
408.14 98.9014 407.362 98.124 406.404 98.124 cv
405.445 98.124 404.666 98.9014 404.666 99.8604 cv
404.666 100.819 405.445 101.594 406.404 101.594 cv
407.362 101.594 408.14 100.819 408.14 99.8604 cv
cp
f
401.834 106.167 mo
401.834 105.208 401.057 104.428 400.099 104.428 cv
399.139 104.428 398.36 105.208 398.36 106.167 cv
398.36 107.127 399.139 107.904 400.099 107.904 cv
401.057 107.904 401.834 107.127 401.834 106.167 cv
cp
f
395.494 .0126953 mo
395.494 .972656 394.719 1.74902 393.76 1.74902 cv
393.76 .0126953 li
395.494 .0126953 li
cp
f
395.494 112.5 mo
393.76 112.5 li
393.76 110.764 li
394.719 110.764 395.494 111.54 395.494 112.5 cv
cp
f
460.64 506.261 mo
450.01 516.896 li
449.176 517.724 li
404.404 562.497 li
406.048 562.497 li
450.01 518.536 li
450.82 517.724 li
461.476 507.073 li
460.64 506.261 li
cp
460.64 506.261 mo
450.01 516.896 li
449.176 517.724 li
404.404 562.497 li
406.048 562.497 li
450.01 518.536 li
450.82 517.724 li
461.476 507.073 li
460.64 506.261 li
cp
493.996 450 mo
450.01 493.986 li
449.199 494.799 li
438.545 505.449 li
437.712 506.261 li
393.75 550.222 li
393.75 551.865 li
438.545 507.073 li
439.355 506.261 li
450.01 495.607 li
450.82 494.799 li
495.613 450 li
493.996 450 li
cp
461.476 505.449 mo
460.64 506.261 li
450.01 516.896 li
449.176 517.724 li
404.404 562.497 li
406.048 562.497 li
450.01 518.536 li
450.82 517.724 li
461.476 507.073 li
462.287 506.261 li
506.246 462.301 li
506.246 460.657 li
461.476 505.449 li
cp
460.64 506.261 mo
450.01 516.896 li
449.176 517.724 li
404.404 562.497 li
406.048 562.497 li
450.01 518.536 li
450.82 517.724 li
461.476 507.073 li
460.64 506.261 li
cp
f
462.287 506.261 mo
461.476 505.449 li
450.82 494.799 li
450.01 493.986 li
406.025 450 li
404.404 450 li
449.199 494.799 li
450.01 495.607 li
460.64 506.261 li
461.476 507.073 li
506.246 551.865 li
506.246 550.222 li
462.287 506.261 li
cp
450.82 517.724 mo
450.01 516.896 li
439.355 506.261 li
438.545 505.449 li
393.75 460.657 li
393.75 462.301 li
437.712 506.261 li
438.545 507.073 li
449.176 517.724 li
450.01 518.536 li
493.97 562.497 li
495.613 562.497 li
450.82 517.724 li
cp
f
10.6396 506.261 mo
.00976563 516.896 li
-.82373 517.724 li
-45.5962 562.497 li
-43.9521 562.497 li
.00976563 518.536 li
.820313 517.724 li
11.4756 507.073 li
10.6396 506.261 li
cp
10.6396 506.261 mo
.00976563 516.896 li
-.82373 517.724 li
-45.5962 562.497 li
-43.9521 562.497 li
.00976563 518.536 li
.820313 517.724 li
11.4756 507.073 li
10.6396 506.261 li
cp
43.9956 450 mo
.00976563 493.986 li
-.80127 494.799 li
-11.4551 505.449 li
-12.2881 506.261 li
-56.25 550.222 li
-56.25 551.865 li
-11.4551 507.073 li
-10.644 506.261 li
.00976563 495.607 li
.820313 494.799 li
45.6138 450 li
43.9956 450 li
cp
11.4756 505.449 mo
10.6396 506.261 li
.00976563 516.896 li
-.82373 517.724 li
-45.5962 562.497 li
-43.9521 562.497 li
.00976563 518.536 li
.820313 517.724 li
11.4756 507.073 li
12.2866 506.261 li
56.2466 462.301 li
56.2466 460.657 li
11.4756 505.449 li
cp
10.6396 506.261 mo
.00976563 516.896 li
-.82373 517.724 li
-45.5962 562.497 li
-43.9521 562.497 li
.00976563 518.536 li
.820313 517.724 li
11.4756 507.073 li
10.6396 506.261 li
cp
f
12.2866 506.261 mo
11.4756 505.449 li
.820313 494.799 li
.00976563 493.986 li
-43.9746 450 li
-45.5962 450 li
-.80127 494.799 li
.00976563 495.607 li
10.6396 506.261 li
11.4756 507.073 li
56.2466 551.865 li
56.2466 550.222 li
12.2866 506.261 li
cp
.820313 517.724 mo
.00976563 516.896 li
-10.644 506.261 li
-11.4551 505.449 li
-56.25 460.657 li
-56.25 462.301 li
-12.2881 506.261 li
-11.4551 507.073 li
-.82373 517.724 li
.00976563 518.536 li
43.9697 562.497 li
45.6138 562.497 li
.820313 517.724 li
cp
f
348.14 393.761 mo
337.51 404.396 li
336.676 405.224 li
291.904 449.997 li
293.548 449.997 li
337.51 406.036 li
338.32 405.224 li
348.976 394.573 li
348.14 393.761 li
cp
348.14 393.761 mo
337.51 404.396 li
336.676 405.224 li
291.904 449.997 li
293.548 449.997 li
337.51 406.036 li
338.32 405.224 li
348.976 394.573 li
348.14 393.761 li
cp
381.496 337.5 mo
337.51 381.486 li
336.699 382.299 li
326.045 392.949 li
325.212 393.761 li
281.25 437.722 li
281.25 439.365 li
326.045 394.573 li
326.855 393.761 li
337.51 383.107 li
338.32 382.299 li
383.113 337.5 li
381.496 337.5 li
cp
348.976 392.949 mo
348.14 393.761 li
337.51 404.396 li
336.676 405.224 li
291.904 449.997 li
293.548 449.997 li
337.51 406.036 li
338.32 405.224 li
348.976 394.573 li
349.787 393.761 li
393.746 349.801 li
393.746 348.157 li
348.976 392.949 li
cp
348.14 393.761 mo
337.51 404.396 li
336.676 405.224 li
291.904 449.997 li
293.548 449.997 li
337.51 406.036 li
338.32 405.224 li
348.976 394.573 li
348.14 393.761 li
cp
f
349.787 393.761 mo
348.976 392.949 li
338.32 382.299 li
337.51 381.486 li
293.525 337.5 li
291.904 337.5 li
336.699 382.299 li
337.51 383.107 li
348.14 393.761 li
348.976 394.573 li
393.746 439.365 li
393.746 437.722 li
349.787 393.761 li
cp
338.32 405.224 mo
337.51 404.396 li
326.855 393.761 li
326.045 392.949 li
281.25 348.157 li
281.25 349.801 li
325.212 393.761 li
326.045 394.573 li
336.676 405.224 li
337.51 406.036 li
381.47 449.997 li
383.113 449.997 li
338.32 405.224 li
cp
f
340.951 393.761 mo
340.951 395.661 339.408 397.202 337.505 397.202 cv
335.604 397.202 334.059 395.661 334.059 393.761 cv
334.059 391.855 335.604 390.311 337.505 390.311 cv
339.408 390.311 340.951 391.855 340.951 393.761 cv
cp
f
327.206 381.723 mo
327.206 382.683 326.43 383.46 325.469 383.46 cv
324.512 383.46 323.734 382.683 323.734 381.723 cv
323.734 380.764 324.512 379.986 325.469 379.986 cv
326.43 379.986 327.206 380.764 327.206 381.723 cv
cp
f
320.865 375.381 mo
320.865 376.34 320.09 377.117 319.129 377.117 cv
318.169 377.117 317.392 376.34 317.392 375.381 cv
317.392 374.421 318.169 373.644 319.129 373.644 cv
320.09 373.644 320.865 374.421 320.865 375.381 cv
cp
f
314.561 369.073 mo
314.561 370.033 313.784 370.813 312.822 370.813 cv
311.863 370.813 311.084 370.033 311.084 369.073 cv
311.084 368.117 311.863 367.34 312.822 367.34 cv
313.784 367.34 314.561 368.117 314.561 369.073 cv
cp
f
308.251 362.767 mo
308.251 363.726 307.474 364.507 306.516 364.507 cv
305.558 364.507 304.777 363.726 304.777 362.767 cv
304.777 361.811 305.558 361.033 306.516 361.033 cv
307.474 361.033 308.251 361.811 308.251 362.767 cv
cp
f
301.945 356.463 mo
301.945 357.419 301.17 358.199 300.21 358.199 cv
299.25 358.199 298.472 357.419 298.472 356.463 cv
298.472 355.503 299.25 354.723 300.21 354.723 cv
301.17 354.723 301.945 355.503 301.945 356.463 cv
cp
f
295.64 350.155 mo
295.64 351.115 294.862 351.893 293.904 351.893 cv
292.945 351.893 292.166 351.115 292.166 350.155 cv
292.166 349.196 292.945 348.419 293.904 348.419 cv
294.862 348.419 295.64 349.196 295.64 350.155 cv
cp
f
289.334 343.852 mo
289.334 344.812 288.557 345.589 287.599 345.589 cv
286.639 345.589 285.86 344.812 285.86 343.852 cv
285.86 342.893 286.639 342.112 287.599 342.112 cv
288.557 342.112 289.334 342.893 289.334 343.852 cv
cp
f
347.801 381.723 mo
347.801 382.683 348.578 383.46 349.539 383.46 cv
350.496 383.46 351.275 382.683 351.275 381.723 cv
351.275 380.764 350.496 379.986 349.539 379.986 cv
348.578 379.986 347.801 380.764 347.801 381.723 cv
cp
f
354.143 375.381 mo
354.143 376.34 354.92 377.117 355.878 377.117 cv
356.838 377.117 357.616 376.34 357.616 375.381 cv
357.616 374.421 356.838 373.644 355.878 373.644 cv
354.92 373.644 354.143 374.421 354.143 375.381 cv
cp
f
360.448 369.073 mo
360.448 370.033 361.226 370.813 362.186 370.813 cv
363.143 370.813 363.922 370.033 363.922 369.073 cv
363.922 368.117 363.143 367.34 362.186 367.34 cv
361.226 367.34 360.448 368.117 360.448 369.073 cv
cp
f
366.756 362.767 mo
366.756 363.726 367.531 364.507 368.494 364.507 cv
369.451 364.507 370.23 363.726 370.23 362.767 cv
370.23 361.811 369.451 361.033 368.494 361.033 cv
367.531 361.033 366.756 361.811 366.756 362.767 cv
cp
f
373.063 356.463 mo
373.063 357.419 373.838 358.199 374.8 358.199 cv
375.76 358.199 376.536 357.419 376.536 356.463 cv
376.536 355.503 375.76 354.723 374.8 354.723 cv
373.838 354.723 373.063 355.503 373.063 356.463 cv
cp
f
379.367 350.155 mo
379.367 351.115 380.145 351.893 381.105 351.893 cv
382.064 351.893 382.844 351.115 382.844 350.155 cv
382.844 349.196 382.064 348.419 381.105 348.419 cv
380.145 348.419 379.367 349.196 379.367 350.155 cv
cp
f
385.674 343.852 mo
385.674 344.812 386.451 345.589 387.41 345.589 cv
388.37 345.589 389.148 344.812 389.148 343.852 cv
389.148 342.893 388.37 342.112 387.41 342.112 cv
386.451 342.112 385.674 342.893 385.674 343.852 cv
cp
f
327.206 405.793 mo
327.206 404.837 326.43 404.057 325.469 404.057 cv
324.512 404.057 323.734 404.837 323.734 405.793 cv
323.734 406.753 324.512 407.533 325.469 407.533 cv
326.43 407.533 327.206 406.753 327.206 405.793 cv
cp
f
320.865 412.136 mo
320.865 411.179 320.09 410.398 319.129 410.398 cv
318.169 410.398 317.392 411.179 317.392 412.136 cv
317.392 413.095 318.169 413.872 319.129 413.872 cv
320.09 413.872 320.865 413.095 320.865 412.136 cv
cp
f
314.561 418.442 mo
314.561 417.483 313.784 416.706 312.822 416.706 cv
311.863 416.706 311.084 417.483 311.084 418.442 cv
311.084 419.402 311.863 420.179 312.822 420.179 cv
313.784 420.179 314.561 419.402 314.561 418.442 cv
cp
f
308.251 424.746 mo
308.251 423.79 307.474 423.01 306.516 423.01 cv
305.558 423.01 304.777 423.79 304.777 424.746 cv
304.777 425.706 305.558 426.483 306.516 426.483 cv
307.474 426.483 308.251 425.706 308.251 424.746 cv
cp
f
301.945 431.054 mo
301.945 430.094 301.17 429.316 300.21 429.316 cv
299.25 429.316 298.472 430.094 298.472 431.054 cv
298.472 432.013 299.25 432.79 300.21 432.79 cv
301.17 432.79 301.945 432.013 301.945 431.054 cv
cp
f
295.64 437.36 mo
295.64 436.401 294.862 435.624 293.904 435.624 cv
292.945 435.624 292.166 436.401 292.166 437.36 cv
292.166 438.319 292.945 439.094 293.904 439.094 cv
294.862 439.094 295.64 438.319 295.64 437.36 cv
cp
f
289.334 443.667 mo
289.334 442.708 288.557 441.928 287.599 441.928 cv
286.639 441.928 285.86 442.708 285.86 443.667 cv
285.86 444.627 286.639 445.404 287.599 445.404 cv
288.557 445.404 289.334 444.627 289.334 443.667 cv
cp
f
347.801 405.793 mo
347.801 404.837 348.578 404.057 349.539 404.057 cv
350.496 404.057 351.275 404.837 351.275 405.793 cv
351.275 406.753 350.496 407.533 349.539 407.533 cv
348.578 407.533 347.801 406.753 347.801 405.793 cv
cp
f
354.143 412.136 mo
354.143 411.179 354.92 410.398 355.878 410.398 cv
356.838 410.398 357.616 411.179 357.616 412.136 cv
357.616 413.095 356.838 413.872 355.878 413.872 cv
354.92 413.872 354.143 413.095 354.143 412.136 cv
cp
f
360.448 418.442 mo
360.448 417.483 361.226 416.706 362.186 416.706 cv
363.143 416.706 363.922 417.483 363.922 418.442 cv
363.922 419.402 363.143 420.179 362.186 420.179 cv
361.226 420.179 360.448 419.402 360.448 418.442 cv
cp
f
366.756 424.746 mo
366.756 423.79 367.531 423.01 368.494 423.01 cv
369.451 423.01 370.23 423.79 370.23 424.746 cv
370.23 425.706 369.451 426.483 368.494 426.483 cv
367.531 426.483 366.756 425.706 366.756 424.746 cv
cp
f
373.063 431.054 mo
373.063 430.094 373.838 429.316 374.8 429.316 cv
375.76 429.316 376.536 430.094 376.536 431.054 cv
376.536 432.013 375.76 432.79 374.8 432.79 cv
373.838 432.79 373.063 432.013 373.063 431.054 cv
cp
f
379.367 437.36 mo
379.367 436.401 380.145 435.624 381.105 435.624 cv
382.064 435.624 382.844 436.401 382.844 437.36 cv
382.844 438.319 382.064 439.094 381.105 439.094 cv
380.145 439.094 379.367 438.319 379.367 437.36 cv
cp
f
385.674 443.667 mo
385.674 442.708 386.451 441.928 387.41 441.928 cv
388.37 441.928 389.148 442.708 389.148 443.667 cv
389.148 444.627 388.37 445.404 387.41 445.404 cv
386.451 445.404 385.674 444.627 385.674 443.667 cv
cp
f
282.994 337.513 mo
282.994 338.473 282.219 339.249 281.26 339.249 cv
281.26 337.513 li
282.994 337.513 li
cp
f
393.75 337.513 mo
393.75 339.249 li
392.791 339.249 392.014 338.473 392.014 337.513 cv
393.75 337.513 li
cp
f
393.75 448.264 mo
393.75 450 li
392.014 450 li
392.014 449.04 392.791 448.264 393.75 448.264 cv
cp
f
282.994 450 mo
281.26 450 li
281.26 448.264 li
282.219 448.264 282.994 449.04 282.994 450 cv
cp
f
123.14 393.761 mo
112.51 404.396 li
111.676 405.224 li
66.9038 449.997 li
68.5479 449.997 li
112.51 406.036 li
113.32 405.224 li
123.976 394.573 li
123.14 393.761 li
cp
123.14 393.761 mo
112.51 404.396 li
111.676 405.224 li
66.9038 449.997 li
68.5479 449.997 li
112.51 406.036 li
113.32 405.224 li
123.976 394.573 li
123.14 393.761 li
cp
156.496 337.5 mo
112.51 381.486 li
111.699 382.299 li
101.045 392.949 li
100.212 393.761 li
56.25 437.722 li
56.25 439.365 li
101.045 394.573 li
101.856 393.761 li
112.51 383.107 li
113.32 382.299 li
158.114 337.5 li
156.496 337.5 li
cp
123.976 392.949 mo
123.14 393.761 li
112.51 404.396 li
111.676 405.224 li
66.9038 449.997 li
68.5479 449.997 li
112.51 406.036 li
113.32 405.224 li
123.976 394.573 li
124.787 393.761 li
168.747 349.801 li
168.747 348.157 li
123.976 392.949 li
cp
123.14 393.761 mo
112.51 404.396 li
111.676 405.224 li
66.9038 449.997 li
68.5479 449.997 li
112.51 406.036 li
113.32 405.224 li
123.976 394.573 li
123.14 393.761 li
cp
f
124.787 393.761 mo
123.976 392.949 li
113.32 382.299 li
112.51 381.486 li
68.5254 337.5 li
66.9038 337.5 li
111.699 382.299 li
112.51 383.107 li
123.14 393.761 li
123.976 394.573 li
168.747 439.365 li
168.747 437.722 li
124.787 393.761 li
cp
113.32 405.224 mo
112.51 404.396 li
101.856 393.761 li
101.045 392.949 li
56.25 348.157 li
56.25 349.801 li
100.212 393.761 li
101.045 394.573 li
111.676 405.224 li
112.51 406.036 li
156.47 449.997 li
158.114 449.997 li
113.32 405.224 li
cp
f
115.951 393.761 mo
115.951 395.661 114.408 397.202 112.505 397.202 cv
110.604 397.202 109.059 395.661 109.059 393.761 cv
109.059 391.855 110.604 390.311 112.505 390.311 cv
114.408 390.311 115.951 391.855 115.951 393.761 cv
cp
f
102.206 381.723 mo
102.206 382.683 101.43 383.46 100.469 383.46 cv
99.5112 383.46 98.7344 382.683 98.7344 381.723 cv
98.7344 380.764 99.5112 379.986 100.469 379.986 cv
101.43 379.986 102.206 380.764 102.206 381.723 cv
cp
f
95.8652 375.381 mo
95.8652 376.34 95.0898 377.117 94.1284 377.117 cv
93.1689 377.117 92.3916 376.34 92.3916 375.381 cv
92.3916 374.421 93.1689 373.644 94.1284 373.644 cv
95.0898 373.644 95.8652 374.421 95.8652 375.381 cv
cp
f
89.561 369.073 mo
89.561 370.033 88.7842 370.813 87.8228 370.813 cv
86.8633 370.813 86.0845 370.033 86.0845 369.073 cv
86.0845 368.117 86.8633 367.34 87.8228 367.34 cv
88.7842 367.34 89.561 368.117 89.561 369.073 cv
cp
f
83.251 362.767 mo
83.251 363.726 82.4736 364.507 81.5156 364.507 cv
80.5576 364.507 79.7773 363.726 79.7773 362.767 cv
79.7773 361.811 80.5576 361.033 81.5156 361.033 cv
82.4736 361.033 83.251 361.811 83.251 362.767 cv
cp
f
76.9453 356.463 mo
76.9453 357.419 76.1694 358.199 75.21 358.199 cv
74.2505 358.199 73.4717 357.419 73.4717 356.463 cv
73.4717 355.503 74.2505 354.723 75.21 354.723 cv
76.1694 354.723 76.9453 355.503 76.9453 356.463 cv
cp
f
70.6396 350.155 mo
70.6396 351.115 69.8623 351.893 68.9043 351.893 cv
67.9448 351.893 67.166 351.115 67.166 350.155 cv
67.166 349.196 67.9448 348.419 68.9043 348.419 cv
69.8623 348.419 70.6396 349.196 70.6396 350.155 cv
cp
f
64.334 343.852 mo
64.334 344.812 63.5566 345.589 62.5986 345.589 cv
61.6392 345.589 60.8604 344.812 60.8604 343.852 cv
60.8604 342.893 61.6392 342.112 62.5986 342.112 cv
63.5566 342.112 64.334 342.893 64.334 343.852 cv
cp
f
122.8 381.723 mo
122.8 382.683 123.578 383.46 124.539 383.46 cv
125.497 383.46 126.275 382.683 126.275 381.723 cv
126.275 380.764 125.497 379.986 124.539 379.986 cv
123.578 379.986 122.8 380.764 122.8 381.723 cv
cp
f
129.143 375.381 mo
129.143 376.34 129.92 377.117 130.878 377.117 cv
131.837 377.117 132.616 376.34 132.616 375.381 cv
132.616 374.421 131.837 373.644 130.878 373.644 cv
129.92 373.644 129.143 374.421 129.143 375.381 cv
cp
f
135.448 369.073 mo
135.448 370.033 136.226 370.813 137.185 370.813 cv
138.143 370.813 138.922 370.033 138.922 369.073 cv
138.922 368.117 138.143 367.34 137.185 367.34 cv
136.226 367.34 135.448 368.117 135.448 369.073 cv
cp
f
141.756 362.767 mo
141.756 363.726 142.531 364.507 143.494 364.507 cv
144.452 364.507 145.23 363.726 145.23 362.767 cv
145.23 361.811 144.452 361.033 143.494 361.033 cv
142.531 361.033 141.756 361.811 141.756 362.767 cv
cp
f
148.063 356.463 mo
148.063 357.419 148.838 358.199 149.8 358.199 cv
150.759 358.199 151.536 357.419 151.536 356.463 cv
151.536 355.503 150.759 354.723 149.8 354.723 cv
148.838 354.723 148.063 355.503 148.063 356.463 cv
cp
f
154.367 350.155 mo
154.367 351.115 155.144 351.893 156.105 351.893 cv
157.064 351.893 157.844 351.115 157.844 350.155 cv
157.844 349.196 157.064 348.419 156.105 348.419 cv
155.144 348.419 154.367 349.196 154.367 350.155 cv
cp
f
160.674 343.852 mo
160.674 344.812 161.451 345.589 162.411 345.589 cv
163.37 345.589 164.149 344.812 164.149 343.852 cv
164.149 342.893 163.37 342.112 162.411 342.112 cv
161.451 342.112 160.674 342.893 160.674 343.852 cv
cp
f
102.206 405.793 mo
102.206 404.837 101.43 404.057 100.469 404.057 cv
99.5112 404.057 98.7344 404.837 98.7344 405.793 cv
98.7344 406.753 99.5112 407.533 100.469 407.533 cv
101.43 407.533 102.206 406.753 102.206 405.793 cv
cp
f
95.8652 412.136 mo
95.8652 411.179 95.0898 410.398 94.1284 410.398 cv
93.1689 410.398 92.3916 411.179 92.3916 412.136 cv
92.3916 413.095 93.1689 413.872 94.1284 413.872 cv
95.0898 413.872 95.8652 413.095 95.8652 412.136 cv
cp
f
89.561 418.442 mo
89.561 417.483 88.7842 416.706 87.8228 416.706 cv
86.8633 416.706 86.0845 417.483 86.0845 418.442 cv
86.0845 419.402 86.8633 420.179 87.8228 420.179 cv
88.7842 420.179 89.561 419.402 89.561 418.442 cv
cp
f
83.251 424.746 mo
83.251 423.79 82.4736 423.01 81.5156 423.01 cv
80.5576 423.01 79.7773 423.79 79.7773 424.746 cv
79.7773 425.706 80.5576 426.483 81.5156 426.483 cv
82.4736 426.483 83.251 425.706 83.251 424.746 cv
cp
f
76.9453 431.054 mo
76.9453 430.094 76.1694 429.316 75.21 429.316 cv
74.2505 429.316 73.4717 430.094 73.4717 431.054 cv
73.4717 432.013 74.2505 432.79 75.21 432.79 cv
76.1694 432.79 76.9453 432.013 76.9453 431.054 cv
cp
f
70.6396 437.36 mo
70.6396 436.401 69.8623 435.624 68.9043 435.624 cv
67.9448 435.624 67.166 436.401 67.166 437.36 cv
67.166 438.319 67.9448 439.094 68.9043 439.094 cv
69.8623 439.094 70.6396 438.319 70.6396 437.36 cv
cp
f
64.334 443.667 mo
64.334 442.708 63.5566 441.928 62.5986 441.928 cv
61.6392 441.928 60.8604 442.708 60.8604 443.667 cv
60.8604 444.627 61.6392 445.404 62.5986 445.404 cv
63.5566 445.404 64.334 444.627 64.334 443.667 cv
cp
f
122.8 405.793 mo
122.8 404.837 123.578 404.057 124.539 404.057 cv
125.497 404.057 126.275 404.837 126.275 405.793 cv
126.275 406.753 125.497 407.533 124.539 407.533 cv
123.578 407.533 122.8 406.753 122.8 405.793 cv
cp
f
129.143 412.136 mo
129.143 411.179 129.92 410.398 130.878 410.398 cv
131.837 410.398 132.616 411.179 132.616 412.136 cv
132.616 413.095 131.837 413.872 130.878 413.872 cv
129.92 413.872 129.143 413.095 129.143 412.136 cv
cp
f
135.448 418.442 mo
135.448 417.483 136.226 416.706 137.185 416.706 cv
138.143 416.706 138.922 417.483 138.922 418.442 cv
138.922 419.402 138.143 420.179 137.185 420.179 cv
136.226 420.179 135.448 419.402 135.448 418.442 cv
cp
f
141.756 424.746 mo
141.756 423.79 142.531 423.01 143.494 423.01 cv
144.452 423.01 145.23 423.79 145.23 424.746 cv
145.23 425.706 144.452 426.483 143.494 426.483 cv
142.531 426.483 141.756 425.706 141.756 424.746 cv
cp
f
148.063 431.054 mo
148.063 430.094 148.838 429.316 149.8 429.316 cv
150.759 429.316 151.536 430.094 151.536 431.054 cv
151.536 432.013 150.759 432.79 149.8 432.79 cv
148.838 432.79 148.063 432.013 148.063 431.054 cv
cp
f
154.367 437.36 mo
154.367 436.401 155.144 435.624 156.105 435.624 cv
157.064 435.624 157.844 436.401 157.844 437.36 cv
157.844 438.319 157.064 439.094 156.105 439.094 cv
155.144 439.094 154.367 438.319 154.367 437.36 cv
cp
f
160.674 443.667 mo
160.674 442.708 161.451 441.928 162.411 441.928 cv
163.37 441.928 164.149 442.708 164.149 443.667 cv
164.149 444.627 163.37 445.404 162.411 445.404 cv
161.451 445.404 160.674 444.627 160.674 443.667 cv
cp
f
57.9946 337.513 mo
57.9946 338.473 57.2192 339.249 56.2598 339.249 cv
56.2598 337.513 li
57.9946 337.513 li
cp
f
168.75 337.513 mo
168.75 339.249 li
167.791 339.249 167.013 338.473 167.013 337.513 cv
168.75 337.513 li
cp
f
168.75 448.264 mo
168.75 450 li
167.013 450 li
167.013 449.04 167.791 448.264 168.75 448.264 cv
cp
f
57.9946 450 mo
56.2598 450 li
56.2598 448.264 li
57.2192 448.264 57.9946 449.04 57.9946 450 cv
cp
f
235.64 281.261 mo
225.01 291.896 li
224.176 292.724 li
179.404 337.497 li
181.048 337.497 li
225.01 293.536 li
225.82 292.724 li
236.476 282.073 li
235.64 281.261 li
cp
235.64 281.261 mo
225.01 291.896 li
224.176 292.724 li
179.404 337.497 li
181.048 337.497 li
225.01 293.536 li
225.82 292.724 li
236.476 282.073 li
235.64 281.261 li
cp
268.996 225 mo
225.01 268.986 li
224.199 269.799 li
213.545 280.449 li
212.712 281.261 li
168.75 325.222 li
168.75 326.865 li
213.545 282.073 li
214.356 281.261 li
225.01 270.607 li
225.82 269.799 li
270.613 225 li
268.996 225 li
cp
236.476 280.449 mo
235.64 281.261 li
225.01 291.896 li
224.176 292.724 li
179.404 337.497 li
181.048 337.497 li
225.01 293.536 li
225.82 292.724 li
236.476 282.073 li
237.287 281.261 li
281.246 237.301 li
281.246 235.657 li
236.476 280.449 li
cp
235.64 281.261 mo
225.01 291.896 li
224.176 292.724 li
179.404 337.497 li
181.048 337.497 li
225.01 293.536 li
225.82 292.724 li
236.476 282.073 li
235.64 281.261 li
cp
f
237.287 281.261 mo
236.476 280.449 li
225.82 269.799 li
225.01 268.986 li
181.025 225 li
179.404 225 li
224.199 269.799 li
225.01 270.607 li
235.64 281.261 li
236.476 282.073 li
281.246 326.865 li
281.246 325.222 li
237.287 281.261 li
cp
225.82 292.724 mo
225.01 291.896 li
214.356 281.261 li
213.545 280.449 li
168.75 235.657 li
168.75 237.301 li
212.712 281.261 li
213.545 282.073 li
224.176 292.724 li
225.01 293.536 li
268.97 337.497 li
270.613 337.497 li
225.82 292.724 li
cp
f
228.451 281.261 mo
228.451 283.161 226.908 284.702 225.005 284.702 cv
223.104 284.702 221.559 283.161 221.559 281.261 cv
221.559 279.355 223.104 277.811 225.005 277.811 cv
226.908 277.811 228.451 279.355 228.451 281.261 cv
cp
f
214.706 269.223 mo
214.706 270.183 213.93 270.96 212.969 270.96 cv
212.011 270.96 211.234 270.183 211.234 269.223 cv
211.234 268.264 212.011 267.486 212.969 267.486 cv
213.93 267.486 214.706 268.264 214.706 269.223 cv
cp
f
208.365 262.881 mo
208.365 263.84 207.59 264.617 206.628 264.617 cv
205.669 264.617 204.892 263.84 204.892 262.881 cv
204.892 261.921 205.669 261.144 206.628 261.144 cv
207.59 261.144 208.365 261.921 208.365 262.881 cv
cp
f
202.061 256.573 mo
202.061 257.533 201.284 258.313 200.323 258.313 cv
199.363 258.313 198.584 257.533 198.584 256.573 cv
198.584 255.617 199.363 254.84 200.323 254.84 cv
201.284 254.84 202.061 255.617 202.061 256.573 cv
cp
f
195.751 250.267 mo
195.751 251.226 194.974 252.007 194.016 252.007 cv
193.058 252.007 192.277 251.226 192.277 250.267 cv
192.277 249.311 193.058 248.533 194.016 248.533 cv
194.974 248.533 195.751 249.311 195.751 250.267 cv
cp
f
189.445 243.963 mo
189.445 244.919 188.669 245.699 187.71 245.699 cv
186.75 245.699 185.972 244.919 185.972 243.963 cv
185.972 243.003 186.75 242.223 187.71 242.223 cv
188.669 242.223 189.445 243.003 189.445 243.963 cv
cp
f
183.14 237.655 mo
183.14 238.615 182.362 239.393 181.404 239.393 cv
180.445 239.393 179.666 238.615 179.666 237.655 cv
179.666 236.696 180.445 235.919 181.404 235.919 cv
182.362 235.919 183.14 236.696 183.14 237.655 cv
cp
f
176.834 231.352 mo
176.834 232.312 176.057 233.089 175.099 233.089 cv
174.139 233.089 173.36 232.312 173.36 231.352 cv
173.36 230.393 174.139 229.612 175.099 229.612 cv
176.057 229.612 176.834 230.393 176.834 231.352 cv
cp
f
235.301 269.223 mo
235.301 270.183 236.078 270.96 237.039 270.96 cv
237.996 270.96 238.775 270.183 238.775 269.223 cv
238.775 268.264 237.996 267.486 237.039 267.486 cv
236.078 267.486 235.301 268.264 235.301 269.223 cv
cp
f
241.643 262.881 mo
241.643 263.84 242.42 264.617 243.378 264.617 cv
244.338 264.617 245.116 263.84 245.116 262.881 cv
245.116 261.921 244.338 261.144 243.378 261.144 cv
242.42 261.144 241.643 261.921 241.643 262.881 cv
cp
f
247.948 256.573 mo
247.948 257.533 248.726 258.313 249.686 258.313 cv
250.643 258.313 251.422 257.533 251.422 256.573 cv
251.422 255.617 250.643 254.84 249.686 254.84 cv
248.726 254.84 247.948 255.617 247.948 256.573 cv
cp
f
254.256 250.267 mo
254.256 251.226 255.031 252.007 255.994 252.007 cv
256.951 252.007 257.73 251.226 257.73 250.267 cv
257.73 249.311 256.951 248.533 255.994 248.533 cv
255.031 248.533 254.256 249.311 254.256 250.267 cv
cp
f
260.563 243.963 mo
260.563 244.919 261.338 245.699 262.3 245.699 cv
263.26 245.699 264.036 244.919 264.036 243.963 cv
264.036 243.003 263.26 242.223 262.3 242.223 cv
261.338 242.223 260.563 243.003 260.563 243.963 cv
cp
f
266.867 237.655 mo
266.867 238.615 267.645 239.393 268.605 239.393 cv
269.564 239.393 270.344 238.615 270.344 237.655 cv
270.344 236.696 269.564 235.919 268.605 235.919 cv
267.645 235.919 266.867 236.696 266.867 237.655 cv
cp
f
273.174 231.352 mo
273.174 232.312 273.951 233.089 274.91 233.089 cv
275.87 233.089 276.648 232.312 276.648 231.352 cv
276.648 230.393 275.87 229.612 274.91 229.612 cv
273.951 229.612 273.174 230.393 273.174 231.352 cv
cp
f
214.706 293.293 mo
214.706 292.337 213.93 291.557 212.969 291.557 cv
212.011 291.557 211.234 292.337 211.234 293.293 cv
211.234 294.253 212.011 295.033 212.969 295.033 cv
213.93 295.033 214.706 294.253 214.706 293.293 cv
cp
f
208.365 299.636 mo
208.365 298.679 207.59 297.898 206.628 297.898 cv
205.669 297.898 204.892 298.679 204.892 299.636 cv
204.892 300.595 205.669 301.372 206.628 301.372 cv
207.59 301.372 208.365 300.595 208.365 299.636 cv
cp
f
202.061 305.942 mo
202.061 304.983 201.284 304.206 200.323 304.206 cv
199.363 304.206 198.584 304.983 198.584 305.942 cv
198.584 306.902 199.363 307.679 200.323 307.679 cv
201.284 307.679 202.061 306.902 202.061 305.942 cv
cp
f
195.751 312.246 mo
195.751 311.29 194.974 310.51 194.016 310.51 cv
193.058 310.51 192.277 311.29 192.277 312.246 cv
192.277 313.206 193.058 313.983 194.016 313.983 cv
194.974 313.983 195.751 313.206 195.751 312.246 cv
cp
f
189.445 318.554 mo
189.445 317.594 188.669 316.816 187.71 316.816 cv
186.75 316.816 185.972 317.594 185.972 318.554 cv
185.972 319.513 186.75 320.29 187.71 320.29 cv
188.669 320.29 189.445 319.513 189.445 318.554 cv
cp
f
183.14 324.86 mo
183.14 323.901 182.362 323.124 181.404 323.124 cv
180.445 323.124 179.666 323.901 179.666 324.86 cv
179.666 325.819 180.445 326.594 181.404 326.594 cv
182.362 326.594 183.14 325.819 183.14 324.86 cv
cp
f
176.834 331.167 mo
176.834 330.208 176.057 329.428 175.099 329.428 cv
174.139 329.428 173.36 330.208 173.36 331.167 cv
173.36 332.127 174.139 332.904 175.099 332.904 cv
176.057 332.904 176.834 332.127 176.834 331.167 cv
cp
f
235.301 293.293 mo
235.301 292.337 236.078 291.557 237.039 291.557 cv
237.996 291.557 238.775 292.337 238.775 293.293 cv
238.775 294.253 237.996 295.033 237.039 295.033 cv
236.078 295.033 235.301 294.253 235.301 293.293 cv
cp
f
241.643 299.636 mo
241.643 298.679 242.42 297.898 243.378 297.898 cv
244.338 297.898 245.116 298.679 245.116 299.636 cv
245.116 300.595 244.338 301.372 243.378 301.372 cv
242.42 301.372 241.643 300.595 241.643 299.636 cv
cp
f
247.948 305.942 mo
247.948 304.983 248.726 304.206 249.686 304.206 cv
250.643 304.206 251.422 304.983 251.422 305.942 cv
251.422 306.902 250.643 307.679 249.686 307.679 cv
248.726 307.679 247.948 306.902 247.948 305.942 cv
cp
f
254.256 312.246 mo
254.256 311.29 255.031 310.51 255.994 310.51 cv
256.951 310.51 257.73 311.29 257.73 312.246 cv
257.73 313.206 256.951 313.983 255.994 313.983 cv
255.031 313.983 254.256 313.206 254.256 312.246 cv
cp
f
260.563 318.554 mo
260.563 317.594 261.338 316.816 262.3 316.816 cv
263.26 316.816 264.036 317.594 264.036 318.554 cv
264.036 319.513 263.26 320.29 262.3 320.29 cv
261.338 320.29 260.563 319.513 260.563 318.554 cv
cp
f
266.867 324.86 mo
266.867 323.901 267.645 323.124 268.605 323.124 cv
269.564 323.124 270.344 323.901 270.344 324.86 cv
270.344 325.819 269.564 326.594 268.605 326.594 cv
267.645 326.594 266.867 325.819 266.867 324.86 cv
cp
f
273.174 331.167 mo
273.174 330.208 273.951 329.428 274.91 329.428 cv
275.87 329.428 276.648 330.208 276.648 331.167 cv
276.648 332.127 275.87 332.904 274.91 332.904 cv
273.951 332.904 273.174 332.127 273.174 331.167 cv
cp
f
170.495 225.013 mo
170.495 225.973 169.719 226.749 168.76 226.749 cv
168.76 225.013 li
170.495 225.013 li
cp
f
281.25 225.013 mo
281.25 226.749 li
280.291 226.749 279.514 225.973 279.514 225.013 cv
281.25 225.013 li
cp
f
281.25 335.764 mo
281.25 337.5 li
279.514 337.5 li
279.514 336.54 280.291 335.764 281.25 335.764 cv
cp
f
170.495 337.5 mo
168.76 337.5 li
168.76 335.764 li
169.719 335.764 170.495 336.54 170.495 337.5 cv
cp
f
10.6396 281.261 mo
.00976563 291.896 li
-.82373 292.724 li
-45.5962 337.497 li
-43.9521 337.497 li
.00976563 293.536 li
.820313 292.724 li
11.4756 282.073 li
10.6396 281.261 li
cp
10.6396 281.261 mo
.00976563 291.896 li
-.82373 292.724 li
-45.5962 337.497 li
-43.9521 337.497 li
.00976563 293.536 li
.820313 292.724 li
11.4756 282.073 li
10.6396 281.261 li
cp
43.9956 225 mo
.00976563 268.986 li
-.80127 269.799 li
-11.4551 280.449 li
-12.2881 281.261 li
-56.25 325.222 li
-56.25 326.865 li
-11.4551 282.073 li
-10.644 281.261 li
.00976563 270.607 li
.820313 269.799 li
45.6138 225 li
43.9956 225 li
cp
11.4756 280.449 mo
10.6396 281.261 li
.00976563 291.896 li
-.82373 292.724 li
-45.5962 337.497 li
-43.9521 337.497 li
.00976563 293.536 li
.820313 292.724 li
11.4756 282.073 li
12.2866 281.261 li
56.2466 237.301 li
56.2466 235.657 li
11.4756 280.449 li
cp
10.6396 281.261 mo
.00976563 291.896 li
-.82373 292.724 li
-45.5962 337.497 li
-43.9521 337.497 li
.00976563 293.536 li
.820313 292.724 li
11.4756 282.073 li
10.6396 281.261 li
cp
f
12.2866 281.261 mo
11.4756 280.449 li
.820313 269.799 li
.00976563 268.986 li
-43.9746 225 li
-45.5962 225 li
-.80127 269.799 li
.00976563 270.607 li
10.6396 281.261 li
11.4756 282.073 li
56.2466 326.865 li
56.2466 325.222 li
12.2866 281.261 li
cp
.820313 292.724 mo
.00976563 291.896 li
-10.644 281.261 li
-11.4551 280.449 li
-56.25 235.657 li
-56.25 237.301 li
-12.2881 281.261 li
-11.4551 282.073 li
-.82373 292.724 li
.00976563 293.536 li
43.9697 337.497 li
45.6138 337.497 li
.820313 292.724 li
cp
f
3.45117 281.261 mo
3.45117 283.161 1.90771 284.702 .00488281 284.702 cv
-1.89648 284.702 -3.44141 283.161 -3.44141 281.261 cv
-3.44141 279.355 -1.89648 277.811 .00488281 277.811 cv
1.90771 277.811 3.45117 279.355 3.45117 281.261 cv
cp
f
10.3003 269.223 mo
10.3003 270.183 11.0776 270.96 12.0386 270.96 cv
12.9966 270.96 13.7754 270.183 13.7754 269.223 cv
13.7754 268.264 12.9966 267.486 12.0386 267.486 cv
11.0776 267.486 10.3003 268.264 10.3003 269.223 cv
cp
f
16.6426 262.881 mo
16.6426 263.84 17.4199 264.617 18.3779 264.617 cv
19.3374 264.617 20.1162 263.84 20.1162 262.881 cv
20.1162 261.921 19.3374 261.144 18.3779 261.144 cv
17.4199 261.144 16.6426 261.921 16.6426 262.881 cv
cp
f
22.9482 256.573 mo
22.9482 257.533 23.7256 258.313 24.6851 258.313 cv
25.6431 258.313 26.4219 257.533 26.4219 256.573 cv
26.4219 255.617 25.6431 254.84 24.6851 254.84 cv
23.7256 254.84 22.9482 255.617 22.9482 256.573 cv
cp
f
29.2559 250.267 mo
29.2559 251.226 30.0313 252.007 30.9941 252.007 cv
31.9517 252.007 32.7305 251.226 32.7305 250.267 cv
32.7305 249.311 31.9517 248.533 30.9941 248.533 cv
30.0313 248.533 29.2559 249.311 29.2559 250.267 cv
cp
f
35.563 243.963 mo
35.563 244.919 36.3384 245.699 37.2998 245.699 cv
38.2593 245.699 39.0361 244.919 39.0361 243.963 cv
39.0361 243.003 38.2593 242.223 37.2998 242.223 cv
36.3384 242.223 35.563 243.003 35.563 243.963 cv
cp
f
41.8667 237.655 mo
41.8667 238.615 42.644 239.393 43.605 239.393 cv
44.5645 239.393 45.3438 238.615 45.3438 237.655 cv
45.3438 236.696 44.5645 235.919 43.605 235.919 cv
42.644 235.919 41.8667 236.696 41.8667 237.655 cv
cp
f
48.1743 231.352 mo
48.1743 232.312 48.9512 233.089 49.9106 233.089 cv
50.8701 233.089 51.6489 232.312 51.6489 231.352 cv
51.6489 230.393 50.8701 229.612 49.9106 229.612 cv
48.9512 229.612 48.1743 230.393 48.1743 231.352 cv
cp
f
10.3003 293.293 mo
10.3003 292.337 11.0776 291.557 12.0386 291.557 cv
12.9966 291.557 13.7754 292.337 13.7754 293.293 cv
13.7754 294.253 12.9966 295.033 12.0386 295.033 cv
11.0776 295.033 10.3003 294.253 10.3003 293.293 cv
cp
f
16.6426 299.636 mo
16.6426 298.679 17.4199 297.898 18.3779 297.898 cv
19.3374 297.898 20.1162 298.679 20.1162 299.636 cv
20.1162 300.595 19.3374 301.372 18.3779 301.372 cv
17.4199 301.372 16.6426 300.595 16.6426 299.636 cv
cp
f
22.9482 305.942 mo
22.9482 304.983 23.7256 304.206 24.6851 304.206 cv
25.6431 304.206 26.4219 304.983 26.4219 305.942 cv
26.4219 306.902 25.6431 307.679 24.6851 307.679 cv
23.7256 307.679 22.9482 306.902 22.9482 305.942 cv
cp
f
29.2559 312.246 mo
29.2559 311.29 30.0313 310.51 30.9941 310.51 cv
31.9517 310.51 32.7305 311.29 32.7305 312.246 cv
32.7305 313.206 31.9517 313.983 30.9941 313.983 cv
30.0313 313.983 29.2559 313.206 29.2559 312.246 cv
cp
f
35.563 318.554 mo
35.563 317.594 36.3384 316.816 37.2998 316.816 cv
38.2593 316.816 39.0361 317.594 39.0361 318.554 cv
39.0361 319.513 38.2593 320.29 37.2998 320.29 cv
36.3384 320.29 35.563 319.513 35.563 318.554 cv
cp
f
41.8667 324.86 mo
41.8667 323.901 42.644 323.124 43.605 323.124 cv
44.5645 323.124 45.3438 323.901 45.3438 324.86 cv
45.3438 325.819 44.5645 326.594 43.605 326.594 cv
42.644 326.594 41.8667 325.819 41.8667 324.86 cv
cp
f
48.1743 331.167 mo
48.1743 330.208 48.9512 329.428 49.9106 329.428 cv
50.8701 329.428 51.6489 330.208 51.6489 331.167 cv
51.6489 332.127 50.8701 332.904 49.9106 332.904 cv
48.9512 332.904 48.1743 332.127 48.1743 331.167 cv
cp
f
56.25 225.013 mo
56.25 226.749 li
55.2905 226.749 54.5132 225.973 54.5132 225.013 cv
56.25 225.013 li
cp
f
56.25 335.764 mo
56.25 337.5 li
54.5132 337.5 li
54.5132 336.54 55.2905 335.764 56.25 335.764 cv
cp
f
460.64 281.261 mo
450.01 291.896 li
449.176 292.724 li
404.404 337.497 li
406.048 337.497 li
450.01 293.536 li
450.82 292.724 li
461.476 282.073 li
460.64 281.261 li
cp
460.64 281.261 mo
450.01 291.896 li
449.176 292.724 li
404.404 337.497 li
406.048 337.497 li
450.01 293.536 li
450.82 292.724 li
461.476 282.073 li
460.64 281.261 li
cp
493.996 225 mo
450.01 268.986 li
449.199 269.799 li
438.545 280.449 li
437.712 281.261 li
393.75 325.222 li
393.75 326.865 li
438.545 282.073 li
439.355 281.261 li
450.01 270.607 li
450.82 269.799 li
495.613 225 li
493.996 225 li
cp
461.476 280.449 mo
460.64 281.261 li
450.01 291.896 li
449.176 292.724 li
404.404 337.497 li
406.048 337.497 li
450.01 293.536 li
450.82 292.724 li
461.476 282.073 li
462.287 281.261 li
506.246 237.301 li
506.246 235.657 li
461.476 280.449 li
cp
460.64 281.261 mo
450.01 291.896 li
449.176 292.724 li
404.404 337.497 li
406.048 337.497 li
450.01 293.536 li
450.82 292.724 li
461.476 282.073 li
460.64 281.261 li
cp
f
462.287 281.261 mo
461.476 280.449 li
450.82 269.799 li
450.01 268.986 li
406.025 225 li
404.404 225 li
449.199 269.799 li
450.01 270.607 li
460.64 281.261 li
461.476 282.073 li
506.246 326.865 li
506.246 325.222 li
462.287 281.261 li
cp
450.82 292.724 mo
450.01 291.896 li
439.355 281.261 li
438.545 280.449 li
393.75 235.657 li
393.75 237.301 li
437.712 281.261 li
438.545 282.073 li
449.176 292.724 li
450.01 293.536 li
493.97 337.497 li
495.613 337.497 li
450.82 292.724 li
cp
f
453.451 281.261 mo
453.451 283.161 451.908 284.702 450.005 284.702 cv
448.104 284.702 446.559 283.161 446.559 281.261 cv
446.559 279.355 448.104 277.811 450.005 277.811 cv
451.908 277.811 453.451 279.355 453.451 281.261 cv
cp
f
439.706 269.223 mo
439.706 270.183 438.93 270.96 437.969 270.96 cv
437.012 270.96 436.234 270.183 436.234 269.223 cv
436.234 268.264 437.012 267.486 437.969 267.486 cv
438.93 267.486 439.706 268.264 439.706 269.223 cv
cp
f
433.365 262.881 mo
433.365 263.84 432.59 264.617 431.629 264.617 cv
430.669 264.617 429.892 263.84 429.892 262.881 cv
429.892 261.921 430.669 261.144 431.629 261.144 cv
432.59 261.144 433.365 261.921 433.365 262.881 cv
cp
f
427.061 256.573 mo
427.061 257.533 426.284 258.313 425.322 258.313 cv
424.363 258.313 423.584 257.533 423.584 256.573 cv
423.584 255.617 424.363 254.84 425.322 254.84 cv
426.284 254.84 427.061 255.617 427.061 256.573 cv
cp
f
420.751 250.267 mo
420.751 251.226 419.974 252.007 419.016 252.007 cv
418.058 252.007 417.277 251.226 417.277 250.267 cv
417.277 249.311 418.058 248.533 419.016 248.533 cv
419.974 248.533 420.751 249.311 420.751 250.267 cv
cp
f
414.445 243.963 mo
414.445 244.919 413.67 245.699 412.71 245.699 cv
411.75 245.699 410.972 244.919 410.972 243.963 cv
410.972 243.003 411.75 242.223 412.71 242.223 cv
413.67 242.223 414.445 243.003 414.445 243.963 cv
cp
f
408.14 237.655 mo
408.14 238.615 407.362 239.393 406.404 239.393 cv
405.445 239.393 404.666 238.615 404.666 237.655 cv
404.666 236.696 405.445 235.919 406.404 235.919 cv
407.362 235.919 408.14 236.696 408.14 237.655 cv
cp
f
401.834 231.352 mo
401.834 232.312 401.057 233.089 400.099 233.089 cv
399.139 233.089 398.36 232.312 398.36 231.352 cv
398.36 230.393 399.139 229.612 400.099 229.612 cv
401.057 229.612 401.834 230.393 401.834 231.352 cv
cp
f
439.706 293.293 mo
439.706 292.337 438.93 291.557 437.969 291.557 cv
437.012 291.557 436.234 292.337 436.234 293.293 cv
436.234 294.253 437.012 295.033 437.969 295.033 cv
438.93 295.033 439.706 294.253 439.706 293.293 cv
cp
f
433.365 299.636 mo
433.365 298.679 432.59 297.898 431.629 297.898 cv
430.669 297.898 429.892 298.679 429.892 299.636 cv
429.892 300.595 430.669 301.372 431.629 301.372 cv
432.59 301.372 433.365 300.595 433.365 299.636 cv
cp
f
427.061 305.942 mo
427.061 304.983 426.284 304.206 425.322 304.206 cv
424.363 304.206 423.584 304.983 423.584 305.942 cv
423.584 306.902 424.363 307.679 425.322 307.679 cv
426.284 307.679 427.061 306.902 427.061 305.942 cv
cp
f
420.751 312.246 mo
420.751 311.29 419.974 310.51 419.016 310.51 cv
418.058 310.51 417.277 311.29 417.277 312.246 cv
417.277 313.206 418.058 313.983 419.016 313.983 cv
419.974 313.983 420.751 313.206 420.751 312.246 cv
cp
f
414.445 318.554 mo
414.445 317.594 413.67 316.816 412.71 316.816 cv
411.75 316.816 410.972 317.594 410.972 318.554 cv
410.972 319.513 411.75 320.29 412.71 320.29 cv
413.67 320.29 414.445 319.513 414.445 318.554 cv
cp
f
408.14 324.86 mo
408.14 323.901 407.362 323.124 406.404 323.124 cv
405.445 323.124 404.666 323.901 404.666 324.86 cv
404.666 325.819 405.445 326.594 406.404 326.594 cv
407.362 326.594 408.14 325.819 408.14 324.86 cv
cp
f
401.834 331.167 mo
401.834 330.208 401.057 329.428 400.099 329.428 cv
399.139 329.428 398.36 330.208 398.36 331.167 cv
398.36 332.127 399.139 332.904 400.099 332.904 cv
401.057 332.904 401.834 332.127 401.834 331.167 cv
cp
f
395.494 225.013 mo
395.494 225.973 394.719 226.749 393.76 226.749 cv
393.76 225.013 li
395.494 225.013 li
cp
f
395.494 337.5 mo
393.76 337.5 li
393.76 335.764 li
394.719 335.764 395.494 336.54 395.494 337.5 cv
cp
f
348.14 168.761 mo
337.51 179.396 li
336.676 180.224 li
291.904 224.997 li
293.548 224.997 li
337.51 181.036 li
338.32 180.224 li
348.976 169.573 li
348.14 168.761 li
cp
348.14 168.761 mo
337.51 179.396 li
336.676 180.224 li
291.904 224.997 li
293.548 224.997 li
337.51 181.036 li
338.32 180.224 li
348.976 169.573 li
348.14 168.761 li
cp
381.496 112.5 mo
337.51 156.486 li
336.699 157.299 li
326.045 167.949 li
325.212 168.761 li
281.25 212.722 li
281.25 214.365 li
326.045 169.573 li
326.855 168.761 li
337.51 158.107 li
338.32 157.299 li
383.113 112.5 li
381.496 112.5 li
cp
348.976 167.949 mo
348.14 168.761 li
337.51 179.396 li
336.676 180.224 li
291.904 224.997 li
293.548 224.997 li
337.51 181.036 li
338.32 180.224 li
348.976 169.573 li
349.787 168.761 li
393.746 124.801 li
393.746 123.157 li
348.976 167.949 li
cp
348.14 168.761 mo
337.51 179.396 li
336.676 180.224 li
291.904 224.997 li
293.548 224.997 li
337.51 181.036 li
338.32 180.224 li
348.976 169.573 li
348.14 168.761 li
cp
f
349.787 168.761 mo
348.976 167.949 li
338.32 157.299 li
337.51 156.486 li
293.525 112.5 li
291.904 112.5 li
336.699 157.299 li
337.51 158.107 li
348.14 168.761 li
348.976 169.573 li
393.746 214.365 li
393.746 212.722 li
349.787 168.761 li
cp
338.32 180.224 mo
337.51 179.396 li
326.855 168.761 li
326.045 167.949 li
281.25 123.157 li
281.25 124.801 li
325.212 168.761 li
326.045 169.573 li
336.676 180.224 li
337.51 181.036 li
381.47 224.997 li
383.113 224.997 li
338.32 180.224 li
cp
f
340.951 168.761 mo
340.951 170.661 339.408 172.202 337.505 172.202 cv
335.604 172.202 334.059 170.661 334.059 168.761 cv
334.059 166.855 335.604 165.311 337.505 165.311 cv
339.408 165.311 340.951 166.855 340.951 168.761 cv
cp
f
327.206 156.723 mo
327.206 157.683 326.43 158.46 325.469 158.46 cv
324.512 158.46 323.734 157.683 323.734 156.723 cv
323.734 155.764 324.512 154.986 325.469 154.986 cv
326.43 154.986 327.206 155.764 327.206 156.723 cv
cp
f
320.865 150.381 mo
320.865 151.34 320.09 152.117 319.129 152.117 cv
318.169 152.117 317.392 151.34 317.392 150.381 cv
317.392 149.421 318.169 148.644 319.129 148.644 cv
320.09 148.644 320.865 149.421 320.865 150.381 cv
cp
f
314.561 144.073 mo
314.561 145.033 313.784 145.813 312.822 145.813 cv
311.863 145.813 311.084 145.033 311.084 144.073 cv
311.084 143.117 311.863 142.34 312.822 142.34 cv
313.784 142.34 314.561 143.117 314.561 144.073 cv
cp
f
308.251 137.767 mo
308.251 138.726 307.474 139.507 306.516 139.507 cv
305.558 139.507 304.777 138.726 304.777 137.767 cv
304.777 136.811 305.558 136.033 306.516 136.033 cv
307.474 136.033 308.251 136.811 308.251 137.767 cv
cp
f
301.945 131.463 mo
301.945 132.419 301.17 133.199 300.21 133.199 cv
299.25 133.199 298.472 132.419 298.472 131.463 cv
298.472 130.503 299.25 129.723 300.21 129.723 cv
301.17 129.723 301.945 130.503 301.945 131.463 cv
cp
f
295.64 125.155 mo
295.64 126.115 294.862 126.893 293.904 126.893 cv
292.945 126.893 292.166 126.115 292.166 125.155 cv
292.166 124.196 292.945 123.419 293.904 123.419 cv
294.862 123.419 295.64 124.196 295.64 125.155 cv
cp
f
289.334 118.852 mo
289.334 119.812 288.557 120.589 287.599 120.589 cv
286.639 120.589 285.86 119.812 285.86 118.852 cv
285.86 117.893 286.639 117.112 287.599 117.112 cv
288.557 117.112 289.334 117.893 289.334 118.852 cv
cp
f
347.801 156.723 mo
347.801 157.683 348.578 158.46 349.539 158.46 cv
350.496 158.46 351.275 157.683 351.275 156.723 cv
351.275 155.764 350.496 154.986 349.539 154.986 cv
348.578 154.986 347.801 155.764 347.801 156.723 cv
cp
f
354.143 150.381 mo
354.143 151.34 354.92 152.117 355.878 152.117 cv
356.838 152.117 357.616 151.34 357.616 150.381 cv
357.616 149.421 356.838 148.644 355.878 148.644 cv
354.92 148.644 354.143 149.421 354.143 150.381 cv
cp
f
360.448 144.073 mo
360.448 145.033 361.226 145.813 362.186 145.813 cv
363.143 145.813 363.922 145.033 363.922 144.073 cv
363.922 143.117 363.143 142.34 362.186 142.34 cv
361.226 142.34 360.448 143.117 360.448 144.073 cv
cp
f
366.756 137.767 mo
366.756 138.726 367.531 139.507 368.494 139.507 cv
369.451 139.507 370.23 138.726 370.23 137.767 cv
370.23 136.811 369.451 136.033 368.494 136.033 cv
367.531 136.033 366.756 136.811 366.756 137.767 cv
cp
f
373.063 131.463 mo
373.063 132.419 373.838 133.199 374.8 133.199 cv
375.76 133.199 376.536 132.419 376.536 131.463 cv
376.536 130.503 375.76 129.723 374.8 129.723 cv
373.838 129.723 373.063 130.503 373.063 131.463 cv
cp
f
379.367 125.155 mo
379.367 126.115 380.145 126.893 381.105 126.893 cv
382.064 126.893 382.844 126.115 382.844 125.155 cv
382.844 124.196 382.064 123.419 381.105 123.419 cv
380.145 123.419 379.367 124.196 379.367 125.155 cv
cp
f
385.674 118.852 mo
385.674 119.812 386.451 120.589 387.41 120.589 cv
388.37 120.589 389.148 119.812 389.148 118.852 cv
389.148 117.893 388.37 117.112 387.41 117.112 cv
386.451 117.112 385.674 117.893 385.674 118.852 cv
cp
f
327.206 180.793 mo
327.206 179.837 326.43 179.057 325.469 179.057 cv
324.512 179.057 323.734 179.837 323.734 180.793 cv
323.734 181.753 324.512 182.533 325.469 182.533 cv
326.43 182.533 327.206 181.753 327.206 180.793 cv
cp
f
320.865 187.136 mo
320.865 186.179 320.09 185.398 319.129 185.398 cv
318.169 185.398 317.392 186.179 317.392 187.136 cv
317.392 188.095 318.169 188.872 319.129 188.872 cv
320.09 188.872 320.865 188.095 320.865 187.136 cv
cp
f
314.561 193.442 mo
314.561 192.483 313.784 191.706 312.822 191.706 cv
311.863 191.706 311.084 192.483 311.084 193.442 cv
311.084 194.402 311.863 195.179 312.822 195.179 cv
313.784 195.179 314.561 194.402 314.561 193.442 cv
cp
f
308.251 199.746 mo
308.251 198.79 307.474 198.01 306.516 198.01 cv
305.558 198.01 304.777 198.79 304.777 199.746 cv
304.777 200.706 305.558 201.483 306.516 201.483 cv
307.474 201.483 308.251 200.706 308.251 199.746 cv
cp
f
301.945 206.054 mo
301.945 205.094 301.17 204.316 300.21 204.316 cv
299.25 204.316 298.472 205.094 298.472 206.054 cv
298.472 207.013 299.25 207.79 300.21 207.79 cv
301.17 207.79 301.945 207.013 301.945 206.054 cv
cp
f
295.64 212.36 mo
295.64 211.401 294.862 210.624 293.904 210.624 cv
292.945 210.624 292.166 211.401 292.166 212.36 cv
292.166 213.319 292.945 214.094 293.904 214.094 cv
294.862 214.094 295.64 213.319 295.64 212.36 cv
cp
f
289.334 218.667 mo
289.334 217.708 288.557 216.928 287.599 216.928 cv
286.639 216.928 285.86 217.708 285.86 218.667 cv
285.86 219.627 286.639 220.404 287.599 220.404 cv
288.557 220.404 289.334 219.627 289.334 218.667 cv
cp
f
347.801 180.793 mo
347.801 179.837 348.578 179.057 349.539 179.057 cv
350.496 179.057 351.275 179.837 351.275 180.793 cv
351.275 181.753 350.496 182.533 349.539 182.533 cv
348.578 182.533 347.801 181.753 347.801 180.793 cv
cp
f
354.143 187.136 mo
354.143 186.179 354.92 185.398 355.878 185.398 cv
356.838 185.398 357.616 186.179 357.616 187.136 cv
357.616 188.095 356.838 188.872 355.878 188.872 cv
354.92 188.872 354.143 188.095 354.143 187.136 cv
cp
f
360.448 193.442 mo
360.448 192.483 361.226 191.706 362.186 191.706 cv
363.143 191.706 363.922 192.483 363.922 193.442 cv
363.922 194.402 363.143 195.179 362.186 195.179 cv
361.226 195.179 360.448 194.402 360.448 193.442 cv
cp
f
366.756 199.746 mo
366.756 198.79 367.531 198.01 368.494 198.01 cv
369.451 198.01 370.23 198.79 370.23 199.746 cv
370.23 200.706 369.451 201.483 368.494 201.483 cv
367.531 201.483 366.756 200.706 366.756 199.746 cv
cp
f
373.063 206.054 mo
373.063 205.094 373.838 204.316 374.8 204.316 cv
375.76 204.316 376.536 205.094 376.536 206.054 cv
376.536 207.013 375.76 207.79 374.8 207.79 cv
373.838 207.79 373.063 207.013 373.063 206.054 cv
cp
f
379.367 212.36 mo
379.367 211.401 380.145 210.624 381.105 210.624 cv
382.064 210.624 382.844 211.401 382.844 212.36 cv
382.844 213.319 382.064 214.094 381.105 214.094 cv
380.145 214.094 379.367 213.319 379.367 212.36 cv
cp
f
385.674 218.667 mo
385.674 217.708 386.451 216.928 387.41 216.928 cv
388.37 216.928 389.148 217.708 389.148 218.667 cv
389.148 219.627 388.37 220.404 387.41 220.404 cv
386.451 220.404 385.674 219.627 385.674 218.667 cv
cp
f
282.994 112.513 mo
282.994 113.473 282.219 114.249 281.26 114.249 cv
281.26 112.513 li
282.994 112.513 li
cp
f
393.75 112.513 mo
393.75 114.249 li
392.791 114.249 392.014 113.473 392.014 112.513 cv
393.75 112.513 li
cp
f
393.75 223.264 mo
393.75 225 li
392.014 225 li
392.014 224.04 392.791 223.264 393.75 223.264 cv
cp
f
282.994 225 mo
281.26 225 li
281.26 223.264 li
282.219 223.264 282.994 224.04 282.994 225 cv
cp
f
123.14 168.761 mo
112.51 179.396 li
111.676 180.224 li
66.9038 224.997 li
68.5479 224.997 li
112.51 181.036 li
113.32 180.224 li
123.976 169.573 li
123.14 168.761 li
cp
123.14 168.761 mo
112.51 179.396 li
111.676 180.224 li
66.9038 224.997 li
68.5479 224.997 li
112.51 181.036 li
113.32 180.224 li
123.976 169.573 li
123.14 168.761 li
cp
156.496 112.5 mo
112.51 156.486 li
111.699 157.299 li
101.045 167.949 li
100.212 168.761 li
56.25 212.722 li
56.25 214.365 li
101.045 169.573 li
101.856 168.761 li
112.51 158.107 li
113.32 157.299 li
158.114 112.5 li
156.496 112.5 li
cp
123.976 167.949 mo
123.14 168.761 li
112.51 179.396 li
111.676 180.224 li
66.9038 224.997 li
68.5479 224.997 li
112.51 181.036 li
113.32 180.224 li
123.976 169.573 li
124.787 168.761 li
168.747 124.801 li
168.747 123.157 li
123.976 167.949 li
cp
123.14 168.761 mo
112.51 179.396 li
111.676 180.224 li
66.9038 224.997 li
68.5479 224.997 li
112.51 181.036 li
113.32 180.224 li
123.976 169.573 li
123.14 168.761 li
cp
f
124.787 168.761 mo
123.976 167.949 li
113.32 157.299 li
112.51 156.486 li
68.5254 112.5 li
66.9038 112.5 li
111.699 157.299 li
112.51 158.107 li
123.14 168.761 li
123.976 169.573 li
168.747 214.365 li
168.747 212.722 li
124.787 168.761 li
cp
113.32 180.224 mo
112.51 179.396 li
101.856 168.761 li
101.045 167.949 li
56.25 123.157 li
56.25 124.801 li
100.212 168.761 li
101.045 169.573 li
111.676 180.224 li
112.51 181.036 li
156.47 224.997 li
158.114 224.997 li
113.32 180.224 li
cp
f
115.951 168.761 mo
115.951 170.661 114.408 172.202 112.505 172.202 cv
110.604 172.202 109.059 170.661 109.059 168.761 cv
109.059 166.855 110.604 165.311 112.505 165.311 cv
114.408 165.311 115.951 166.855 115.951 168.761 cv
cp
f
102.206 156.723 mo
102.206 157.683 101.43 158.46 100.469 158.46 cv
99.5112 158.46 98.7344 157.683 98.7344 156.723 cv
98.7344 155.764 99.5112 154.986 100.469 154.986 cv
101.43 154.986 102.206 155.764 102.206 156.723 cv
cp
f
95.8652 150.381 mo
95.8652 151.34 95.0898 152.117 94.1284 152.117 cv
93.1689 152.117 92.3916 151.34 92.3916 150.381 cv
92.3916 149.421 93.1689 148.644 94.1284 148.644 cv
95.0898 148.644 95.8652 149.421 95.8652 150.381 cv
cp
f
89.561 144.073 mo
89.561 145.033 88.7842 145.813 87.8228 145.813 cv
86.8633 145.813 86.0845 145.033 86.0845 144.073 cv
86.0845 143.117 86.8633 142.34 87.8228 142.34 cv
88.7842 142.34 89.561 143.117 89.561 144.073 cv
cp
f
83.251 137.767 mo
83.251 138.726 82.4736 139.507 81.5156 139.507 cv
80.5576 139.507 79.7773 138.726 79.7773 137.767 cv
79.7773 136.811 80.5576 136.033 81.5156 136.033 cv
82.4736 136.033 83.251 136.811 83.251 137.767 cv
cp
f
76.9453 131.463 mo
76.9453 132.419 76.1694 133.199 75.21 133.199 cv
74.2505 133.199 73.4717 132.419 73.4717 131.463 cv
73.4717 130.503 74.2505 129.723 75.21 129.723 cv
76.1694 129.723 76.9453 130.503 76.9453 131.463 cv
cp
f
70.6396 125.155 mo
70.6396 126.115 69.8623 126.893 68.9043 126.893 cv
67.9448 126.893 67.166 126.115 67.166 125.155 cv
67.166 124.196 67.9448 123.419 68.9043 123.419 cv
69.8623 123.419 70.6396 124.196 70.6396 125.155 cv
cp
f
64.334 118.852 mo
64.334 119.812 63.5566 120.589 62.5986 120.589 cv
61.6392 120.589 60.8604 119.812 60.8604 118.852 cv
60.8604 117.893 61.6392 117.112 62.5986 117.112 cv
63.5566 117.112 64.334 117.893 64.334 118.852 cv
cp
f
122.8 156.723 mo
122.8 157.683 123.578 158.46 124.539 158.46 cv
125.497 158.46 126.275 157.683 126.275 156.723 cv
126.275 155.764 125.497 154.986 124.539 154.986 cv
123.578 154.986 122.8 155.764 122.8 156.723 cv
cp
f
129.143 150.381 mo
129.143 151.34 129.92 152.117 130.878 152.117 cv
131.837 152.117 132.616 151.34 132.616 150.381 cv
132.616 149.421 131.837 148.644 130.878 148.644 cv
129.92 148.644 129.143 149.421 129.143 150.381 cv
cp
f
135.448 144.073 mo
135.448 145.033 136.226 145.813 137.185 145.813 cv
138.143 145.813 138.922 145.033 138.922 144.073 cv
138.922 143.117 138.143 142.34 137.185 142.34 cv
136.226 142.34 135.448 143.117 135.448 144.073 cv
cp
f
141.756 137.767 mo
141.756 138.726 142.531 139.507 143.494 139.507 cv
144.452 139.507 145.23 138.726 145.23 137.767 cv
145.23 136.811 144.452 136.033 143.494 136.033 cv
142.531 136.033 141.756 136.811 141.756 137.767 cv
cp
f
148.063 131.463 mo
148.063 132.419 148.838 133.199 149.8 133.199 cv
150.759 133.199 151.536 132.419 151.536 131.463 cv
151.536 130.503 150.759 129.723 149.8 129.723 cv
148.838 129.723 148.063 130.503 148.063 131.463 cv
cp
f
154.367 125.155 mo
154.367 126.115 155.144 126.893 156.105 126.893 cv
157.064 126.893 157.844 126.115 157.844 125.155 cv
157.844 124.196 157.064 123.419 156.105 123.419 cv
155.144 123.419 154.367 124.196 154.367 125.155 cv
cp
f
160.674 118.852 mo
160.674 119.812 161.451 120.589 162.411 120.589 cv
163.37 120.589 164.149 119.812 164.149 118.852 cv
164.149 117.893 163.37 117.112 162.411 117.112 cv
161.451 117.112 160.674 117.893 160.674 118.852 cv
cp
f
102.206 180.793 mo
102.206 179.837 101.43 179.057 100.469 179.057 cv
99.5112 179.057 98.7344 179.837 98.7344 180.793 cv
98.7344 181.753 99.5112 182.533 100.469 182.533 cv
101.43 182.533 102.206 181.753 102.206 180.793 cv
cp
f
95.8652 187.136 mo
95.8652 186.179 95.0898 185.398 94.1284 185.398 cv
93.1689 185.398 92.3916 186.179 92.3916 187.136 cv
92.3916 188.095 93.1689 188.872 94.1284 188.872 cv
95.0898 188.872 95.8652 188.095 95.8652 187.136 cv
cp
f
89.561 193.442 mo
89.561 192.483 88.7842 191.706 87.8228 191.706 cv
86.8633 191.706 86.0845 192.483 86.0845 193.442 cv
86.0845 194.402 86.8633 195.179 87.8228 195.179 cv
88.7842 195.179 89.561 194.402 89.561 193.442 cv
cp
f
83.251 199.746 mo
83.251 198.79 82.4736 198.01 81.5156 198.01 cv
80.5576 198.01 79.7773 198.79 79.7773 199.746 cv
79.7773 200.706 80.5576 201.483 81.5156 201.483 cv
82.4736 201.483 83.251 200.706 83.251 199.746 cv
cp
f
76.9453 206.054 mo
76.9453 205.094 76.1694 204.316 75.21 204.316 cv
74.2505 204.316 73.4717 205.094 73.4717 206.054 cv
73.4717 207.013 74.2505 207.79 75.21 207.79 cv
76.1694 207.79 76.9453 207.013 76.9453 206.054 cv
cp
f
70.6396 212.36 mo
70.6396 211.401 69.8623 210.624 68.9043 210.624 cv
67.9448 210.624 67.166 211.401 67.166 212.36 cv
67.166 213.319 67.9448 214.094 68.9043 214.094 cv
69.8623 214.094 70.6396 213.319 70.6396 212.36 cv
cp
f
64.334 218.667 mo
64.334 217.708 63.5566 216.928 62.5986 216.928 cv
61.6392 216.928 60.8604 217.708 60.8604 218.667 cv
60.8604 219.627 61.6392 220.404 62.5986 220.404 cv
63.5566 220.404 64.334 219.627 64.334 218.667 cv
cp
f
122.8 180.793 mo
122.8 179.837 123.578 179.057 124.539 179.057 cv
125.497 179.057 126.275 179.837 126.275 180.793 cv
126.275 181.753 125.497 182.533 124.539 182.533 cv
123.578 182.533 122.8 181.753 122.8 180.793 cv
cp
f
129.143 187.136 mo
129.143 186.179 129.92 185.398 130.878 185.398 cv
131.837 185.398 132.616 186.179 132.616 187.136 cv
132.616 188.095 131.837 188.872 130.878 188.872 cv
129.92 188.872 129.143 188.095 129.143 187.136 cv
cp
f
135.448 193.442 mo
135.448 192.483 136.226 191.706 137.185 191.706 cv
138.143 191.706 138.922 192.483 138.922 193.442 cv
138.922 194.402 138.143 195.179 137.185 195.179 cv
136.226 195.179 135.448 194.402 135.448 193.442 cv
cp
f
141.756 199.746 mo
141.756 198.79 142.531 198.01 143.494 198.01 cv
144.452 198.01 145.23 198.79 145.23 199.746 cv
145.23 200.706 144.452 201.483 143.494 201.483 cv
142.531 201.483 141.756 200.706 141.756 199.746 cv
cp
f
148.063 206.054 mo
148.063 205.094 148.838 204.316 149.8 204.316 cv
150.759 204.316 151.536 205.094 151.536 206.054 cv
151.536 207.013 150.759 207.79 149.8 207.79 cv
148.838 207.79 148.063 207.013 148.063 206.054 cv
cp
f
154.367 212.36 mo
154.367 211.401 155.144 210.624 156.105 210.624 cv
157.064 210.624 157.844 211.401 157.844 212.36 cv
157.844 213.319 157.064 214.094 156.105 214.094 cv
155.144 214.094 154.367 213.319 154.367 212.36 cv
cp
f
160.674 218.667 mo
160.674 217.708 161.451 216.928 162.411 216.928 cv
163.37 216.928 164.149 217.708 164.149 218.667 cv
164.149 219.627 163.37 220.404 162.411 220.404 cv
161.451 220.404 160.674 219.627 160.674 218.667 cv
cp
f
57.9946 112.513 mo
57.9946 113.473 57.2192 114.249 56.2598 114.249 cv
56.2598 112.513 li
57.9946 112.513 li
cp
f
168.75 112.513 mo
168.75 114.249 li
167.791 114.249 167.013 113.473 167.013 112.513 cv
168.75 112.513 li
cp
f
168.75 223.264 mo
168.75 225 li
167.013 225 li
167.013 224.04 167.791 223.264 168.75 223.264 cv
cp
f
57.9946 225 mo
56.2598 225 li
56.2598 223.264 li
57.2192 223.264 57.9946 224.04 57.9946 225 cv
cp
f
235.64 56.2607 mo
225.01 66.8955 li
224.176 67.7236 li
179.404 112.497 li
181.048 112.497 li
225.01 68.5361 li
225.82 67.7236 li
236.476 57.0732 li
235.64 56.2607 li
cp
235.64 56.2607 mo
225.01 66.8955 li
224.176 67.7236 li
179.404 112.497 li
181.048 112.497 li
225.01 68.5361 li
225.82 67.7236 li
236.476 57.0732 li
235.64 56.2607 li
cp
268.996 0 mo
225.01 43.9863 li
224.199 44.7988 li
213.545 55.4492 li
212.712 56.2607 li
168.75 100.222 li
168.75 101.865 li
213.545 57.0732 li
214.356 56.2607 li
225.01 45.6074 li
225.82 44.7988 li
270.613 0 li
268.996 0 li
cp
236.476 55.4492 mo
235.64 56.2607 li
225.01 66.8955 li
224.176 67.7236 li
179.404 112.497 li
181.048 112.497 li
225.01 68.5361 li
225.82 67.7236 li
236.476 57.0732 li
237.287 56.2607 li
281.246 12.3008 li
281.246 10.6572 li
236.476 55.4492 li
cp
235.64 56.2607 mo
225.01 66.8955 li
224.176 67.7236 li
179.404 112.497 li
181.048 112.497 li
225.01 68.5361 li
225.82 67.7236 li
236.476 57.0732 li
235.64 56.2607 li
cp
f
237.287 56.2607 mo
236.476 55.4492 li
225.82 44.7988 li
225.01 43.9863 li
181.025 0 li
179.404 0 li
224.199 44.7988 li
225.01 45.6074 li
235.64 56.2607 li
236.476 57.0732 li
281.246 101.865 li
281.246 100.222 li
237.287 56.2607 li
cp
225.82 67.7236 mo
225.01 66.8955 li
214.356 56.2607 li
213.545 55.4492 li
168.75 10.6572 li
168.75 12.3008 li
212.712 56.2607 li
213.545 57.0732 li
224.176 67.7236 li
225.01 68.5361 li
268.97 112.497 li
270.613 112.497 li
225.82 67.7236 li
cp
f
228.451 56.2607 mo
228.451 58.1611 226.908 59.7021 225.005 59.7021 cv
223.104 59.7021 221.559 58.1611 221.559 56.2607 cv
221.559 54.3555 223.104 52.8105 225.005 52.8105 cv
226.908 52.8105 228.451 54.3555 228.451 56.2607 cv
cp
f
214.706 44.2227 mo
214.706 45.1826 213.93 45.96 212.969 45.96 cv
212.011 45.96 211.234 45.1826 211.234 44.2227 cv
211.234 43.2637 212.011 42.4863 212.969 42.4863 cv
213.93 42.4863 214.706 43.2637 214.706 44.2227 cv
cp
f
208.365 37.8809 mo
208.365 38.8398 207.59 39.6172 206.628 39.6172 cv
205.669 39.6172 204.892 38.8398 204.892 37.8809 cv
204.892 36.9209 205.669 36.1436 206.628 36.1436 cv
207.59 36.1436 208.365 36.9209 208.365 37.8809 cv
cp
f
202.061 31.5732 mo
202.061 32.5332 201.284 33.3135 200.323 33.3135 cv
199.363 33.3135 198.584 32.5332 198.584 31.5732 cv
198.584 30.6172 199.363 29.8398 200.323 29.8398 cv
201.284 29.8398 202.061 30.6172 202.061 31.5732 cv
cp
f
195.751 25.2666 mo
195.751 26.2256 194.974 27.0068 194.016 27.0068 cv
193.058 27.0068 192.277 26.2256 192.277 25.2666 cv
192.277 24.3105 193.058 23.5332 194.016 23.5332 cv
194.974 23.5332 195.751 24.3105 195.751 25.2666 cv
cp
f
189.445 18.9629 mo
189.445 19.9189 188.669 20.6992 187.71 20.6992 cv
186.75 20.6992 185.972 19.9189 185.972 18.9629 cv
185.972 18.0029 186.75 17.2227 187.71 17.2227 cv
188.669 17.2227 189.445 18.0029 189.445 18.9629 cv
cp
f
183.14 12.6553 mo
183.14 13.6152 182.362 14.3926 181.404 14.3926 cv
180.445 14.3926 179.666 13.6152 179.666 12.6553 cv
179.666 11.6963 180.445 10.9189 181.404 10.9189 cv
182.362 10.9189 183.14 11.6963 183.14 12.6553 cv
cp
f
176.834 6.35156 mo
176.834 7.31152 176.057 8.08887 175.099 8.08887 cv
174.139 8.08887 173.36 7.31152 173.36 6.35156 cv
173.36 5.39258 174.139 4.6123 175.099 4.6123 cv
176.057 4.6123 176.834 5.39258 176.834 6.35156 cv
cp
f
235.301 44.2227 mo
235.301 45.1826 236.078 45.96 237.039 45.96 cv
237.996 45.96 238.775 45.1826 238.775 44.2227 cv
238.775 43.2637 237.996 42.4863 237.039 42.4863 cv
236.078 42.4863 235.301 43.2637 235.301 44.2227 cv
cp
f
241.643 37.8809 mo
241.643 38.8398 242.42 39.6172 243.378 39.6172 cv
244.338 39.6172 245.116 38.8398 245.116 37.8809 cv
245.116 36.9209 244.338 36.1436 243.378 36.1436 cv
242.42 36.1436 241.643 36.9209 241.643 37.8809 cv
cp
f
247.948 31.5732 mo
247.948 32.5332 248.726 33.3135 249.686 33.3135 cv
250.643 33.3135 251.422 32.5332 251.422 31.5732 cv
251.422 30.6172 250.643 29.8398 249.686 29.8398 cv
248.726 29.8398 247.948 30.6172 247.948 31.5732 cv
cp
f
254.256 25.2666 mo
254.256 26.2256 255.031 27.0068 255.994 27.0068 cv
256.951 27.0068 257.73 26.2256 257.73 25.2666 cv
257.73 24.3105 256.951 23.5332 255.994 23.5332 cv
255.031 23.5332 254.256 24.3105 254.256 25.2666 cv
cp
f
260.563 18.9629 mo
260.563 19.9189 261.338 20.6992 262.3 20.6992 cv
263.26 20.6992 264.036 19.9189 264.036 18.9629 cv
264.036 18.0029 263.26 17.2227 262.3 17.2227 cv
261.338 17.2227 260.563 18.0029 260.563 18.9629 cv
cp
f
266.867 12.6553 mo
266.867 13.6152 267.645 14.3926 268.605 14.3926 cv
269.564 14.3926 270.344 13.6152 270.344 12.6553 cv
270.344 11.6963 269.564 10.9189 268.605 10.9189 cv
267.645 10.9189 266.867 11.6963 266.867 12.6553 cv
cp
f
273.174 6.35156 mo
273.174 7.31152 273.951 8.08887 274.91 8.08887 cv
275.87 8.08887 276.648 7.31152 276.648 6.35156 cv
276.648 5.39258 275.87 4.6123 274.91 4.6123 cv
273.951 4.6123 273.174 5.39258 273.174 6.35156 cv
cp
f
214.706 68.293 mo
214.706 67.3369 213.93 66.5566 212.969 66.5566 cv
212.011 66.5566 211.234 67.3369 211.234 68.293 cv
211.234 69.2529 212.011 70.0332 212.969 70.0332 cv
213.93 70.0332 214.706 69.2529 214.706 68.293 cv
cp
f
208.365 74.6357 mo
208.365 73.6787 207.59 72.8984 206.628 72.8984 cv
205.669 72.8984 204.892 73.6787 204.892 74.6357 cv
204.892 75.5947 205.669 76.3721 206.628 76.3721 cv
207.59 76.3721 208.365 75.5947 208.365 74.6357 cv
cp
f
202.061 80.9424 mo
202.061 79.9834 201.284 79.2061 200.323 79.2061 cv
199.363 79.2061 198.584 79.9834 198.584 80.9424 cv
198.584 81.9023 199.363 82.6787 200.323 82.6787 cv
201.284 82.6787 202.061 81.9023 202.061 80.9424 cv
cp
f
195.751 87.2461 mo
195.751 86.29 194.974 85.5098 194.016 85.5098 cv
193.058 85.5098 192.277 86.29 192.277 87.2461 cv
192.277 88.2061 193.058 88.9834 194.016 88.9834 cv
194.974 88.9834 195.751 88.2061 195.751 87.2461 cv
cp
f
189.445 93.5537 mo
189.445 92.5938 188.669 91.8164 187.71 91.8164 cv
186.75 91.8164 185.972 92.5938 185.972 93.5537 cv
185.972 94.5127 186.75 95.29 187.71 95.29 cv
188.669 95.29 189.445 94.5127 189.445 93.5537 cv
cp
f
183.14 99.8604 mo
183.14 98.9014 182.362 98.124 181.404 98.124 cv
180.445 98.124 179.666 98.9014 179.666 99.8604 cv
179.666 100.819 180.445 101.594 181.404 101.594 cv
182.362 101.594 183.14 100.819 183.14 99.8604 cv
cp
f
176.834 106.167 mo
176.834 105.208 176.057 104.428 175.099 104.428 cv
174.139 104.428 173.36 105.208 173.36 106.167 cv
173.36 107.127 174.139 107.904 175.099 107.904 cv
176.057 107.904 176.834 107.127 176.834 106.167 cv
cp
f
235.301 68.293 mo
235.301 67.3369 236.078 66.5566 237.039 66.5566 cv
237.996 66.5566 238.775 67.3369 238.775 68.293 cv
238.775 69.2529 237.996 70.0332 237.039 70.0332 cv
236.078 70.0332 235.301 69.2529 235.301 68.293 cv
cp
f
241.643 74.6357 mo
241.643 73.6787 242.42 72.8984 243.378 72.8984 cv
244.338 72.8984 245.116 73.6787 245.116 74.6357 cv
245.116 75.5947 244.338 76.3721 243.378 76.3721 cv
242.42 76.3721 241.643 75.5947 241.643 74.6357 cv
cp
f
247.948 80.9424 mo
247.948 79.9834 248.726 79.2061 249.686 79.2061 cv
250.643 79.2061 251.422 79.9834 251.422 80.9424 cv
251.422 81.9023 250.643 82.6787 249.686 82.6787 cv
248.726 82.6787 247.948 81.9023 247.948 80.9424 cv
cp
f
254.256 87.2461 mo
254.256 86.29 255.031 85.5098 255.994 85.5098 cv
256.951 85.5098 257.73 86.29 257.73 87.2461 cv
257.73 88.2061 256.951 88.9834 255.994 88.9834 cv
255.031 88.9834 254.256 88.2061 254.256 87.2461 cv
cp
f
260.563 93.5537 mo
260.563 92.5938 261.338 91.8164 262.3 91.8164 cv
263.26 91.8164 264.036 92.5938 264.036 93.5537 cv
264.036 94.5127 263.26 95.29 262.3 95.29 cv
261.338 95.29 260.563 94.5127 260.563 93.5537 cv
cp
f
266.867 99.8604 mo
266.867 98.9014 267.645 98.124 268.605 98.124 cv
269.564 98.124 270.344 98.9014 270.344 99.8604 cv
270.344 100.819 269.564 101.594 268.605 101.594 cv
267.645 101.594 266.867 100.819 266.867 99.8604 cv
cp
f
273.174 106.167 mo
273.174 105.208 273.951 104.428 274.91 104.428 cv
275.87 104.428 276.648 105.208 276.648 106.167 cv
276.648 107.127 275.87 107.904 274.91 107.904 cv
273.951 107.904 273.174 107.127 273.174 106.167 cv
cp
f
170.495 .0126953 mo
170.495 .972656 169.719 1.74902 168.76 1.74902 cv
168.76 .0126953 li
170.495 .0126953 li
cp
f
281.25 .0126953 mo
281.25 1.74902 li
280.291 1.74902 279.514 .972656 279.514 .0126953 cv
281.25 .0126953 li
cp
f
281.25 110.764 mo
281.25 112.5 li
279.514 112.5 li
279.514 111.54 280.291 110.764 281.25 110.764 cv
cp
f
170.495 112.5 mo
168.76 112.5 li
168.76 110.764 li
169.719 110.764 170.495 111.54 170.495 112.5 cv
cp
f
235.64 506.261 mo
225.01 516.896 li
224.176 517.724 li
179.404 562.497 li
181.048 562.497 li
225.01 518.536 li
225.82 517.724 li
236.476 507.073 li
235.64 506.261 li
cp
235.64 506.261 mo
225.01 516.896 li
224.176 517.724 li
179.404 562.497 li
181.048 562.497 li
225.01 518.536 li
225.82 517.724 li
236.476 507.073 li
235.64 506.261 li
cp
268.996 450 mo
225.01 493.986 li
224.199 494.799 li
213.545 505.449 li
212.712 506.261 li
168.75 550.222 li
168.75 551.865 li
213.545 507.073 li
214.356 506.261 li
225.01 495.607 li
225.82 494.799 li
270.613 450 li
268.996 450 li
cp
236.476 505.449 mo
235.64 506.261 li
225.01 516.896 li
224.176 517.724 li
179.404 562.497 li
181.048 562.497 li
225.01 518.536 li
225.82 517.724 li
236.476 507.073 li
237.287 506.261 li
281.246 462.301 li
281.246 460.657 li
236.476 505.449 li
cp
235.64 506.261 mo
225.01 516.896 li
224.176 517.724 li
179.404 562.497 li
181.048 562.497 li
225.01 518.536 li
225.82 517.724 li
236.476 507.073 li
235.64 506.261 li
cp
f
237.287 506.261 mo
236.476 505.449 li
225.82 494.799 li
225.01 493.986 li
181.025 450 li
179.404 450 li
224.199 494.799 li
225.01 495.607 li
235.64 506.261 li
236.476 507.073 li
281.246 551.865 li
281.246 550.222 li
237.287 506.261 li
cp
225.82 517.724 mo
225.01 516.896 li
214.356 506.261 li
213.545 505.449 li
168.75 460.657 li
168.75 462.301 li
212.712 506.261 li
213.545 507.073 li
224.176 517.724 li
225.01 518.536 li
268.97 562.497 li
270.613 562.497 li
225.82 517.724 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 16.0.0%%For: (\620\756\754\740\755) ()%%Title: (pattern_261.eps)%%CreationDate: 15.12.15 16:45%%Canvassize: 16383%AI9_DataStream%Gb"-6CI;%BdPh%&!WGG+78Y>5o)VYo";F9j5Wk$88/;cYaW+p4qnr$[hl>tlh6d`S`JdDskLn1p2cfe1<S_dtpUYZoG-sEs1n'u!%ea>Y[-)7j*\4-f)c^:,kIGWb="rASaG3boHe/@]H]Cfhk=R3E,rP;rWm749WH<!%X?YZDJ;6/7G]<p:le^%i>/">tc7^EhHFSkIZ%YiM&YPhChVp$DbM5^*&E`W"h.)^KdXE!Qo'K!EVWB</[+&=*FUED?48ho>[$IlM'()*qtSpT\;_V.Yk6^b;fR2@][M'JL%(9HsrS%#QHJphfA5t.s+ICZ369,$6b%=a6DhQF.[WNPNH9*Y76uWc=d'SZK[43mmXpYO@*Lo9.'RL%Xos/UZ:(,2&'=Gku@08n:$3$hsR1G%5aaa5`h`VOnUJKlbWlKqIhk`Us#O<V0DsQSfd2ERg"E?6'peXN_`<BWXZ4">:AJt`8=Z=NW827>L(S-NA[uB]Zlo@'s!(8Ho1S<`%>`a48PiUM@3O$Doj;K.]6P$aR,U/.IV!,!oo_2hZGuSQIIA&<Zrc#(:J"RX`l3Z_CW"o!_G+(c83Y+ZQR#4u$7b!$mWk9:Q)X.at%./gVGY[?^g6po>mDJOn=Yuh?lpnu`=p/^QNKGn]b$FY:YB>8dY/R5MBke(7XU%bGEKdGW!j?u#T5?($6SYANrO1Ai,5"s32B_Zbc%H.)%1/d+.5Q76qU=hiY:Wpa/g5l;EU^)XBW$g%DF<^MRs_l+6Xg9_@A?83*Kb-1N3g@\3NXkUiM+2GWl6*iX\<iteHpeC]]^HhKi%:NV0eIJCA]WLFnZF65@Y&fg>H7e"m5IWs;rll:4^jslAY;,fT4lGIK]k-%Y955GK`\6k[LZS(Y>CNV$*riOV5CX(`7$]BY_oqR]F%&TZ;ajo:@e%JC&8O3TARl^beb<k$,,<K^O`;0l=0pVn#_e#IP*r=[4Pa]m$)i0P@@PV-1`$5<h^dY#B0/<hD[_$(.t:B`5J%8UDl%N]N/N.U2g,fl/)R?f#*0Fg,4Vm>hILV>Y;@V2A"HUe6]e,fTD>;9'/Xk\PI]!+fr'';TDqF_B]KJ^il7!'a5!l"d\-X*N-sohM"L%]F&\.=#Gil/u)N5g.0t"F3rM7`$@FPrifOD7=.6'_l-jcE_G_X-7j3#R.5lEpAV3(l_dt3UOK?&N%VJ$S:KX3#PQHkhP`GnoDj$g%4nRf-H`+8X7,8]ODG\J=<M4[E90Ze=(D\W0oh@gO[!2!J]K58nbTldnBlW:_qc@"*@6_arX3E]nYI4@jMgebXc2H+/Fl9/$(m9@>%BJbZU7=$rbW7(.d;CUn/buUS]FmsUUoOnn==nNa5fC0%=o\n#aBc+2N998e>^s5M,c!Rm080g6URO>#NF-:Z\D+Xu>bB+7BZ58!L%)oL.pSVWL.p-'2S_2n,gs"Tons(?`&s1*`IGKK5]3,WP&Nlcgn\K9Y)7,m+\\]X&CV:@Z0*L^JbeSL35%&S;PTW+-\Z40>&,61'$%H8N)-,1!b"O<sqhITU*Lh\ii2lbhF`;#usCBn-.L;)[47]fE)%U5aWoI0<JM@)5J^s6Y7"FSCMan3P(fCI#uq!`39n&rD*bT?q]"%p88uA7]c_eJP9-Um5V#Kjop_b]3n/+it_^PfF(1F2c%7rGLWfdc\1%:If8[K=MHq!TLn<)9Xh^iMu#;MmDnrdVjpG=BQh[*WtWri%?(ih]eeo%q)/BSoU&j<dNNN(T2**?A9``]W0MMSs'JTK7^uYDh!iG",%?NmAFgjB@k)a<Tr*:Pg1`j>+&^qFK9bGhg0hi8/'JW<+%@WH>h@Offa#tIYsf(I!UL"\_aW!S!nC@kTWg,lDo\psa@T#ZZcR/kh2h4;S2MnuVpNW*\@?,e'p.o6,u]5uI?S[Z(56au_kD)<(d%CRs#IHSpY?lZet8'NgP<=0X.id[u@Rk3hd0+<"RZ/cWco-;TI*ClXL)Y0_R*Bf`DZiO7)J`N*Bh\o.QBl1l`YmghWd"X7T!ZJVfT%j3QlnU],88*pqKnL&-p&4^F^5eU"m(]KJ=%,d,P[1u@93Y)Z\nr`Zce(tL_O3g7g."fH$fqmHE!YM4mddk@9P3dLN/V?-_cg4E#-%8E2'3AHG1Nde`t_htmAb68)`Eg[#?X$3c'29u&@7M[aVUhVPGu7oFHHR+NGJVF80P([NOk"J8M=\i(^`b=(qL`Md^r_,d\q*1jU6%@=^UI$PP2-ekW;l\!f\\g@G(BN:Cf3fm+/BepL.IJ_9210$n]e1.V;UhXRJ4P<%n3bkCD7S4rs<d@HM=n.O.&id9Su:#2kKIhL_m%>pD;(n7H[87fV't@!\I+h_*_Dj$&<F"7D?eR>Hb0oo3ndKEh9jqBc'IDR[%-O.uXnJ!r:/-o7Q1^X5GEXIFe5a%sUkj5U30<7m@_%pI8:,rrmebenC'N/8[/ue[_:-Id\!H_oD/&PN2I7Q_B7<L47)H-55!bkqY)$L<`4,fD)*$oj'nF`eR/6J)0q6=71Qpc!J$JOZ2HM%iZdYDWTH;A6K^6&(4,lo4T-%Al)MLP4t>J=:&K`#^(1ml@9h!Z\?GL%>=<0PpG0h;H++3bPM(ub_o)W#b4q0b[F8<W'=IP.(9t^m%3*=;`q!Hnk*Il4Pl#('Rr:Y#f=0t90%qOaf0it_T<1AMHX&b;N]n9CohDO":g,19nr7T\4,DuU2f#2HMj5VkX^L@%6Wit:hLX_5=%V9GQDim4lXUq[6:$^pDin%@U@2A[81,d(*8ZtrXB]YLFlf8B*+Hots1(Tm4U\;Br(Nf.0L3Gu9/KeBpCY$gNUh9Pd:eEZ^(HZ[*?%-0ke3qqHJHO2uG`hk<N7M2s5'k`/8\"Wp*RU>#CS`SdoNnKG=1IF0Kns0jH;QXi!9ZJO3_p9@P\9`Fnkg?88\lklr,s,0G?q_-s9%riZ2:hZMM8L:)K89h6Q-rU/kD?5uB]7JrT6f`W@U%(c\)@s9-1ZK$DC?!nVI<*//+f/h0"O\P6[h86q(FAWF^oGYX_1qe>?Y!Ecc%_o/0^9s6if=g52fqFmpb(80s'7e\%&cY-U>M\,P#E"Sg0+!uH[\<[pSY4H+,6tn"B,"2A6>_FNPLP\1GRU1ZW:)>(nUXA<pM!7?a%T<_j!lumRT/j^99_o-F0@r=M)01&@V8l\:&-Ip7WfL:Vm%Cc[@TFV\H:4LhD`:^[];.S5b0*533CY+]aX2q]Bl+$ckEW;I!$.iS;%IpE/ZW:K9#Qr_m&X:c,biQho??(W/#L+k%5,VkPb1"I:8VD2AL/mb3`klN_JTI+)u)R"tG"mUSPJQhMp@-U!_kOg:@.D-PAe'rl9%/l+LNe'rf7/l.\84AEMel11'@T(k%\iQjW%^-8UIYC8S4H5p<e/Yn2Vq#?Nn1;;@=$i+/;OIQ75`D6#sW3t*SrAa_C+)1]A05?K0%48tD.)!g!%pT.KFla2cHUNZB:\q=cb<RL.iU>okKr:f=J7A4$e)chlEFjH4W_)Fh^nr4$hF*6O_K-&HZN:"fr+Q"$F]Nnb(%C6&r%_j#IW9"e(iPtL2%AX#k)rnAj;s"2(En@qWc6g:K'dOrg`0e%RpNHfd9=/3joI;Q=3Mmj@L<P)'\rb!j!:ZUG0W]d!/Y\SD/EnOBk%ao+J.5!6PB)ZL`Jj]A<0ZL+:TSGFMW`5ER=Xkt+i[\I73X11WR?IXnE(1r!taKNV(--sjuTju?f1_]ZKiRrMNJU#Z2aW1!FHH2Lm%:?JJkYh_,$]'j@b-gZ;m'l3Zr<M9Uj:FrCkQJ'P0:+UlA8(dIPEdD1T4gCNK=AJ^Lj\:%R@!Z9B4gCNK=;GiinBB<9QAR[3do4DG%Lp'NdcuXM*3Irp%kpb^/Re:oOU;<dX$kD?)5sisel3Z";8R7o+c/[h]JHlQ0hP?'QA7?bt7?:a^>"'Y*"El,`YI/6QI+:smc,sSl%m@F(c[9DD$a7cUb4?4G!mgF:!mMt,hFS]]2Bc9a8L6JLnUkoU0'jBh(DbOmA!9H&7oJ7MCV3??BFd<"\6qacI1f(\UIl4j?BXlQQ%)GAn8X`NnRlnmAel^9<D#Pt/1r1dAYL*cfs$Wf$r/%,Cm[R\7,?K'nEYY9:Q;3#CTr;A5&Cp*&T6rdWUXa%aq7VZd8UFd,nD&Mu?%3k3T9?ZVq;[i`2@=09!I`DM(B`t^R_L&8:W:Cj,LAbr6E>QKjG0D%,]>te`Ee(DVrFtnt^9OempC$]:I]1D?D(o\(OM`?ea+cL.%%@U_Hfecj_$)Ou1M6SHp8bIMKBMh0>7N4iI#m8%Q>ib!V(J*fJOrO!65.p?Sgj!XX]KT#c*I?S%5)VF,>GcNj[WAW!2.UJkUnMU:[%^Hg6qoi(bihm6,DVt^EbrI<g*r(116VVB`+\p;n8/"=u0>if9MV3RIsb$<b/G'sjRMm$/[8sr!T\>%-DPVV8P.pO[&bhd'9dJ`s?%^4:3OQC/]^=n?kfT]p+6dgq'a2[SLd:2>f<RubukVZ'8j0mA\>#LO*jV&qRP/PHh=f*WqTH+PP-VLPbqN43M)r\o5nJ"_HQapF])%H2(C[>1[-hVDr8KE0+cQZX]9i1b*T37A]n[OW^Pe0E,iIMHgLGPPt2=/=>l#4r!M3Y/31LeFish^ctoZRf..m!e)K&m.G@EDF>aX%r"JSK8AI%pE4JOGVNHCC,iCU2dkh[k3Lf"b&hk3p0T?55Jd+mn!E0u&m2Y,Y@BIW4[@;u(Nr-6\Yh"-VD&0Xj/TQgi!a558mRd@i%hAhqG2NQ.^]aZdj=-7D\H.q/*CTKXi_W.RQLc5+WpJKG>(VgZ_jM/B$SaP@=3NShh+lm#MPO1;57:n!2q"L9$po)NWK8TeZ\;>"p%PWRuS9q67%9Y"(WS[h>I.7L\jCJ13RAPSX)k*5H3QW&Xp!`5OOTap:+^Y:BF2c?Z4B0uD?&X3/js(Ko67HQXbc&+K6PDTC=>S$#C%`c_(cB,WqW%rU0YHUL;K1#_k_$M7^mD\3^tq=G0En*aLmo2,;jLZa*+HF'A$_f:^b22Rrd5H2Ce+_Y@(K>%OEBJc9LF5?.c,,R\*%0Z?^abV[:4'8JKCQt\=;`tU?.jHffV@A`RDl:o2j2s8c>pb/2A&S`6AR42g<Ju0u1RY%CcBUXOMaTG9*N;u[AH84BOBu.HrYc1IR%VnhOhJCD,J[rKj"("g??,&4\4Y9&Wm):NNT-aOURe#7_P%s:U]\=[g19u"4<aaO#B[QJiTE:XqLIWmo_"cejmNHOci<ND`DQ%Z*j%X4<]W+,`QsK7i-D6>tM7AAA.SYsNBR::tiglc-m3e/P>mf>p8c%f<&>F>kN.pTO?`-ME.ZS*5;0Lf83YAunn^nNElA-d%'=s0u*j%p?K%PqfO+U'OY1GogN4US9V@mr3YL[_MY(k?kp&+7,eO>9KZZth%%+B>lZRT1]6rArI%k&%A4G#7D3Z&8&kCj:4Jf9^=;kKa`6j_%fh$,-g[b(5D0>]`r$C)_$dLVW>(5aF9ot/'CYrZp\:%Y+\+mt7c#Ep]^^KmPrL[E*'4%JB3lf`[\alT%Fhs(nF]bLNbB7u1p>Q8=%)L<s$HdR.+GP[dA_u<[1<[V"IY0D+]lPT-)+kOSGrT<UV*>K`,^(t<e3+=qZ-8+3:^AbpJ^f0si?#X2ra#'"4o^dl?Ggl&:KX5=S%-/hQW-ZdcFR-iRLq4M7rp9MOcc?("p5W<VmPtf9@1oX\^Jc/tS\$?(15,hahJPlH>fZL?m'Qs6Zf4<+C0CVH6_<Cp1#$dq&^Gu]K%2r^C_S+JtoPaq;Jn>qR[-Fnlim;'hPd]Pl5j1f,skXG7Zau$A=n2&-H\DTj*28[^Pab]t\pQq&%m3qp5?mV$$Xq3k+])>\H):Bd6%rf(l&DA_3G0E,/>MX9Al&dKtHpEV,P3T(^-2h#g$[Vt(OHjeD!n:/2%(\b'ZeeW/G"g*8_dh@-"Ks>^cbPmL\%D@dWgR"@cM7%B1%_"3H8b+n(Ingbd#T";</A,@AueGJ:)^X;CT:$cgsk&OQc.PQns*OrFJj%g_pRg0*a6&EN]8&$kFe9A+DWc/%sWU,t1dS88gB2`+4%Xh&'"ggt3mWid`]UqeWTp\VADi4&b)qW-l4V-K%;Fe!>A!9(4jj@j[^5]l/2I+`6++J&tP5uhX,rhg@I,o(HH0CNQ0bPN$>?g>Um%fug1+*3OK(lK&Tl\L9Ich<jPo&O`(l+N1>.8[H<aR!INb<uF?p9;Ol.6fQh9bbLMqmb]&]#AD*3-YQfqm-$6Ij>Ab4<G&Gfm^47,%`$fKKkXu-TTD(2Sm*6GZf+1$b.D[*\m@,0piIm6S!E(<NVX+'9k*8Zip+85nLZ&Gg<I/#?dC0nJs+#U3J3Uc!kjO[KP[9V=I5X\,%&AR+nTirBkO6AVTN$]Lo&4]-4DsS>.e6:7=(f?WCNj'1J@JCVHh(t!$s49(I07Z8R-Su5ZDW0BK?-#2Hp*n8l_hF)"s*lh=q92SS%$8k/rG-J<=m?p/(l5R0e`T,VGNf-9bg\CfI`m?MndbO8#bHade*h.^f>((3*IU((L9[6G.,0r/P'-$8kY3AdS?!B/CpB01BBu%Ud%qn]/F$6@Ti$3M^+$DC/J:=R;F=Ok]s)I#4TQVkCI(a?,"RAlqas$joBXQZRq+75h@$]Fi\R'e5ok7euH[G%aDg>G4tCW"lMm,92b%D_M7j(Z-:lhg4J,rcmjO$q]Q4r9K:9$0@ecDU';0[*?i:cJ@jr%f`R%#>=+N3(StuE=bpRA<?T<2'&4ti3WOfe*>N1U2aEoe-_W7%iRRYfW7f"BHcBASK;>.[HdV=?F^fauGj:nXrVpj_0(Kuo%h&'FM(so4MEc8bYEPY5r`.V#1$KEg1j6&d)@X7FX'NhrSK9BnC?Y'D%Sd-TC<#pJ!?0mQarUN%>EYGNrE;]G5n&AFF#(os_IbiUbf<`V;l-XBJCRsA16LREB'D)Zq'Aoc5cUh"Be:WocfqjBhI2[=uQ)aj=%!IZD$A,A%L[\]r%Wquj5aD/225rXh86Z<1:U>t3U^NhRm3(FG"k*^`oT2n#cLSVsKJ',WP]cl'eSb6V7h0usop1nA5I,&O,(FDnU%!)J$N)K+X6b54&tohV;*pcB<2)/N?3oIcWrg>d6agd2R[O.sYVg=f<:Mj%@UQnhgI>SA_rZB8/!dY>`7OG`YZ=5L3?kH<G*T(Jeo%T_VZ_GtTEtir-t9B><=o[8q?NaE(0LY8C[)hOsmM@*s]$Eu83T0N4]q4S=B>(#@`Nfl$drYt,s04Q2%Gl+XaYN$ZqKJ<r+D-2;>>%Lu]V(eZF[.ONtHbV+lU&^TY3Tm:]U;e;!.7Cf@haiI>[am7)J><Q+*'ie1O?g5;U/U6YmeEdE#94dil_CG\qi6G#-89<E\r??_c/%"aa'^d'hZ`)SK`caIH@1n$_kG:t[C"7`0+X[l,'mI96eS792<@ZQslt3pUnRBALt>FOKW<H5@oF%_Adr0Ie*N,!*]a,S!J\=tf0-%#0lk?V7uZMMM!?mrS^V_eo-f<H5X'AmmFaWf;nS,kQKVhCd;^?$a/Sn_7=-B/83_8BN">&Ucsc4gR"CdkIS*KIS,e]?u/`lJ?`fg%"&.#NCm@m>^TQ*JJ(4aMC7NMdr9]#Y(A7]b9)I"#_pWk+3NO5Y[;2OSJ5WEm?!+U+^!]@X\"!q%.MX`jkp%Nd$J=E@dGRu<*)1iq%2ZeCFBe;lOh]<5RTQD"50HJ]oCs08%SWcq<,V&2'HW"i`SE3nSHW4eJ7_MZ7ODP!NmOe_4R.2MQh=('#^W?N4gNZf:(J4J@dXJ[4%[^VTAqW%Ql-;/_JLe=.Rm*4DNkd]A^7'UIM2,VM?&!8$#3&rS'jNUH52$3O8rMuKJEo?D%h;44@C9;r>p>9TFpEile?%]t_>.%f'%<NVis/l2)Ie,1T&EBMX\AuF&THbbrP</N$S>!m!.VQ,Z&X_&U*V@A'9,1C:K>5PA"]\?DH/14<1*l`P/Ap%+`Zk"*Kktf4$j/)%H%q4)r&c](FP]OX2^XtR:q4tCPVa(1*0Y@:W=-+uPqNDFuJZmG$i#mQSQ[s_<*?Po,d\'Vce77Q]9N61/Acg[<,kNLll>jfALjo)5b%I[nTk<%b/ZQ^cqVX\\+UDCQqYM3D]s4_Kb#^Ahq@V8.dgXng'K-I^B=r2S?&c_B4MjC4C/f!]^*05S_9mT/q_8?RoRBRH$;HF8(K%+0;qu_]NYkX#7uIoOO9dl8q*=HHm#30!'VA)"L5#1VQ#u]<M<Z42Y7&E0c-T5D8.4Q1c9FT8'IcSb]$R\V]oZ*7OM-h_O#(-$n#k%0h@nmW7+>W`k><7VegXBXM'2-+L=#ibZDA%0G1^$HDsW:9QjVdj'EMu4mb,6RQ^:m.^>li]3g,0U39q5H4c+s?dUZKiXa/c>5r66%JCFa:&QS@s*0(l4A*&gSC2#Oe;/$;bD)S62;V!nHAdP,0/aglRl'./_s2+'&ZFM])[:J_l_pE=T?]-dM0^O#0AE_!@Y'fS#@i]JU%5d@[2r=ua2I*P_Q$"IkNSnc_8g]MLD=MDA+F7<csk-Gl3T%A_D,?4XXY(d&T4YK!pdR&@ZJ$[9rnt5[H\d-f4nZ^M?4mH=c2Y.H0%QP4&m+ME.J1@tkX/GoZT!9srpH]=EbdU7fBkt,"+r@@1-n@#>pAJipC\)2u[fhj4^HJKSgI[5W!"\k*D/.ZIW5.uglbu'rRPKsP:%gpBZR[k@qW9Ht.<UFK;@'bu>_4f%Yi]%5m"gZ?>>8\,omi#Yrbj1J@gb#3VRknYTX8F4`TR"<f;$m_!RVZqPH.%-q)S\=%#KSda.%P:3]g5`)jX7k0oXJ#Gc(@Ug.>QPqE=LJ'[6XhCQCLJ0&oCoMsIl61VPUVDl(FcX[.fK8q[O&M%\,f=qDXk(Ij#%u3;&TmOoBu0%E%I9>(sK*[su^Gof<gM3_dl24;t.**\q,.$c5N?TK)^+[&fS"8SW8M=F\`n/A4XkkZt=]&,c9mJ=B1idT9[sqX:Cb0"=GcDlNs5G;B%E,b_!C:H0p]QO^<X`?cC70=68>a0?q3118,?BDPGBZ!<hl4e,&Y;*1REK='FbT!ioY9,,R^J[`=<uUrSTj+td<guk+DEJ)_=n[I=%'(Y?pVI)6Oo+FsBVVD5+-;Jr+h'1sb/&PG;:c?"F'DHVo!\:pV\K\So>n\_(kS5XcNRH48;RI%l<rX-C_sEpt-I.t)_:6i&TBJ*<%*mQ:9)tUV".4g`8CJpOW@`T@h6&fR)4R"OnOD!opBfV(>!*rPJ-"L'n/kf=c*&WN=>&W17R$`SDB3Y=T>BtkaV5ST"0\&NQ>e$F7%Qr<<?Yh[h`>.=?f18$PpPA?$EDJm=$fV;6SrVoe.g>#Z7m:@NMfih1o(M[3F-GC9l(BX/+&I":JCM^Ss0(.bmhJ:Yk>d,GLRX/Uc%Olf!!@C*r!<R0hNbYkLm)a=gP\dR6K4)(=PUCK?X(Tk68C4Ot9,'B_]@VOC_E'[AumpU:9XG'rCbTqn]*.>-REg,D),6UnSda\0M%hO#SP5W-A\(mD&I5&;3?.71M=>(:M-XQ^eA1<2;7!f;]69B4I+/L5hP_:7jUs(md57Y/LX)$SHoB&qXhEG&BkZn>\A7%.H^\D+Q-%D8Tn:d?1e"4)^,`cr#M?F1mGsq5B.QiWTuY.!MDLg/)(/3[YNNq/g356ES(GYbQ:m/urR7.0^W5/UnprFG&$\39JTlUP+Ju+Th!?%ZqUutDJ@3lIbq+(:Tp;(nbW/EQ)`_;+8`V3Uc_5H4==FIj6='MhL+U1,'\0K9%_'7X:caO[00Yr-XjJc^L1'8"G7(oS.[YJKn+@s%ho3;4i2jciXaj:iO#lqAe3g$gZ+a2"r)Q\C>,NUK4^=(`SC8!N9!8tNCL$q-NRGi?Ze^KZQN!E/gtOHLQKS#NetQ^mcCajW"':<#%$Fk)mJ'1^1EN:bea:#)44F-A#PULo9LoT8l72'_sE(+@ijTk<\*WOr0rY)\_UAf-X'9ZYD,CC(1HIf8Wcjq\X3fWnE5\`^>MBjup%@=4p"(RaJb6K[2j;3M9]>dc,EX$BsW]k"o'p9hZ0<rb%G]iJ*(`ZE.<(@otTff<gWL9N/,>JbFO2EPOtr'[1%g0CK%4b@iW2r\Kh%3`L@oXIJuENQ1lbpSbGNIUY#jhbOFWH)dCH,j?`U?:Vl!8#oA;c-"nsk%<OPTrSW5b*[=CDVtCL^\mNi]qsH[LG/#+gC(&4rFbNH%`KSTL(E9h)cJ;]?f#iV,hV75ZhX/:I\'LYYEh4n$rH[k^8q0h72qG*4_5ul\[gchDrDl(,B\Z`nqGMdHZM^pc=;ecY*mMp3/8a5.%b=""<X!c6NCoo6MdGA'unWS:,>eYEFWG8L(!UB9W)mbJ%a(N<T\'M,#a+];6G'@^%1HR^iJ)]9*D,d&fmoI32m_,*XXWAE7NcGN>%j+k\S_4+5M<qb.f#No12dk-#T=[(U8]WsLF\*'e&B1En^cPjh[ZSYc'?OsV9e`5!Er70@jli#i5lKN9TeGj2/L?%UUC>I\A^9[\/%hE+RE1jQ>!jlB&Nrjr!?]%P`K[CQos]2RBe\D7a6G[G6FAnJr!F7](t])-)WmF4.$>-?*'GNW%75Q!RWZ?G^(``b3FnDrNHmF.nX%]lo-[2<WSP[n]B:VX^VIpR?B@/iLJWBWSXSTAEf9ci6#*D!g'WNpXTrZLm/+Ssf8;%R.'q3q[jeq8]\)*r51f+#eWJdGWZ[o]r"/%r7RgD8uu*$$k?[tr-OS+c8HT!c*^&!Qs]I8j10l!d;$k^Bo=$[fU?)KgK_JkDZ+#-%U`U$5C'`1phS\=o?.Au:Q*fOmE\buPKk_$%k_]&l2GV@An"'3MKB)T7p$BE%&?FqZA'6PjhgSRR<*R)KEGPP`+)CE9LG)U6-(1/YNrI[QkjS<p)p@bYbO="hMWAO`f>!3[X:Nl/%W:#"BrlLAsLK=*4alBn$GE8)W)W+kNTp\jhL@VcSh7+4k[/**Hi3R<O3VRb7'1EDQgfpi06Q56)1jJ;1+2)Ucb's$<I.d9^bO=c)%g:]SKhU1(:iQgfe\!??geXc!q?M"':pWnaF1UF.-L]'RpQlj#]a7Vf@ra=9%?eO;7IX?:Kf)4Yn=upQISntJK5;6LGT7$>1h*tJt%([QQg^T;6i4a=M7^#+&``^UHFd!_;[@B]T@rol`9]BITT0;u!(m195qm(XBtZ<^+_//ngS&b#V+A5R\]3SS>eRG%7oNS,!2lgiN)%Z17"79e*CFFa9_hg@=+[r+\1gP+J`8aRY1Q'-T3ql02SDUBH#(j7HgH=lo.,8K+othcorg0mEQ$>VVQ=5?dgMHs%3o8IgM7g'sg:%\\#QPCT$%Wg%tVIGsc?s(r1nZXtY4g%Fi`>0WOhPkh>G$CF?%G"+R<LG.6I\[,.YB@-;h$+AqhScdimR*eel<&tVNFf4JVFql^q0%YeiL/X/fGHcLP.3.9X5p+8fV&RWZfXSiO![RPWaP\A-Krg8MS)Xna?j^+RXRl@)%&lGjk0<S(UN(:F`e_'tl"%j"WFeONtn%p$FS%)su0VkFc&45CJ"dMKh.b$L"TVm(TndmOn:,._Ea!pE85R];sfdeu;b'moPS=4nkVWh,CQcXrk<+/sgOUi8s-MHXl0unU"O!^K-Dc%ds%(dZh6U>h;-6ArhifdXgPB,/"5<#TGIKQpP#lbH8aAjDCe".kLeMfEVDbYNsY/!Cp>mXUXAqnj6uI/:6YMh1jO!&T0W"B^!,r]%fD28f_(i%Dp"So73GNuBm!X;e(B5:R^90"O?RnL,Y6V9=Cu&AS5E64(H_Z!Zs%8,V*<STSV-dTB.qX^okG&R2:Ueq:^AkK^gNYIN%Zsp\<CTkX*2-,^'AtpRLHL]s6#_0O;!j^MeQ^K5%PQP[Z.;NqCQZFNi1?1=gl[H>go#/(M"elu6=Dn;i4l(h,^/[Ub3,qaDU7-jo%GWA_r]:(@(2.#BhERq).XV":E`_e23#-:78P=ib_h-\tOZFDUR("IoHdmKq"S??sL3?B+fO8AG3.Eh[!\@i<-hEHYnqGcE@8_).8%=coJhr.YZ3(se9;?HZ6\<:n6u/]ijlTA%I`6u!W>/_7%:Ej241EUln$j>\H?6_r32'`(.bK/I;rE)'bt9F:AWr$>!pInfhSeH4pq%*6#EQ/O&%Fik<d?OrZ+M!Gfdr/C@N;#rs!,c^6\9:e<TJTAorO,F7aTjGE2$73l*TN)Xone!!1r=IuJ`r=cIQ4^6$2'k<"FMW?H(%H);2n,\BCGi(?UAI1u4(^L)/_a6F$Aq0ULHX^c,*FWOtG-Yr`S%;AGoma?oR-"Gd*]l!Q]FU5T&H@#&+V!IcJZ@DALZa"O(g':FR%f]!i>=R!V-H*XjJp!ni:NEZq9Y_sCHd:+5Bqh7,i\Q$mUhVEX-ZI\qo\?]F*qgMU_A^$]aLHF\:)=D[l^EY]?==ablW1hb*L&4Z"%laO3Gs%g>K-.%rtHfa2B>e"r<gAP-%q==D4n'L?.<8$Y<[o`:;oT-e?D6:1iA1dD+*>W!$Xi'7SY8c<iYE/[mrs:sS6#XI9E<"=c%pX!)O\C"PE3iPRZet6a8$9b4%UJMIpm"PBUCbt:pSHsbCLi(&\7e^#pB:/hX4-4<QqrlSuT+u/YGY6nr]-%%\3%4i%cr9e%i1p?0%M7l*LTaTL1!LXVRpWJso-paohIicqPgY&pc5C3?=Q/#J)::dBnKe*L#90DnFcg&\RmiGGIs(M)Mb,5KFDe;3EaW39G4>Zr+ET1)R%eGb=!Z<Z5`k1B70!OBLlMhf'qH0uc][e;6+DdS+-K67O_e."DK</C'licu'!!BaS'Gpf6*qk';,rdVAMd<>39fk^fRok#(o)Kki@%iUC"=O/"D!?ZKI#MqpE!Ub(C:/'P?B?>F*nEh@_<laos%Xd-B)_AK9?5DW^OcC?V^hthS@HgUIO>Dpkd_a?H]T?GU;1>)TkfrKAu%,!3i*16=p-#%(EWXN.gB%nbN7`C@INi&&,<?t=1u@sS%!Z7<iNq""6sm>^ea#cuIC%GQH\XG;!@I1#oKer/';4"EDDr=A;IEC35<%Ah.e+mi<P%Q9W%ZB#eE:]kdCUUSAi>X&j1%)f/%C<6_[JVX"062:'JrQ/#L+pJ9[-Mm(u#V$`NIVb:A/h5qR8iS#V/Hb6c`I+9+:%)WnrHK3O0mq"1Bq0"kLd5O:JhbKUB&Z1Wl&rBFUNhfs,?T``Kg42<cc)]dS%FuM;hn)$1FT%Y^<7pe;-n(u:G>s+\8CVo3MINq!g%X)fV<nU.&,UAs/Pd'9[lgff1O;C_Q<'NWG(/['2]G!M#(N3ckq#9>J+?If[p?@[X`j0e$Bl![P"i=ktsleg;l,o/cAXOoJ@@-<j,%CR`Z$?FD9(U)Da4%CUcd_p5LWnq5U,e+i_"lUJ;0%Ne=)S,3;,qGX0#pADAON#'"6Ss2Yd5X`rT4a%X:YBQadS=]13>&BOK9dk+e%6Z0rgXJk[^gYh]"iKr4nd.if//)OFCbc)WK<9YF)]&&u\(l<2FpRIH?UIQDq8KW[flq`;jj8F;i"?\"1h5fC=EpjbmrFL==>5tmV%F9oV&&hZ/apXea&`h*uY/pmcEhn)/K!cdo,m?Qe2Dsp^cgW`Npm_Sd@jirFKPKN=mr!(fsm'G%;lC$>hF&teH.$#HM2a;.B5\FSn%P/-@q]U.7F@/oYc]oBqaG<]&f@D#WF_4?A3(N]?6aLP0V:S,MHll#"TprChQS\<LB8fcPPG6dI*&%lDd^#<5h%TgEH*8DDA<R"`%%`@&.-iRS2U^/]Bl]TDpQhCW7/e$J/G#dqEFK_Es*j5\,@]f3.1V0c=tW.'!j+KoR;FRK(Nm*b(bV`uh,FR[(q?!l;\-!?,>gcqPn%g>_F^V<7WlmRIpk7b=a.\Jq05[>,:\@CgAtKun#Um/cQ"Y>0cro@/-eD!goL_:+Wd`2=FM>G&]Jrk8c(]^hV=LN-0\)2@lkDe>:F%5]Z"[%/0MFo,_gtJ%f0)D7S@,N[OA?m9A-$]s$8"jr\eP:i'dVdWr.Oc-mi+(KA!5DS6k#3dtU?[MRP&Xt6^K\E=mACjBop^CZEE%9jXgoT,Xu7a5PW?lQ;n\h:-\(htm*@@Gh+UU!c*[IK1UY<#4RJd6IZ\NJBtdh.0^[jKW@\.7e\a=l6FXi@_[#LXkED"5&aT;A$D3%q<a0Lb3+tJ[?Zs3kB@u:S!EKj=X?:(jh\EkKDj'K`c?4C=p$;Fm6=VehaJnC6*Gc/EQN#Kldl">1fp>=4/YMo.bq[I.Eg%@YM/SD%r+F>aJ,0(`l%>EQ)]$Th!J]jrJ9H=P]5hl'5@S1gnQq0Sjk[qnb2V`*B?WAks4[5Hf]]EU7k`"i^K7KgR/Jr0IYm$uf6VNWIJG@J%3cb"74Pq2[T77^eWXk.KesGj_R=,ISpu2*bHi&YheX&4E_"MpE&Nus:Et6b]B,4a[rC>DurB>`pj1*>bE-(OEla,9(>;'(S\%`?P%a5)2)7q"d;2,EZ#g!9JS[H"0n2P1i$TQB%$+BH!S)gC.gCDrLcG$9=fA2XK*,P4A4[XR^cTSd%/R+lGi6ZDiKXqC-'dIJ*,$DVkU%!9GYjrF#&Bi:`MoJQML1>@lPo[/jl(4^2'<d_!b@;7]'_=5sl37:YiVU\EiOZX.Vf?G=70_T^RtM5[+T2QZl44mA#eXj27Km6Jo(%jnh&jFg'fn^"Ruspom]]<fZA6COqUt)4XdH*-b9!al9@H)g9[.]=/,MC-q=,]UYnp.emli_2.hI'uP@/nHP6CX0H"2d!)N@c[4P\%ieLf]kWGP0cT\G;khn/g0'47jq"TH#%dZ6K='P[H*J+po6)KEm$iYbjXr"^.$cgG=ePdN@GkM!KZ.`sc^8:nCehOUM+0?V&bP/LO%+.)2J+"FBrKVoHlnZ^$3luojmeVDo:)q%YG)lZm0rIo!s]3bNTq[?$X<e"UBfR9?72SME5h'/N)FPOTW(L[,!:]!I=*l':.Z.I/U%fhfiq5/ks^p%e!%o.Y]%(+r5Rj;"'@b<&Pl7QI[7R9<Pa]9VL/`dR9-V[M6@hsSjE^TY=W&&6PI1B1nS1";++XHqM8a)c1eImA\X%qGHkXic=D4b![2(X[aG6O^;hBIt+b1$(_T\GkA\R1&#/9@*O)R*\9a<GMCL-h>=kI-f<\>7H0d6ZlUMpb>BQFlCG.2JJR%%DedV7%fBX>Ja.oT*?@'3oWfL6lFYHK]1Ge?F2o@fJ\+_d=<_bp%pI>%>nbVP`kbW8a*:O<bkFDeUaRZCShSU(qQ]hXp?4/4FH@>G+@3o#(%s+(ZRQVoKhN]PRfF4P#L#B)gK"THlXkA-uf)LimHqI=+4NW#^Mo&]EalEE7=%K*Jjg>2FeV9a(rmI];[)qMpqF]d`iT#%"FgoKeM%ginTD\FtA_E<#kYeX%q*;#B"J]t=MKT%`X\o_/kdSXEVO\b<OZid-)*590XToU^G[YRW)F_=rrNNI%[cC4/uQP?a=2F_hVAMOhBN%O&u6DWcWFb)Y/0uheR>#_&Mk!q6HZGRu<7qI=KYE4kNnS/XZF]hLBq1JU&-9l=cb[o(pPWB]JFAd4*q\\4>1bU%<6\To%]kD;^m$%@Q'5g/\H^mIlg`r*1[Mfg6O/WMq+[fOPR04'RKi*l^&1li.kH;f%uAXY<p:d<VG>Hqg.VGZ^#H5d.?tC7*$!2q<L,pU3ahP@P#:^%Z'ZpKf'9s1rT]$tU\aQ!%kh!7_8Atumqrg86FNm6U@Ui\:/:07Xb/F;>-DbWI#c7D-Qd:IX@/9/quN9SoP(;uY58[Tl_F,kZQ&4=%\%2M"rTRNgE#(Xu,ld/Ch>[$u?=C9#r]I[VNVgVimX!^$n#jC9J%t5l2W)_'&l2#mhnZu+C?$A6o::s.$Qjta<Tfpd^h1@Wjl&dB%^H-VtI=GCHqA?I,*.Y)$1Kg>"jhYH2Q_VO+a48M\&%@t$WH&9q_k,=@Y6b$Mg?D4>Tt8o\H^EIW%I;92[l<GUXp-R54!,Pf=oT.T%E)3SE9uN[lqU,;RX&m;/bob>QGi#*D[>^2p$n8'*(tgecadC92HL:%-LR$06><<d2k<<*`%"D;bgc@?8o46O0?^<UZTC7)an)#0P%?_WP470HVK=,Rm7$-YTCH2""a5C'?e>J0pFd+'=!4Ifc.2'7G#bs)=Mg)mEJT0.n'hVRYU$/_n8\eC[J",mX?H]E+Ans@MuBmkeS%r-qMlrO_.@\105#'tE6^pM$ta)U[^Kh1"TqI++F/R2#)lmSl+T(&uq^=$s7WQum7KlSR*]qKY"1AYK#"B)<>"4<:&9Vfi\inh29.%1j/i8%hoXJ=4rkjMjgjhSZp,*1BNe]/\Z12l!O'O7A:C+qWigFrR5EkQ"p8r1d$ainY_);JL$ZYq_[T&#(fICeg]RZhoBPRlL?WL%WA_QLoVG:(W`CITLEY2%TPTHoIrn2W?41ds4/Jn'`*]GTU<Jg)ZVtU^-sMOBgVXY'X7CJ-4/H@%bGe".-@KT5/%',Vm0@[HeTug3%#t_W2U\ZFJG-b,DDrc"CU0^\9N84bCgca5jBb!b1c5F?e<^'$qV*[MbomX5knND=])]Q3$n6L-Xd#@rF5LI=tR[peT8_&ULj-r<@%$`j3[STAXb^COfl2(kueTeVA,Bod22jDSQ"].PpKXk".bDU%BS,G:n?au(GhkR:saAR'"o\hNeA0)1O'3)r?F-Q]Q8YI^9BrNtI!%7odnJnYf(V1A8\5F&!8*%lg\4)R$&8f1YH[Q(tM[:abu]^=!_lk&^]/%dV0mh>WgGbDJttV;CY^eV7;9+&P6k&9@:hXm*$B?8a,,%bJh/Bf!#$3^QTJ;O>&l"`]'Fdpi<.I<mDo<\^p.)kgRl&##&h(\1'X@5Gu'2GXh8=+j(n)Zk@\O(ahI&QhVCf/T$@b7U4nbTC]\X%lqiD'(7bgpNuI_u/>8F5&e>n0CkZB==.G1j12k"Uj*gG+VsOA6:IW^l>E"tjN,nk:93NA-m8"<LU5S.[?:0QslnT6<)I,EQkC(==%p+P;ls)O)9h^@nF?u)Q@j4tU=ON:,!a)GD,/Ff4,5@.^l<LqtTLfacV^7T[e,*h+2ii7p&VNfpl9=ZGa<`9r,qkp4_;5_u]'la-3%AS[nmoo=6T^rrQ?fOphd>OK$#5jF/RMfbYBYr=^1oBCFQ]/Z"n$oLh=o=bat8E(U=dK5`6^IZ&JlXXDF^&o('?c5.5VSHZHPIQ":%5%*^,3fIm6;PcV=WmIA"i5_gs10@RA,b05`Fr"GH`JW:U[,gJqR.4+ri_a6]jG,&1$;-WM_EV:iDB7!G;-N%0h!3)p-eU3:NK^i@%<P[31m3/8?W8'@ce8HX3Q^Q%D.uNLP]bdM,BF^+q0p*M<IQ1i%n0R5kJ'WKqrZJOE>/5!b:!Y5+brDm*?i"2H7f@<fo5:EM?BP4E%Y8(E=/]TXlps799SpA-Zb-#0<(/-Y<>CgWWCDJHC+36?;(mL^8]7_BO$j%.=cj8MVOW@Viat3iA1hLT:_$o8R^]U:jPs#4=@1.`0%r#RgakkcG#jhd,5JIjj2?hd^U2[rC@QCSR*<JRZ!)-Vd^F6mr2d*Gm+Q5pA0cEc/43P]jOlVsqH3LJ*H?C3AE*0gE;;Bd2NQ;P)-%BP*bLH4="/'/iOF=pLgZFb.KKd0#5*2I+i]OlJF0BGr/*Z2^+gp,jSf^Z.[e>9rhM.i+R;'E^\VJpF(OTIi,'..bTT5t0Keb(`VW%(gSN]7"6d)-=Mh0-pTou+j=/(]!9VYhLWnZ*Qj>p&7C?t<Hap0P\?@MgNS@u`_it6#DV1FM/VEVfaasa98W#@kCtgjckarOD)(31%oH`s9`UKu`OYKn93q_(sBehft;c+oUZY1tJ5c_66=9lgCO`KQN\>5f@$3M6Z%tC"%7t$)ZJLR=XAiVPM)J0hm+Rjb5HA3"B!04B^%2&K4=*dk`hfFI1&r!YAtb$!_HUF"?A"FNPi1K:+5,\E'KfM0RDBnDo*"B$+9WJli0P&As5e1K8a1=%5HPU`%u;c!PDAgaS&V"BDd%P[7IHa"0Rp:m`pZZ8:BNG/bf41$X/?AqasRb-]D+ftSoZhh?Z$Q#M/[9!$:aE^H':Q4rU>/ioT+(*0GD/!KG,Ppo47ZAM*)B*D!+%84fAJOtu,7WgqI[Q:om6R>tu9dh1^gXUAkk)[r)C;K%u&g90XV`h]r@7LFt*DfY5`PHn%tXf8,CUhj5.D4HJ;9P?VXL_D%-KPW).%Qr:@nCl=-k9\LFH3$`1/((?%R6NR>l)Jr;g*#)(Z)'8!HLcmJ$Qou@A&5%$R8'#KSG8rEGbD$J@U@rh_,p\$Hb@A!+2-_N%=r5b1%*+r5DQpBHM@*<^bq-[)`Z1NYE3Moc`&3mY]U,Ci',lsnuL_oJQM:?+(*\0W1#_FfGh*r'1eHgp\!:pL^AZuNHR"R0j*_[aB]S5Yr%fJ"/JKj"HYC"oMAK)uK:_bd:_'@9>aUA@fZko-fA\:k.WQ42?#Fp?dAPWir,0"NI6)0ZNZh2F3HY\48mJIXh-<c49.=p)*B;H5Q!%[`Kl"9nQqYNgZ9r"e$?f:JJM%qkbfTd)Q1+Bf6#NbmU<VY/dnX/[&c&&C$,uS7s^-DINZe(1>rh9Je1d?qQ+Y8X:fdjr"CkN27G#%)E$5nB[g9g/BjDGbGcQ>]QqSa-fu#(g.[nMnha_t:K>KjZH/R\ST6<]h6uK%eO*3lOAV-hdWV"V(%(2##f&`K"q<emEHE1&>%r25%rPf.qf[YO!+Xl=/@E.^H\R+2<j.>6;OW->pPi)RpJ]fX`['7TT6c![$RmID-dDNVJl&iBh7ckSE7ET%PH*l#;NYHeMj"O,\)oN+&%\Cb*o2DWaZ*Qc;-L*Ah*i5Y&G@O#_8,QeGT]-E^k1sHD:+oa6K,AWK1B?)O,M9\9Wa[VPK]!3f*nqE9>M*9=B*R#+%!pHq(^n(q?%mu.,Z-J7g-1dP_XZr_n(`@1ipW,sF5Q35:L,Yg@A:#(>f%*$:Wk5dKI^i?;;Yh,9s"441S$[-'g5`::h'USPq+rs^B/fogX*tt,u%:'PT7JSZo3N^]6=41s_]ECUJF(t_8BV]7]8A?.Ck@E8Z_Z@ZouNmG`]e'TH+.6*\t^sR9;1PMR=oc5ra#M9_DSl%N:$d`U8SO][b%oE*IWhX6gb3=M]R#Ync*6$9:pW>irq8,0hs/_;\_++g]S9*McC.LG,_S*bhsi*]\o@)PeOGUFPlTB?e!!gE/EJ6":-*Xu!]%u^ZQ%)K.%/0FZ,g28q8r[a;0El9!3BV%S\7V:,C0731HV.4uqO(bc_>3FZF*;"8DV(]kNcT=,gX-7W=:@Z^nE9`SML!R"0.$*MgcN-_@?%TAkN/-HjT3pB*<FQPdS[jcHs')iYU/E]9ct8P)%KC/C4,CLCR/dJKbOe2CtpP6ncN/hX&&Cs7O@1N-pCdbOfLqfhP]\Bm^OI<,+D%]5_N5J"ID6TMU:m'2c>nhE*;J)H2:)9<9U+<ttI]WSLdN6nfo^M.:9*pHX9]1o:Jt%[>XG:,VYSr!h)lP/bu])SN@km@QK("$3g`%8iN?"@UGa=eW9cH"jj9RKSru->_<,-K#TmnIk):/"[X22]6oB=W>JO."EoC$V""kN>h=sP.u)Q6"`l2a.h/IT85mic'Pp<JS)eiF%^]h?AKGkbr_:T"uK=fYnp1?S"<VtZ1D13$("f?H^lh&ER_2g=YK3PTn0hgtbfAhY7m3c<"TEjC&i<-O-[Kmbk+@A\Qf-tYEbGW,_%Fr!Pu@iB/c.+V<'I'Tc.LmeMtM5X9^R'`T'miJnFf]&tXU'<Kk!*?gJ9=R7)XF_-!=2=<MjIU#bP,TCe/LSVjeF;oXVKN$!Bja'D%5+u^IW=1u-C<MiV6a5;7F)WuD;ns;?.:`kt0$Sl4WP&_IG.\6lL:&B:XrS%XFMOYR>U8^bbJDfgAAMkll.DCq[0"3gj_E^_BfR"L%2WY@g7N%k8*SLVEoFY[?49,XVOMTUF5X=)eqA'Xj<[rnM&l:\=Q'7:eM]-S,C^)qm2O5Hf[_Ym;"LG<AR@'?)\VneQE5[`&E3rOj%T@HB(U'Q6#LD`WeBO_Bl4$aAC(:p#n3&tCgn.'N6=?2XFRljKV0-#@lWWOju7o//#0hNni%IP7p"'Wc&r^L<'J<P.&&U7'q#U(/q%`+%u_^^R[S7mq50"NOfc%DmA$@q8%jK$[s9iGsei?-e%?eG'^b7o;Ab&dsh-OOqZp30%n]?(lFPE*/uDC(/+9!nrSj;KOVZ@gQ89%+<YNRTtl]r/&J_#")Z(_5RbVQb+u%NTCJES'ZVs!$#T5^LV;CNKSu\"34TL&Xd:jYa4`\K>^/-bkh`)(ae<rSc.!k##E.&oRKhe/%)5^ggkM.FEY2V72&E_tl>kg()*;)1AaD(T2ggn?UVCmkMF351QMX$@(05q)"P?Q,Y!Hp7qc7l4WkcjkLlP(ltNV@6!b>As,p_&m*%l=IcdEQRB>,'+G*r1K^nj-g$WC2iUN#gX6m+`*/o!?;t:8"k%I@W5(fKd'-.NZs#:<f)HMa!GsOQ8D3T>Yk0M$D+"H`p=?23F31\%#:P<<4l/)2`Q!!"d:p?q&08prORAGl7`VAK8hXn?NoNNc+p7'TZ`P'\&kXO6>LFX"$PZ(^U)8/;Y^(mY5T69tY*E4i:8UGeTQ=NM%cq+q`X>*%3&bn+QKFXK-gjUP9#N#`O/Am`_iM)LOi#,#"`XK1W68.$E_B4LL>E."7]GP7]\O)E-is.;*a/7LT`=]]Ai+hUL'd8*f%"(aOQ+>Cgu-urSA;@4d>?B!kY4@c*457PoC$<KW%,W`tso#6hcFA?<^+#PNi:+KpIb,WiL'+3Mh#I+](e(,ugbrC7iBOm]EV\5Gn%i>@<75j#Q`fV(S-0p6,mNQbC/#0_'Yon5!$OZ=)T!]0Kn(tL!J@#j!%DhsBY+DE1M^g(O&\/^j`=OT)\B0oa-VUkbWbR^8^K%Si_%oKk&;qT/f-gG$I;Ka/RT@gD5ag84nB.bXr!+9HVKQitW!XmFD)B,\4oZ:"Bi[q^OX9%u\G`jGeW[+Ts_"bi\Mg%#&N,OWTn;Xiq(%7h5q79,K59)"&_P8P<G_Tl!6\_IG?kI*@9oLN[.;_MttnW/oM6Op$"Djb";dL\1_UfQd6_80!N,fTqN\18)3FfS_nrKLlUMK8u!u%2l,;6Z$1p#n1AXWK5EphDI\K_4?M;:as,sUD4lD5b)CR6K5Qh+LGD[2_VjVj\ZlPbc9[f=p*`BQ7-#hj-m8G)KDQhI<`h`u-dE#K%-,FMQ=EN[0j%nmn0n`uhL/%.;:P8b=LkA$])oCIAIc1#C$#j]G'eCkS=ftk6lI<_5O>j7*i*9_Ln.Z1RP6C2DBc3X_)AuV8!Pig*%4SVj*mSLiM[V!=a"Qt[9(L4Hj5F)V6VUNi#a#KrP\1+^MILF;-(X3O*\<X%Yc4=@:Z5o@b,p*bm)JHJ9,j*0,["c]5oW3;Z@ri,8%PHZt0L/%=BEXW7h9-$?%-l*2mBl5&B<6>KYIXk`;;crZ9a;U=Ej8Mf)*i8\B-PK<gp486^lW_SfPXO2mb/^U277YK-R)QodB87<B%;H=7@VU0!jqd:SO":#(4jVkBm17u@i>"N*f1jf`1Wmq;S93MmpMLe^ldag#c$>.-t>ci)X?#2$jQnYY>O*FQ:YEm*6Y&\5$nF6u#%m_E?^fK!o8`<h\a-J20H6IaHCYd_si!n>pXENLTJXj&f"BgVj8rt]Q3f))o&[=k-G7YV'&Qo=h$';:W:H65(Z-V.?pO"6'ZYbGs9%i\Ca61?rab$#^e:F!,QlDZcR"q#$Qb"]ojM:6rEJJY<ESl``F$T2AYkEeOQ^*$1=;d%Mh;E#Z9<Cn9ePKC]8,Os_U"&jQe*im>M)%#,[X%!aE&#(keI-gV_qpatT?<)N'_,n5ct[d9i7[e;XVRJ[IeOTF4J0]C1ZO`1DgjpL3@W*0)kIE3kTpCsqi2N(IF;M$f2u,JXh)%]EhL?$G'g7'Xnq'(g)lh7q`BV0T/3&%BrSm1to1LAKbn):_&7G!(?JM/90>i>oM6ZqZ<pVEn7ITfSK@i6>hFkZCI&%0.3hpo*,ka%&dg;W\V5e5KTr;;XQ@r'/HH)RJ:'8e\/lQf=i6@LPg!_U<_:3J_bed5:ol54nt\1]GWCU8Kb>C:D][85aT?n-a)"FT)+7k"T.,dM%_+>i4b#AWd,f@PIZ>#)F0F8^Tog#F3YVE,>\>Ooc:!cuk)kJ\0*C!FmcS&kqAB5U0=+h'&'fQ7L7[ZobfZ)[8i8+G<J0b;_"sgS>%UVoRl`>_1#.:D_>o-+Z9Rg+FQPQ_2IX[%,TP`_1>&Kf:@8t;!U.e!VSd)WF?W^iNt-j$m`2GAWsVm.#_Xb6*XAKJZrfFn9K6!&&_%-^P^>7H^e?$:gB43*^<;8gLQ6i-bel:)?@<kH:Mg8qAQ*WXelB,7__%nL6F'1CLnuFZGC8'?KAu!D.5^[`!^$Ild]69*rlWNYW+e%6d\n8TL3CPN>il]>Eq`OA3k^i,\4W!=<a#L(2XY_6]"CuQPs_ifOAr\G"Ctf&`B/rGX';Y]uRCPJWsYtq$`s?C*;Jb78-"-p&QGU%^^U$%E_]FTZGeVD5YVe?]prEI^3#t7$\Q>RSq*=t;(S%H&b[$`A9]qSEG_u'X\h9SY3\^0g`i/rBL)E0LGU\/J:TbA(FWsqCt',W%'+:m7lWo<DC=!i*5[>rLHuZJ%)?J;'H6Njl60s0`kK+E1+H&8$0g(;7WB:8!S^7q.\6.MgK!fhq@)JdUM/.tkj8mG\NeP9Z\2Kbb%cDu%lVFo%]M9&Rf"'Co+2!M<9FCK5)Jh9k.d'XQ)=(cX7"!Xf\:lp618Z(N'=]hQ@s,:oL6a%oT%I>pe%1o][%,V8,$JpBMUmh?&%h1eZ/g`d(s?sD+r3cLCFEp,l]kj<)&3X#J@:6qa"XT['&=.-G]%L$'YF&r/3Tq)7n(mjso"AT6I,d%:s#R"t"_$2.r2n(ZE%1mB0%%L9Ba!X3X)^@?2/Top-!o%a_KKoIMjBOTu8J@8VF&E@#'5EsV*^-rsaU3"/UXH.!mTrk">Cm3c_-bO]&*1SWg3VrAd%V0]'KbsY@%Kk%r\!6.W^;bF)'U0'WRJQNJn-=&6'?8WdhVB@FGdKl.n0F;,QA9bIi.ZZeo+5P,Xk0XL+L9DF.'De^V"OBc,)TD<&#B^g<^t-tm%16ZT`C\We'dPQ?jY\b#e@Oe"qM.<*oY\SWO?0NX>J1Wf.QHG,*@\4-eV1+nUeN&In9l)[m\!E>S-.80&5&G9RKr,71dO`3T_h0g`%\>F+Ri%#gCVr0)JI(Fk\<sfAk)Lh%1dUFEG/ed`>@^L6j3E@Dq$%jj<93%`SBe-0D33O[b\!BY0,XSV92Pp7PGS7f$gss715\r]-%fPegHTGYFA8&uR4QA?0C/mp2Fc"`]o58Oh76OmHpf:7pQ.]R"t^JaEamU'b+`t2u(^S8rI;]TF8fik@,U`62Oi@>,pICap1!KJ"[%,^`$4Yiu(oL9IO*!?M24LdT<PVnWkYB'VilSBe0ukS4k<n]?dqYHY,/G',dU_0$Z];e)Io;:JOkH/D5g%[88j/+tEfMq8S7OKR'O%CCONg1]f`,e]<Eh.EI"g#UWb'[KLb$5aiJ/=J;::XgfD!8[!kNd!7mY5!uH?U9K#Ks1OM(eprc56U%9,'bIF`&M%bG$,?lLP<N?:%P6ig3_pqFt@^*N_?Kg(<jc9mooh<bPdg^(UT6/@H2lnl?c'B`B=+$C37hSI:kWDq?<E`tuK!cXlR[Fjnbn`gU"]OH&V#b5LTQ=@$%cS,Q;TSi_E$E'Wd-=CSEVdgPRO=2td(PAZ`l!tndb*!;NZkHIDe(5-G-)O,93/(5Glc!eF(gtu?=V/O.#C1$J1P&D#ie3WD0rg)(%IZ@9"I>4CKW_!JV@oO,FUloYh0rg)?M[jQ5BSD9O\l#RaW_$:>4bch="Vr-08rSYfP/=.CZE6r5<0F`q6`CA`N)R,XJl!F85cP-h%C1?ZV!EHNq6e-jKTINMG:_b9jW+m5qX3n@4<&O3K5[^lP^iKa5>Qfa[0i8"O@NsFdEIe3_"<`L1B[t>"K[+3f;T0CsO=Df6nTSF\%WhM$N<Dep4W]56;W/@PSW\P%>+rNYr5XSNk(sBqT90uVs.QWpH:_f<W3e5aO<Jb0%9(NjR$*6`<*aOknM3L88eZ8pHXGTFJ??8),%`PjNi,I@S+Ps?QoSPLJ13pihld2K!!R4Kmn,9fN-eOUFYRaC#/N%NSp2,;]T1epKS0VAg$)Q.=Q>ZS;Is,9nTi],JAq4k!iY]%]h%dWi)fglf)HHdK`!PMdV'B41AqQ8FK;`H=7-hgt8H?:kj>7Hoau+BAm=WX?i4a86#\k6oZ%a1I!na1^OUit6k3U;;ZG/(&V<6#I)I%H"*CR=n2,S3:9nLq!cc+CiLYNXV3X%KIFWj39&r0a@T2/[bpkG1nLQ%cA`H@FPl\D(Ps>U9:F.;"H^#"]Ug%]h00!d7A2$3XDc7>%Z$<*<**Q`KbSV*!o!Ts<jV]e%!o"C?Up7\#E.;ls9lWYg4+qm4bRoW;GWm@bC"P#V/SQ0-?93(<42*##69J>g>6/ghJL"d+GX!Z#%W+s4>lbuU_Zpe5``]5Cc-OGbIhSLPJTQ<_rW`+Dd7;3]ZFqXS#[Y4j+Ka@!<.q>,6oFj03BM8Q_7?KlT(JcMTiJ*iK!-(dQK2P#%%YCd%;Hd^o(0-8Oa^*cWB)?TtA[9S<s(t<b>Ul_aK^3daj[>rB^TJ)7EI(,?bSV?fQl0+GX1'!OuKZE]cL#Si6cl?8;VsMA=V3R&I%TsuMQFj]`tY?G?T]WU]MeJdK)YnB^sa2g(XiG';TYXuj\C^D?RilG0R*"toee6/1CiuK@aNiO]O5BR\G\S=9Hj9Ga$h#M6->D%T_%eI&WO6?,k+X[FRXkqH2@<u,(oZP&]0,8B%bP59p^,OS,RV6o_Ga@b_McF6=,[n=]O8/Qs(W6GM<4h`<rbR-E=WYp[mh:VG*=lQ0_%1/ZGAED]oo1<RNuBl3H%W^n$8*>?JCb!+NG)3_W?.o:ULQg$VIE^6P7bW7;fI8'-tfb(aOnL\HeEB//?PN4=$"oLX&',]DCK(tWg%>qd%U8dl<&+X4-)@*$43"0Io7fe^>gNC%XDNNU5EZm+>#@pTksQ(OS8&JEG:?,F'q9J&J9L$_.\P/aKpK(rPM%te#FR-[Z-/(tVF%-2-H^g70oeh]3;#=`ER]QiI\t]XZ+:T:4-ZU.@r_IV[pf\08b_"(1th`=p$)LY/I;?bE?f^K:^5&-qNG7lEh\3Aj`f@/De`TpUDD%_i&_Or>7`1nn'NAK`XLQ]HYu51PRm;(B`Y/L<_5GI&2gLN>JnBCst'EfZ9s2*HZn]C78V`J\\X[:*^o8HkA,EP7AdV;d(Wj>$fH_%/qWk6E^&m_ECP70EAgM.8kqH!X=bLp$O%+a/n`?A<Io/<\Len7d+ON+J]69PnWGLW9(P>lj8h95Nbjhe5%3aSKR0=N+>-8BFhmB<%>a4B.K0GbX[*FjOV+KhVAntBlPTpCh&PdhQ?N(,7ji8/knUcAjKGfI&U,;9VFA^bt]_J3XmUrnV=;YH]E#Z"=#eZ-`e+[[h#8,l`%TcH\eLn%/]9SaWH6^h!hKqWJL*5!`f;gCZV;]=7O)t94`+45qbiIhm0[cl^)7=1^4&&Ff*[ss):lJj0rLXP-0MZj_pCn$TElOe5[%5TjtrcDK'!>TN'H0K(0dU-Ld00f'#u%::q;&E'$gig:<2@+3`OQ61H$7f5!I'Yn<+^L^Fi:L&FY//SG?hK6_/?uHFVeJ"rpl*Mk'%(T!O]l81&S/p:D-EB+1kihEen^FdI[PhRj7'+qa.+3=a7*t/#3NZbhM1WYF)q[%nUTnR$3SX=t\)2kXJ\2Ks.qEEK8fo-tK6c?.$%-6<2umC6%Y#`7S$M/1O+O"?WP:0`tug1GRT'%`qE<j#;#b=LhMWiD'QU][UZG"CZS$TO0tJ9[T=:>g,rReWI2Xd91*mD+q[Up\Pm%5+>Bm/:hj<#Z[O<g1&$PYtV#?WjIC@CR)[TXiD!of(-f#P\jSG"Rd$I7D.JnQF+_&a<K!Ac:j7WJEI^(?5J&lS<=8&M:n=0)fr9D%Q^>\:*QAnkBbc7`=A*If!de@U4e]MENN9'RB?)JJ(TIPCp&8U&mM3\)MNitVFNkAor*IVZVS$E`&B8\#AdDm+>r.-_^K`RJ.IUQk%Hnd9]dt&r)^dTti?s,@qcjX=iK4ounKiBlr(dg-K+\^l:bn-bfO_+l/5[?1!0qbZe_AFuU$t0R]Bo4SKp,#2To>NRUR!.0u6^[T7%2+&4ul'`bh@Kk!fVJs*nqI76-1PA>EU)Cf^L1*)"f$P1?$5.'10Su:)b/bI;(f&Zk@13NWL+n?#1d`+t(RcM++VDs1`\:&_mK>lo%KB\7:N(ogO#YT^?Qm+)4d:8%f%aiN@KPkB%H<O)Z6Q"9a`=So2?87*^b>:l>b^^BLR'JLp#uV1?b[qSWQniO#&>mZY0naOGmcT+@%8J.gS\YKM[O?BR")9#J^@7p>0f,)c1Pri%.N4S=kg*dY(Qic<2,#"GlU'TdM4CbEP(7j!_"@3k,iK>=B.B4QtA,<84_O0=5JhUd[%Os#]d;RY-Z5o<,LOs#^W0LZPm5a*AtA'eElKIIJ0#f7;FcISC/#\*j.'8/*qXVntm!)j;7%&r>&R:$<\YUE%pDT*3bJ<&Up@usn,%5B5U,^J%BFXE:")Q8"$r2+nbgGa]q;5s`a.VX\h)O\(]iL:9$3(n556'#sFL-4*Uq>Ea`>WR`>'$ub=YS0/-uE*IdXbiV`aKI((Y%0hE5&g6qLE,[kM:'hK5Eg6*\>%;t#RA;fIf@8*4-noS7_:K]MI(dluF,tob[AdMBa4&^&=:Da>iOs`q3Crm?f&@U^-@gH</KJA"Z%H,:92ei[@J?u)>f#-\h<R"SV"-B,cV72)OPS"^4!i*+N]8H>\k_AKX\/7Al[.[DatX<gLV#M,%a9]Km0s.t:SOt^FKAR:*;N+$MH%rhU8`;4(o$;qP9YKILT:=i)#_egt5:>&0EX2&_o0N+$MH&giB7PCtZ,X\$CZ4DBs4L93=)R%/9C&]V%4is8TARW4!0FKIR?(qO<!%@16HmN\H0i2+O$#f:!qCTkd@-`mD+/9%_?Y_Do2oUgOO89*#:L)'dD3KJ@;F.DZ]2efojNF_6B1'dFQJek2g^bGdGB'#p$@jogl5%=A'L:k,eqG/7Arh/"%q@Vq1m,X51t)KJ?`6=i-EpW`d3'LT=Rp(p;F@@164QQ8%E&CR-[9Hu#`8k+c]a0]gGu;=*bXX;VjfQ8""6%1eX3f(lBVu!>3Qh-K0ho#ucpTZ\1&8X]`LXXO\q2$qk<#0F#*F9c-61RO3tRf:"$[45lVS9`++D-&getbn;?DJ'AV'E4'0P@L,<,%KLq]-=i(jgd2=fNd558=fP$^-$%B1[aB?@sWn&_0bf/0b@13NWQ8"=:'MDO0>Y(/7L-dY<-X";'XO\q2I-),9(nY;,'?7FGd=a5f%X_GWh[am9D=qgik\lL@j>cGCF][eWBg-WFlJ?:9:[)FasOCegZp8_<4[%/_50YJBL3B16LKJB.%Bu9L'UhIX;C?9*5[\a@0qPIB3%Zr0N)Y=(k%$)U^mM2W]S(q5eR"1U3_R'O@I'DUQD@EalL9,P#1X=>Pg_AMcC,[jB72+\WdqB.0LUe/G5+b_q-XIRFs,[h+3CQ^B+%b;;d-_bljJN+$["&uLbY-4*U!4K%<e8JhPARO!j.E6T$8TUBBu@i-hrbTogu6Va't9HeE#';j-<jp>O">k<V'I&2,*(_Y#k3QVuT%i1afj@mEjHKe^NERDLd#cRCV@'ZT(@-48e^Y)'q3*7mSe$BAnr0KnZX.#c"4S=5X0@=6f-*'gZ`_YCJgU+cenF37/hL%/%6ZD_%"%K^hA%Ec?;!O\),uY$d,9N%9Qj$KJ.]R)0[sf1]UV)&6);K'#'NkAl82FKW0k'KjuP@1&YXXtYUV2-1UskaF"q!HcR$V?"3i$=a'A%F+m2iVQ%EL7+YCH$N"P;0F#r_<LAH&ROO33FNkMsOJuh!;a=VCKe]7'RDKY9QRlMOW%3G=l!!/ER)0\2f*l%<R@cVBB0lpQ2,fl/%l'a&[TleNnVGOj9$I`LYR)0\4f1]UfBGFA]6g:$f9[AqI$=bJi'8<EBQTS[bUhcPUL!_bRR"FOj-]C?5`=p5k]&j;t#[R%T.>4jL%_AGVkP[FonCS?F<il*7(br%/A8tdL=S`a*hL+/(TF%m%>d'OQCFKY0iE3;dK(cp88?!sPd"B-->kF*2\U1l2fi1)YObVFl,E3=np%]M,I-*M!-;VD&CKjYTu)"kun3/'Pjj9Tk*4?BA_+U\gKo\hFhqpqlM1B7_grmPh!\_skr\RPKicAN4<>?>%NGL)F.F0I':27QJr1%@BQ.J%We0tEu8189iHgEQdXYt.*NhF1\029_ArD+>f+tf@<dtm9cup792c7.(:"dR.E!b??jR;t9U6q9_cs)X(,<IeR\UN_2+d@p%.;e'4@M[B;-(2])Lf'#6N1<Nlb`[hArOiW/(^dTk@^HZDq8@5;Z\2drQ;K3WV%f-bOlR2ao16iZ/?9W>#":$hoHqO-VDKhi/>b7$%1Q+hI<RbJOW>W14OX1f"1@/JoOu0k>Z8X-$dKF(8H54>b[W+_jVH3i<0r@t[:,8]t(="\4f-!L<VH57h1WEEk&WJ5f;bU\).4&[F%c`!5M[#/X]ZicSU=c9!n'1S8F)cN'##fi0\ElKhGabk+t=aX6bPGD^24uhk1Qq'4Rk4"Bcld3R[b`3D/(pg`B\s(oZB_ND80d?*Z%Z]>]08t(2;9esUN7LNC_J.*7.'Eac'3CuMk;jcMd_l:qCOJ*_-=NG/ndkkU8bTm^e9ioqF6tE`7V4#DD#u+9Z@D=U'A2YIbVoZqu%)p#7GWLB#mA<uCiq8i&XKesqjWG@rb%*'Se8Z#*REg!E4jJ6=6eeK^'RO(^%->#'M9;^lW&X+["=Nda*8PR3;?#c(u\Q%X#I+B#o%RF%!/4]uON-(u.tA49<A`\,A0`WoXDPk!GJ(7?Esj8,TSb.'V`RPM$+MPj/3=Gj%Nl_7i<',m@5.T84fEg>U<O<H-l9eF=bL8#r!%)1>;Fi@C*=SKKK$[hDYuA[qQ3.*M)^NXTP<!ja.dR1nYcQ6?9JP-tdgQfTf?bqsDXIaF0g0#R?:9jNL@1!*]j<Mdg\S05dWL);R0%?Nu)rIi2Pj9b<]>=(>qK1R:^mr#?2&W\R.TjocP;1MVB-`XI3^j>#+nTo%"SQmJ-DjNoA+1Go7@/i,@`R`nINBS+K&:;!;W,P=V!%R?8C6$-c#oP)O!N.645m;I@^`-F>m$C.>XnA2Q`Daj?KMUQXRn6[Z_+bm7@HRE\\L,uI)Oj;D]ugruYekS1WH0%MIt1CM<udem_<%`hWpd<(\dm-"^pfEh)(qQQ\Aa,qQlQB)+`Yjp]kf%*t>6ab?b1Cq]idU-"_&3FhP`&Y1AC=#$6pa&l300l4#&c58B>A7s%,=);Nl%C"LR?g:,]+AeG/!M4J6@dr9n9Sf&Ek1F#V?V@ec!4c<a/VEL,>8F`9+9Wj2t(aN2,B+0DIl8'Z?q^fsST4sp%Z(Gaf>gf6Y%pndu%0ds11cm0Z/$tp!(.loHj/JJGY`#jj>9jna,9g]deK;JX0i^&d$.&1Pa-F>HoKuUcQ`J)=iJ0mY4\3[HpBn4%`d)$25>*qs=VSP3(%6jrT7d>TV()OktGMT3H@Ajp4fS'ds%NFTV7YuWVh1p+B[)9p6#UDXqe1i4k(*)0TO(O9_@1hNGM+&*WY,"PYPXr5Y)psp-n%")iN%1pt>:Ou0QX.@)ff6CK5qlC$d+;nAnFcOr5a0:L=*-Ao4'jjZ2_ajLn$<buKug,*(R6f3bS9q/:49[a3;UP_Xc1^:Z3B3LZmRMP%i%VJ5'uZt\6O'Q4nr[[apmb\7K5C[*_\__cQUK2%dsNIc#mSu.%*VGC.K4/_3DJJpmaMF!4fDagA>0UUot@ot<e>`qO8_'2UKVI6mq%;,^:]'<*_=XdRZUGg]Q+$teVNS01a?J5EMM0pnm&e/06+HtjR@B8]D:W\MGo.+QsD.o%sV[hYm2K%l/_9hhpf<F]Du>A'+$NQnb@%<b(a!WR]W`CMl"a[<'JaZE(7(eb!SpCMSAV2R]&^ND2`7Oc3b/Bp@UZ@g\l"esN<_Q8OE&(!W2q4N4Y(0Qt%I>c'@_YVjt"!n`rW%9`]')[`/k:@p@CfS'e?0K[';C,f4/HCDpV;`jHXs1!2A5YSlVm`,1rbN?N,X\e`1K7_>N0[cUjoW0.ar8VF46f/1?Ve8#\*1T!$d%Z'1mjqjIT5RXU4sD8rZSdhu;]SJ7qMfHegU*,HO,1D2SPZkWt<*YD,aVK"NS@?UepLtEQiAk[#U^,-Ro`n?</9hiAHA(*]4Z*?ln%c03e*ct7ZA)JEnQ2?pNG,F\bgRZ^AGD9^2BJ@8op@lR]7,_XaUC^b#n)E*jS8Jon$Z.LTb)ai>:MG:or-"/c;B4X&,;mA'IXbEdj%S9gA-D%(&-8iDN`Q%5QEhAS&jd`,+l(<Z2gCAlI,gV,43)gfb3Za?^p@5U]IHHTKu['@*A2+nm8b?D6ZWOJrd9:L7N>#VQ.[r=2N%RsHlWMrL(G=]YJ&Y@_KI0D0(G2YEZF@VK>urb@`Wq3JF#Bi@e5CR-mPQF1==@rGLcQ8\GaZ"@_!mi6,+2YJ9!->?u9eS:7*p9:Z2%C"%!'CR-mPQF1==PAaT>Q8\F(Y3&ntn+1:[2Yi66AndG^rUPnUQD@6g)luWbeEatSA`PCZlnrS'd`1.eeLYS(AR3R/`noY(/8aa]%?Hpp<hY#.CSRcGEY?>Y,2E#iLV+o:A->?uTTLmkiCY"rMNP/r+8_UO$.Zu^_R^HU=j(b\ug9gQ(Q8WS)MJA.*P+lL92TJ4/R\c!J%Y[V<FY?>Y,2YENHAnbbY=_j<]rL1,@BiD3<CQ^T`>UbgoVF[/O:$J-ZBiA37aOYT27EHm!S4hW_8K4uO:"#o?8s?X(f;pi$)gfh5%PI.UHX>NWi1\r(s9[^;Qf;p8m)cL?Ce&IVYe$Lk$cnoU`O>KZN1V'$eP;I.C0l'M4`a1RS1i;S*@SP=k*jaESD<btJ:",s\Zd,O1%8^k[c2V'^%qCud1d`*=degt\)$07U#P:US9[:.>-VB3(p*,XsE@Em3>*jaE;D<su+c-aO;0@&(:A8#JV/8Ktup3*`RBOe4sCPFb@%Quu/l8W#G"R'if)j&<*/g=TodR\EM>B!!N9oRn`P2YNM\:<c@f2Ep5[U5dKpU1iS.Xsi#VA(EYO-7R[D0Ir#=p6`8MB]I"3384.\%ABX$RD+_>q6Q8r.c-XJ\7PV9TVlVaCRoVqrd&*D?:=YfVcc.$3f)0@L+`#?KVB3%or+t^GCX(2F?F&/[D!E<^c-N7nZI\qilm6Gl%c_b#)ec]jV-#66%VHudD"E!KOCJE0Q?<bthD<rQac-W=oZITG$l6U5bd)KCtedQE\-#:W:VI$RZ![l7>VOja;$uP>[CX'N3dTP8$%XLU$6b$$U.WMcgT6Q:Bp=u3ObVlUV#RsN1[1UOERX>NA7*a;(\`a5t%'Q&0!'L`sfa]_WMl+'k8D<r]ec-`D[ZIU"4l7$MndDhc`%ef8Pn/SiVYVV\W0*,XsmCX(8HhQk^SD!W`h-596UCPk%DTX?+WPGtoS5A6TtY??T<p7esl@oEn71Qd.6>%_GC>&,lOp7sPZWY2Wq%-Q1XjUXklp9g1ng,l1ARQ<1h9Xi]5JX4Brm$d@3!T/!oW'ViQ6GVLe;!St^VXZ0I.):_#39F<?@mJPOo(LT'6;fAq2K$GX]QroH,%k@j',j)68n`gS;E8Q8,02\r8/K'sG95Goc_d:jhheLsa`K=+D[d\Vb3+poMh3(h_uWaX%4SPM0t^/<3FG\Uh'!)/Y'24L+8C^,?@%huu%,RnOUG*D`#n)o)M0+94J2[FJf>[2C8g"`<?8/sqgkb#dLJlI8.',^'8cl4#(-M.%TgQVHM'\?NBR)NkhF!)T7/1SH*IMM[cj%WTOO]&N42PPU5HkJj+`($<:J<%iMF$aUE0t9Z%\X^Qc"OYU/3KABW"ss,BlZiiW$+@?_/pI?7?Ur&--@R#[N<9ZjZ+/0SGoELFs;%itPD/=clmP[8U(Cg_/45S#Ydd:"Ao7VCDc6;Ndn,;K5X#q.(/<ZD=I/=W(/'q,4(>4rEhlDQ<@-+W^q?A\i:+.=A$m8kGDXWj9'R%b"iobX-O.R1:aqFTf*e=^8-S->Ka&m=h!_Y(b?.m`\u-TAdh_*Qr?Sn?r_d%?s+dLQ8MbjA#6"2<gE>"%2Ss;&iT%u^_b3bFE=ZL%A)g!/4P7Fg(;bO-.)[W7o_BDM3:Y%sP]&'N&q)DQWd!L`d\2HS5gosYE@TQO<l>?s,1V?g8Ta,UDO,pAJqXqT&`,hfh`%TZ$00Vh%(]VdF+rY?WD`Hd"a.[F-0[(q#aVIc;_Lf0$K48B-a\pW2aq-4>"EL/g-#k(N!OND"N;8S)C*m54'2>m%A8R(Ciki.pC7n!+>Nc3H%HC6<:&po4C5UM]*oW].9]?&QC;-_gY:(<&+n]TFLa+VQ$!D0P&=ld+[qFjtu:R.9KJNiO!_k>.flg\G,0NfM8:/D^e^60e#1XLAf%CA;_u)dL7%n\)K/E@n[<]?qg6?22j<3*;HCPV.eD+Chr"_p-nPenhYrb8)h5eKSS4\k0b\FJIlGVb7Wo"A,@_fkf5MZPK$CYR>><%e_:C=C_@+ng2<jS$0tca@5;C=3Aj>\-#KhGk*iR+XKgp@C9FPu=DEkik1OJ"9J]_<B;>pg_V0<p=9T)Sm.%S3lG,r3WZ?=DQ`]42%)CbUI&pA$d@;:^cc5nbU/Q1/1"t"4eCdUp`7+"ce8/Wo6F@o`:'pr]6eKWOsF@jXH8fF`G.:^oqMS4&\ns#KdNKosSXOX%\_V/7+%$^n\COYYR".I%rXI=R^=@_"2$$e*#'#[QJP`Zs2P\d=kf6=h`/Pu,6"OX[>B11dm01--`JetNQ&$,bjKA\$J4'(n$7AMRge]#\rH%AA5'lWk<-WBLd@cQiZLRA!M#,11<<L8sh/lCcJ>Us(91J,n/GCCT4,dQK?7d`Q07/@E5gO7)$U5(-!'!*B\?/,>egDYCSgt($4.G%L]Fn.L%J&ATj"7l:6qV2JZ^?1'&@;b-fM1FO'3l0M_b`r/4h\Q'Xt\2A>!-16C1,1Kc%$X@D#e)8q`Zd8VL<(g+*_%-*_&[8/Mt.%iWC$n-m97u#$Xb6Ru<B=&l[rBTFcej,jJqr:I8;J`#,StA2[`00R_N`UaS^BfbtLrihp.H9gHmL#r6Xck6O3ODcQ[6H.a,"bZ>7+%.^,tpMq,XSY!fa6oTb@Ok6ZC&;o=)@gnO7^,Q^l\^1);IfoD6jR=LMUVF1a4J<VH\#Ga`p\^dr/[E-SsUh%$aFk.n?,[Mf?-*9Tn%2XQZKF4F\EjaO.YP]A=NpS#i3Mqi,6.VZ%8KYa`:+\N$8Pg-.g#r>U/F#*irK[&_*%BGd&]kfr+$$Ad0[4`uO"Jj>BRi*anqUsNM%3C5A>OA[Ce<0@MX0p>V4`[YCPA[6%\P`1miV#jOZa^C#>"=KsAnsi)8)L0Fe'oau2CFU?aP,B5_P*43@=h9V_WRDYN*Zd?+BG>5K%\g/>VZL@pD1)`SO\`mdlY^G9te=J<d8OfJnU8+J\,*QgdeWYq]@6'`hP[&<nd3s#'2AM4G48k"L'OG-A7\c3$7AEgj>Br(OU-bqf%-?Cri-md=c+k8V+Z80h+r-IlA3ZX1ma2Y*oe%*>+1eO%"XW\RA;WY/s'WZl.lqB6.acaW>U/@qts(8i2^J.HmUSMnO&.Prb/TS/E%-tu<<OqQ.jA[r\rc.[$cCpO;g(,;l?+t"=h&uMEC*WJ3,8g5/g)f<`0ZR20LfK=f:i='<X>\L%0;9EcU"GI^EP?HRP<75`+lnugg%1Y/!Pei[0]2:W[>bq[^143a4.`_,i]F<Oj*MajrY(6[@7d3p;F8@9ZSNVZdIqJW-+l7.@rl!UEa;9YJN9LiAJ8<oEu7`j)$1eOX.%TTU%m7<UR-V+Xm]Zo1r:EjF)kfHjTN:V#]E=EPT4`qV#%'r,sZn?orEOd1nqEJrA`$YDG)BW%V&b'8$LK\7mm>1mRg_Ltn4L/lK/%b%t(b8',jD82ZKeX@tH#^KtNa9]fjf:Zi(Kd3r"$[YA<LMA`W>0NJJr.MLB3TS1E";phP9AAa*c:ZBbMK>i!*SKr&ER6["QUHV.&%"D.)t'0d8_jX>tJ#sB/_\.cISV+"uSm\CU$'mIeO&c<9+NYX'_T]/^%UMcipN]XL=;!F.KE@5oSM$q:.,8L!8f9'$S6skRE,'NQ+%Vt`[LLK1?bqA,<Qkt$qsqoFM3M7NhT/O!#\])or^<]7I0NmLHgS5ade)Nk[[Fob3rT<<gge9qZen5@8a1Xcr6T6(8%1A;EhElWqR%o#/Dg(b!#%U^\G1qFHj6$l+\@Ff79BM8@B&/#t^6$9-Z<^UgW%\Lbj^H\-R!g<@Q%(!cj*;JsR+JHfomp3JFfgasIa8]"$&iO="d%PDk;kB#/5i(1#9R;pkN1jLOI/\4jn6M@bZljH0lt&gIT9HKlU*&4>uMNB`@]71;Uuo#UN6."9ko9Bs?BWu.9NggD=]&o>Zo`LS=^%\$rFhfUB7+JaqtjF?MHu(!kJH.?n5(BCn:Dpu'"r?D2jf70nV5-#3dP+'`4=/j6`E7T-2P?S7%i_\DJ!]Va3U\m:47Eb(O9^$UX=%3_lQdU1.'O[Q8KSG3ua7Q.ejK$X[B9eZi.&DJKK77se7uC7$$0Z$%0i]Ar:/@sbQNDSK>oq!,%lfTl%-BYTG2h&e/.E]ZBb(LO;B%$nD:ZSu\fOT/6Cdc8>sr[t%-GE>eUX];N3hP9fPVKD0(Ym+1kKOa*n@Fe36rYcqWR?OqhZKdGT;@u]4!_jYuX[MdFek2@%bE-83h%Da2mA>lCaRa;abA%/Sl[2u?Lo*ki;7rii;ER(fV?G6mX5l!69\^F#:_FqO(Mfhj;HZ/PuR04;Lr^ZHp:g[#fJh8Ibi0m9o>rG7hh%4JT7'Ab&tu5#M.<^b[GW-._m=W.+='kJ-i5[QAB13&SF/oEj1rNHP29^Q%OUeu-8n@r]!K0TZg7ReaTtA^u#?V`:^FJ&@Bk^7(%<%#BkLNchad_4DjI#3Ea[jO&$2,+boB5;JL?]]H&"ihf5deb&2@14L+MDqJ<QUqRTpSUm*a_lJ:3$6#6N"W&J_l&B/+>6,rBp`)j7Z%!k-.-q!_cHo[[*eYa-LUT-PI[+_Gs;1Mcg?pm0VMpG7K;.2J,RCoUm4d.EV/VnPlB-S*b(boHPX;iBD;/6LRkeOpqL&tXpSH68a^%]DOoiHFghn7suHolT&G?+Y$S;Ed/MoX''B&Wn-u3jep_dp,E(irqc%pkAf&j89Wp5*@,UV&PX2VMuE8k[C!OC`$9R0ilg$4!F+Pe%KdSr]Y$J)109D5jN/CXJ3#iCL[>\HWHdC!!^TO#F5ir"&lB''*#=mO\\P&KrAnMc!JparigW.lJg&>>?QRt<#n`;qu$$N])Vo07G%Wae1^m-bKc=<[0Q1aZ9[[Pq%/UV;lG?F'R-QjmZ-LQgDba7Y8/V/:s9WPSi<gELmdrM_\nM5cfnn,pU1ZbI/iBuf@j-_#<_08?YG%s0f\"LhJ$$\=YLbRW1LUTY:K@[?k78.CT,3ZhBRKhVM_%nNqTh1cnU0YW"em]);W0ZQ0QN7fiC"+.ih@j[*74%c,Ch(Q+,2@Xj,o%@"kiDBhY\+Ct*IT&^b_<au;Y2\N*i`0gVU?^%,0<'`7a+7"LR>m.euO^/eZbY"lCo"=0;>^C0D8lXWd<4<=D6/!b87itGpSNCOF2%@qHhMLLb`VRcHlXH)2S[F^IEsPqAScb[cCt?Ms8=9F-Tl#6:28jBP"n:,cD]SA[D(#*FY,0q4W+*B7Ad&-F!dEY>A/qsR1LWT8"+%?mcAJ40]jok`CqN>3@$?(BRtK6;AWpiXE_i5XUJWC_1N0)0>YQD_@A<TUlf(%O0uX@:/`qqp``!M^+P05Xl^5/s%e\SQQ+L!'ggC%S2B.MBE]oKHOpX&&8ue2F/k)2IMrftLQE1(IE/g\m%%(6#i7U4*Q5;9j7$rkZ1m@H;nN)1%hNcaTGM5SXoumU1_)6HpQBQs6^hiF%`ia[k`*&g`[F[eFS4MqS^],j*[b7^gGS_<_!8"QZ_@$?kq(#D^!a^IHYS*?.dD1JC1abXWD+\n3"A1Y.O>DN;S_!sGS3$"Rrq^Ld%kf%5o3Wq4t3,1_p4ojO,Sre!p]f9k:+]&P5#n+Zi5/qtbP'4:>D>02o!!O7m2gA=f"CKY]O2fp"'k;jM:?DlHXJ\1poE'PMo72E"%i5N5.$\;%a93=Tdi?BStf/bg=W?1.Dd,!!BAnc6jmBCLE+G"4:6`VVHkQsda:?rpi_0XZS6K-#J;RL"V@_"b2hOtYcLSl<-^>,tR%i;7eDjj(Q[@7!gngnf7ClQ[&(7j)"'^^>c(4;%,V[+qWn_#(<4pJfH]=`lkt[+q>i,)<'N^TQ@sn[eFH>KRsJ%DU3K6t'MZn$fhJ%;18YBjUSDeOJ/R;@Q?#aD!(@fO$a@P2VtoKX&q"d/U(kC\\QUS>Z^>U[r$Gm>41$*c<#mokA7&QZhOeoM]Gti)&%JgDdQ+0S`fOD%6pH`>-*HBdQ9)6:d,AY3X=n^t.s:9(=6dGIkR7h,)_kZ[NUl'RriN",D5)i[+!A:dQ9'1YpY(A:LSqIa-XWqR9?Wk#mt_c$`iT"\%kC)+bcm%Y$ig4gf'X+&FG"C<FJ<i1!n`kg7!q<%n_HH6lXg]s'<kgt!j#GO)3NtkF6Z6I\?("WP(qsl>F6pR!D0_r$=\WA;h-/tA%dR&_4W+"UXOLCla3ieg;DP*$#\t`]W,otEK8*gf$q\iE"l5^EM&SDiC)*pA57EA4P='u[F%D2ZHXru_O![g8o=GXVC?snV+_on-=%=7VH:#W\$?a9\q7+[SL^Yn@VjRIENClp/W@KO10[\.Y`rd=_tg%523d?-,GT!Yk!P+sR?tKa:fe`<pFUS:R",8.($?38c*]"Y5^b%&.NH;6?jAhl:N,G&"uT7-o$<T:kk'Z:o_;XMAc/>ItA%63FC-g1CD_7m4]<2(or!Tq.R<+c2louJH@(;"@WS6#DEM$U6L3F!2'?Z%c5#tLab8t>gG"fah]pMCo-'C%clp^HEe9,4_?hL1%o<ZAPV@n#"qCXkgR_D?E.X<7:)p?V5VF[1_?P]'r/;M9V%0InTZ.0a0>JDQ%6%i?:V>rt0'933O06r*e&VqCh$<[e%+sDXTUMc)iAfk#.o/H^%7*^^=\_DAM3kOod#JPCFJ["F-T>afDG(+F04YIb::lm?"Gl)cp%KY6Cnb=;BXh77u^&ZFukpJ'W[`;TUu4R79/-5O5Y'+2\8)$i_GT\N#WB*K#57\:6Of4;Kp*tB#K/)l'DK(4#8"&rVbK[KV1<YDb<%VW5<o%o]lG6gMIcOh;n3p:%`">u/V-hJrQ"<]$E6lV@,;I-jD@,J2N>lR@$!YMABe&QV?APr19Pb<K/_erIJVc@:2-W,?HL(IJTl%Jt+Q%*.*V*dX?(NaOas<91RJZ]=h6[72B1Z',T6me^.pFg+9uRDbSZ@FJun>fgikj5;/Np(Xq0?3/77:O8VS^?%:).Rmnb%peLIf%:OR8eFZT-+6gtB*m`4R_2S3G)lgW2!13'@S=)kl^^J5j+Dpq3sH:Q;Q9D\^unu][j8%a6<M4HdkZ`h!_-`^T$eB/&QLO8afe>m/@%F8$o1of`TB1)CV@^5LMM+baY#f1um.)*8;'c69"6@HFOiSFAoL)A^.okTZU'$R=t'0I'H2$B^+AP[F@q=m%VKX0s;Xo=gsTSaZ:/%d<N#[\8$N@R5?0W^s1m0PMGC)#[2t7H!aGHGjA5X6@VnmJJDXKV_PNDn(qB%OrgH-hHi=GrV!l74-6;kN6uZZ;]aLN]+d?.]CrDU%mM#g&6c$FW.%\'^.I3[1.8dngOi,Y8?d7<YDV$'^Q>_Y+YOSi'giJ9@k-0KklNu>4=WZ-a]CoO49'K>%5]@D;>)@ou\5_E63g*a,%D+fUO.te@-@ra/4'5Of*\Kp6!a2>K/ou-cA9,b+;kG>l8_cgg<h-$!]oeuIe4TRiI;)%H$MC3=;b'N8Z8lT5Q^r+Qe>Ut,;gr7r(%0a2p!M,roflP5Q+@BT[6g;Z6k.bUd:<kbZEH3&Ws@Y`JTAGD!&AZWg.-DR8oADpk7]P=l5:h"YI?8OHp745CjPP\>j,EHGJ@0chS%_2dYu`X8rU;,Ws[!8,^&'^\H&M2iku@onj;_$XVge!OB5\P7.qc=T?*CbBLm`6-Zn@T3#mY.(sVKnjm<a95NbXV0/.SqsW>81^3n%oG$[c/B85J@Y0S0N>C]Efn]U3XM:-eRYV-L>cZ0gFQ0iIC\M+gR]`dkcA':dRh:>'FH+-TnIq_9[7F#N#?HWuT#SuX^0*WE=:iV4%$>>GM.qjsDmKBT@4_eX5+Z8)NMFK]3l!.@],>l9l<79k*C=[U[dKgVIEfXt(j/tJXB1G\j)(WL;'\!CTEk4b4%6]8dYb&)J4fW6B%Ed4&;C5t@`CBP#GGt)M-+euL.GVEnG<hm5q&G":+l>+=:0[Gpt2A0"lh4qt:kL]DX:EL?*$q2_Wjgk;L"91JdC3)LdN1X43@N.VS%;U6c#TdOg+P6En(MH5n"HQ)LV=hg>57A_7E"S:2=@$T9THd"5h;nYbMo-X.T4-AF58Up=Y!=m^+=YVC.+`_fGo4qL`(9XbfC]t5h%ok#LFh(dbMG>as,`E?[2.`=;37#_;-Eh&rGM<.90n#4;nf\ifp>[L-tjXH:8.p9GO6^%Z`]:LR+BGI?V4TUCgUd3eCUn_U=E]NhW%)&01a3'7Z'p#QnbT7V@SP(cPN2d,"A"j/"p<[a3jM$SEkJp@Gs4F)udejCZ]U4O+(LSllA^78XgPZ[Q4=h@)&P8+T)Tr`l[jeWS1%3P[O!+`Cr?9lrJ-(gE^CM,m.NT#Tj&Ef+."6FET1Z6`\G/8j)VAI1c*.$MLYrf)Z/@,BEJ5Ml1"e^,>%R)01rLSHT/^6E)Z<3Rsc%FA]\=s"b!%[Rd.rU.#bfoE#.99YnBb#sW(77_Xnl80noKmt_^.5A&C];:6j=(6)'g/C=en=i5,+C*2)QF[Rk`Y[*+n$>iNeTqW>Q%2&&-L;FJ>22&!Z_l#gR%FA3'ef+]M=gSQB8Ui4EH#9[fXE2H0J1DO[W:N[Ch;-B(<;[EnV#iFC7@u>[t7=$-lUk8.@`.K7(kR"'s%X[ZHR+J>WJ'^!aSL^2*04Wu4W+`MZEZKk.5Tr2\UkHK13nQ]4j_a4W0pScIOK_0AI.NS$n`,fL\N^O&O;5ocNlUr_$VgB-DY]p3=%TYqFg66Sat;6WDU#jNHW47i[D_0WsppScf.CuB$)gL82I'Qs/m*L8<cT-nDu=9d0Q=7=5Fa\gB_h[r)h5#55K85*H7NuFU[>@1,3%9+_P\6/_kTHErcj71cRj0omGfWb7RfLo86]cRA">Lti%d_oJ-I?UtK-&IY0raV%:#\qY%oNoHWhWI*KY]][Q9Si7%)UlHX-8Ke7!%e4oQnB%WGJ_H;CMA\AbR:D>aYe0f$[:a\Qq,7)d_Jq_umUA*W0UoZL*IO'C*XHY"f5P8j>qUgW!7R>YWe:U6FjB'sj[-$[)80%59%Qj@RV9AmJ561bg<l;I;-6XE.Q;\*'fDjC8,7,?2Q?'eOP&"koF2k8-S-N;u?ZQ];crSh)6=(a>3($gl+HWB:iB=bNE*ME8/0oXD-%Vu#T&a)='O8%Qdb7%/(t'5bUs:;dJ+8=r2<TV2(MW"[Z.S(PnXT<MR!*RHPT!n$]PR1oGaN0BfXqp.hFe.2?o'g^#:&qhE"cjm]E%=jT7Z"YDN=&;-LDhj%"5;L^K:d-SZLP)LXrHF#X\L:q`_%U,>Do8`gD_]KU\E:^agVROJ07dQ2J]6e4g)k-Yn.#0Y0ks^/H81u'&%`8R/^bP1>h62rimI-:8%oEc!.;*5-E'ZB5L5(1_R?^J+FS6nYSPUe_W&e0'*9M;0?3l.mE>-aZ3RH]Qo/1=]-U*s(0,XkAW'J3He%[*2K<99p;E=]`OA4(6Mu;\m&L>4dj/U,S!ghGISNApMccdhf]#@.\&bd6!O/]iek;As(J&<>es4P@R-`+q6RXX.olm&KomJV]Bro%ktRh-fZ;4<6#C/Z+?'@t)rtJK*0T;P<n0?R.ta&JaK">fFEBW:FTb80ai2Oa_8R:RX?<dTH]T:O>s2k^!9nC3fJ.q&5E\HH_qarK%7KJ\>NXQ8jj%^445e:ebG-NDIh?Zhd8@ID2k`BVmAIp$ddd;,00niJ_,\uZT]'X>\23Mg-%<<`K-gUCq!4[q>2R,P#Sd8%I8Hs@4%,hl\l<(R(35@(?ITg>%k/*a"C0h%6Pfd>pU9ffF&:'.4qlXK#rkMcn@(+:'Z%14C+`^-=%8@R3iNX6trOt8*[lc3/?URb0E3*X:$%G1_k^G'./W%L&Xili=S?%W;^MU:SBoS7fHQl7EC0cC&5-*(<M>Q4k9L9CGQ`oOd(14"?TR/7!QlmF%KC9CGQfoOdpIS+TGC9Yg:4%"k/qe9^bruUr4Wg;DF<\YQq>LLTPUN@6^=>"I_lL86+Y$M4'V',e>76&oT5NIeR-):V\5i,,&F4>_s!gk$f-rlf*oN7+Xi8U:335%S!<deh4:oIi[s9GDoF7&$(1?ZA2W_8/,Na"?0l%0?+^c<Ln%"<i[r9BPl2l=,]ociS85kuYP]bU&j)61Y[O[CLg>/.Mlh3n7VJN@%,'2/dPr):ZK8f4jW[I>&Ep^@%Pm7IdasZa![a:9EZ.1IMYotdW#YjAU,VS\R"Ah^E&m^YcM78^b^N6S`-t&,[,tB(F$Bn#8,$t\=%]CPHg&;WnDk:cLoj\Y,6&9T<k'\P2'g=LnalS,?5Cb&qU7G.mfTSilIV4cI0OXJukASor--?7PG-$9nEXTc\(.3sHY(Y)FQga3Z5%F%[FNF%[]+5["NC%OE10#rE5dSQeuaSQh7L!RakBm$L.<9?F2;$D.,_03,12.$uc':eUo<;Gc_ma:i3;lrc2gmR]<ZmR]>@84u7R%@oc/^-&YAEGj\]sFmam.lJ.SN$BQ$T@M]1hHkD`:W6RP?W!jS4<.M=aU`I>pF]>ZDQ@\3R;,WrTP#@jkTVV_*1/Me]]G"(o-@2]`%(^*k%d4)*nT3;<5Jl*mmQ)peci-A",<TfKd<<i-5W^*rhUQsGRiX&-k=4u0d+Ki"%c9Y\=8?4t[6hG"(=3717rKZj6;-e=9UUo_Q%PI_*_ep[V\%?tp5=2g'QHRe3WXtjNa<rpad:[AYlTW[:+>4r9K$'t3`j=aJ@b&aN4`%GdcnO=pbXN4(W#6*VV_K--GG"a&.XZE%@%25E>^?kQ\+^JKP3c_4C7*@a*r'54,M+u>(bUq'BpPN\1p9"_!*qoV][No64f=6)$a@*3Phe\j'i3q3DfT?+3,:@ttB!L?V(UYCt8%9>%*+qoV^F:;B/M71qrkVIYHS:$eUGK.d9>/Je.RHmLY9P+BOWoN:aOoB`MAV)n^A-AtiXqF_,*FdgrO2(.5d9nZZF/+GMgZUfEU%fc\QQ5:OdihG`,A0F>*OBILNHp/%C/.Z-3*7;/FD,$31FR8dA4HjoC9.P:1V'((T?Tg$:^R23=D7@.s8M_fnS3m0P+Zq*WCNA<)+%ROgI]Bo*kj+(\WuIY1=p[M.9(o@\cb?+Dr%6Z&pW.l+4l<2Kh;5L5Wlc'5;&W&YQ[<^7?n+g`;jY("OMFicZYXI!Y?O>f4i+h^PW%DN`m`VM.lh\2sR:\qWmh=od+)+Ob).I]lF\s&[MuA$;EOF$rg?Tg>D<i/f84.WEIlJEh22AP%9P'7E-+Z6*FCM:ToA&"!m)#DkVp%V@9FdMqDR%=XVMc@:-1^Oo\,BCms$=)eVWi1.d?(`kX$#@h>(<1h46>E]*_n6o#tHT\_NT/-IAiC-O$2#J>hAi7Q(9B-PHdV_GXh%k-pu?<cZe*RZ0CuqjS!VP<>aEjHp7ZiqD[jkN'ea3dImC9qU&%D*EG]A+#cBmJOp$hm6sAqIn,;_qA[^mi7U%&XuHZqjn@WF2E/Z%"A;,/Q95=fR>jL:nf5#UV@`Ar$Kb3!9:gjG9ST5mBc:1Mb%V@Wd,*G@Zo:cKHcM7^Dk;gZN^M4N4;I7SNCA3c>dW]Kl\`$jBXD:A%GrFA<*KDJ;BEck01j#+1JA63#H-SYA0FWKg"IdP*6gn-jV($-,M:Un=S2Bc%EpZ=$80_<B1b0%6AY/$;I:s\u06T&f5eI\t$qs%O%=M.(P=]T)U>,%c4;Ac=/F^8Z#[kCHh_6.cs)LBRhhHtTUS,sgV0e,H$&XlBh6e>GRV>4iRK@]8+$#4RJ'(#o38-`>71dqkEjZ)^9%qTg,f+BC3U5^X04N)E$`=M.(0)/HPT/<S=PP8`S_Fkp[O`\6.\"k-""FHnif5e>8]'d.Z`:I(ENa`H"Z/65hdZC8.l27,2E9t[;j%]<MIdGo"V.`A5Uf)Tji*N/_J<MZu8%'VIC9ciR7p>K,kZcWOc<=ecpKXjL9D[%Ff#:<'ELC#7Q*$s\/.`3je+\b;ngC[Yftg7+tB%"dR25PIYJ5@a&QWg,g7e->^.<g!uNj=6i7rKdd)=[NrE;-AniU$*M4q3.jprDG=lH22SGUIbdg%@CRm<XgTL^_R'=%2iJHD<Dlt:%'9Uh21fj5_Pf<=:Cg.NSD+S*"oBR_;#dJ5<>_U9"i2_8MXhp"t=s[V-51*Bt8QI./`p%;+BG/iTT+.B4IQFc"fSn0:UCAKV:UF(<%3'aO?UtR1_W]fUFkU?dPT;\\*'s&[IDH^6tTSbQ*<Biog(t_;TPReU-ku:\YA`;-42jIrQ=Z(opdbm%;0^<Y">HaBNA,fO]74cqd%'<tM1<E$#!P"N^'!\1%&:aea@3iOZo_KqD+DQmU2TohtColV0Wa,6^-DJ0?_Cm*@(b:BiU,##W]as5`hlkO0\&sbu>3gS];`tZs,%2f0SAI$*!bJn_S2>/DhZUijo@MKUDakY7_lHoEm/eQ\L3-EUd;0$SVSD^j;@<0PT^Z"Wg9(d^TW7?]Qg=^6ehP[NJ[&6lXOVJ0s^%#g95a*(tC\6X&Ng\#sS,$:_VHJmJ?%2`-.i1.fr^V3T\%!<um6-Bm?6k#Gc&p7!mu27@N$)kEfNq_ClL`X8RLE+fDFaWq=*(04lZ%jd5`d1`6CN7^%.(#/R!=XAKG%i5A:2YV4A!?*%EP#8`A-(/&H[Z_jI^f3RAB8=g-Cm]Lel*j@3:?EqF;4%)k_.EekTA#i_)E@;ef%^oW]p;p9!6FrY<=c326ViM*l`Y0p-+knIoHj%q`1)H6"F1,>Ccj&e;1(MY7i3E/tb9)>JDbG3XaNhW:V/hTYG@o0C=i8]>IA[cfV%Mcu;qC/(_,FWu]04U#XpP,N5lLt\"78j&*.ie5e3UkW':(b4_#<G"R2>>de)8I1#B8a$TU'WmN*C7C$P[\SJKVdLpU7j?]N!,>1'%Vjq*qR0epkKD5`f&Emi#8=r^Qd:s4Vm1\=)Sn(XVB,i*Cr$=(WA)uPskGD7IO;FU1PT2YsT4jcl9@54<Sb@oeBhpc;n^L@!")UUt%h+Ti?(t7d81"A2p)s5:/[cI+D8=PdJ.1;VW\u%#ob,V=@9JfHU%r;e4r1q9B@SGiVKSJ`3,%gDoW7*LJ.21iSLQ[KZRP%)N;jK.H%Yrl<P<fD?l/sdhW**=OcU)pBs+V$^E0bJ&o;8T+GUdL=lADWe*R$)tK#.d+9'GKB&?W&019/H6=(,$-NV/S6lqWW$"/kq!l9K%Ps%]I)T?Oi_]*JEgp;0)'9/>hXY%E+qO'!FN69hH_bk2Qc0s!WLqd#N`us+d1Qu1;R&XeSjmp5Fq.)DI*4c%_Sj_fa+N?YP)gG?m4l[%S-j[J88i@CS+>l]mIWu?Fq:ORYuqep9l9ol3PAegH3fGKC&bL\f4+dUBc7Ea95]3i:<pOZP%X`><2"[KYPU<FIqsptRX/b#4^31?%Wo@IEll`%_m9K(&r-^`68&F&=Vtrg8Gs4sE5j3'';"agTFoe58*ghC=qm1cXS(<1X;Id*6^:)]XG>eq\)97a,KAY9FE;3/U1i`-#%,c8&hlt23G9V)>QHsUEom/1Ic?,$,'Z+I)pRe610B'c\bjRW71HecB\+6**E5C8:RB3J*!MHc\p4W][KP<OEOVI,kBcQ-@`qQpWd%Dh[GBg`UPs(B:qo>o80ii\=H]?C!Y;=\eiuIL_ijWMS!+;hrLKj5&3gqq9XC?^H(jP^"G6X4j0Y>h^j0hA1#Caf5j(T/+!^P8qGD%cF&r\gE!nKjhnc9Y?/R2"5"O"H`[P1]7"LN!GD4XcNCri./TF=W_HWq^,7Hj#l/f?LBKtX9jdRhjDr_kM?/-QP.52Gki"+)fof^2%6E^6+W=N1m=$`m/C@t\XrO(<uGPMhec,G*ZbHKm)g'Gdb:><2@^tj04I"YdM'?F7_5:'u-o*_MRFt:80DH2HU5&#+I-TQjhS85e@%X-GtN<-,`I6MO9k3&>rkXe.N.m^BuF\";^TokF$b!jXqi*8:/4DZ*bN!obbm=L7t"@o$>j\>mTDf1UlF"1#[0BXD8Mn<O]hq(Ge;%g5SsY"lHF&/=:?fm*#A#W%[]/Qi1a'rS[!W*F;(R[K:9Sp?q=.YBPD;=M,7:7I<kWXtE]gDl[5*=`o_[22r)h8-.#U6sKMr7rN=R%m\Q")]JD+3m9s-f[m4_WTm*sXS@.a"o0HFY4phJ+N=Z1Aht\S(q@n]4KmZ>d6\;aVZ^G+o3na\ZoaZ@f85ug&m-\SNA(tl^I04[H%`SK6/`!R:;f%Speq)n>(?@s<b6lPk]eHKJDCfgmb>MI+3B0^jhp4j*X-Sq',0QC)Pcn??(%*8D\U!X>Vcs',Lk5W)2o6rpt64pV2%/6MFY:#>8_]F2<?EnNLigJ^YA^A859K^r5\cFR%cGP^a@GU):-g7K#5r5+<"EcJ0&XK+BmJ'-t_LD8Z_9XN[Pa5)3OFi5Y8&6??I%B76m@8?H.KZbH?1i[`X2lN"CCTD)AFb3;D=&ta\?<V-G]j,-0NN/Mk<5.ou.gW&:DFnKHh,X)6]WXAC,a`JZ4nlS%lJ=R6YH*En=%md9GGQOh/i2aScR!J@Dj>7d7)9&c&u@)j8F/`g.h_,[XZ)_EGU7hAp*^-Gtp$:69#TPL$g-cB*#h.%>TQ"RO"`hPIX6@An>>L=BL%NN3E\0fn#C0mH@%[S(Rf^$Di.P+R9@=2ji8GIYb0`H?Op:"c^0Dhjb/XsCaKNHN..5\*([K<W9uYaVXcp64]J`uO"hj]X<'\T*q9%nI54h^u2s/q(2pP]Bt$+qQl(gBX_)jO&52Gp3)=>,6UJ60UPMG"i&0Zj?\V4G0C!D;QfC"=<1sn"Q;WMS\"/LAZ`01K&>oVAZ`-:%$P1rMhJs'Kjf>oZ^5Fp:+=.&@]Yn#NS?,=4PiuMq*8iF3=t`0MT^-L]JdW<8qUu</q(3I0=%LJf.mf!fA*q'CmHdFNou1D17L6r.%i"fCThONYK<KNnD#<V&JD^j;P%^`?j]/Guj.kt7(R,sW"orJ[iAUq-%'Y>da`#GDYW7HR/"`g6C=\!,6X!;3')tHN+%X(MHhSr7d%;U>o[=^.e,_/dk)1R#eD*K.7.(R[]0+>!c9/kS6P'?F8*;UCHO=fb?!hTCUc]jtF!+Y<k3-TQjhS82I=g=\qcCHF%Km^_$R7D3iF%=$*dIFVu;R"i\cF4E1SDf9B1[c;$F%@4\R_)rE7gQ4-;W6*Xo$n<O^S8jPPjl>HQ5_2@DW$:+c[eprdD%$26V@M]1hHkGiO[1'F;%[+[q^?^G+W=jnNG"2tc/_qCDf?O#3bArF-m"gl0rXG)UbbDnsECS0;'1&rj-!O9:i-\Zq:/HbC][+]GN0C-ou>cms'90cT5CA0I)%XtKclf5PX[Ba*mGVtH,Qn?<qDm>td.&2!oqj`R,=!oaS[ok3IKmFG*7:N'Ji0'JBtIq$I^i@SWo<I]dH]k`+$TQ2>Oc+rW036DuC%eha?\5[+&A?.<t<7\m/bQ/>G0nZn3[>b18$/R?dJ/c<NsiJ4T[`P1[PSeEZB$.Tdd$WWSb*3(mMTr+SDJ\Z>Y"Z)"Ai%J5t4=@t]%N[]XjP\FM#.F/;;b_4]-r.Q%_Gn.6NfL84Vh?]8,":SlTDo#ed.X=d`K,o#`\!1Z8q'jVr(t=5mMYr/H9R.,URb1%t-f,,kkl_E8%U,Pmc<u%`FFL5Nfn<S+^.mN,V!?4=uZ6G.!!`QBlV+*PrF5]alP+@->:Z<lq9\(KB8SkV@r:$$Cm&N=H3rt!%:fieI:k&f1YtbtE%W92#;+jc=&6!*^@Pf>RHH]0Ll(d7em/Gj`hBMUoA.ooV8BIpeeH`YP,'h+Y&+p8BRd()c>3MYi-?p5#Olm./OQ4rYD4]7n]NNQAW%J^[_C$2:\a'>#[Ok_r&/O^a<Re<P*D/d^spcsXoh_qCD'A6R`o\VRN!':W<#62M6pq/\($[;*HnDrUZFn9tQ:l'#TEmH<.8[1Ve9%R:KSic(R"9m=npR)6hV3T+IGXmcp_:?'hq'4^/S8!NHBDcrKpdiSN\kN-O8)q>@5kTSeug#sQ!Sc*.%,riBD'G)66WT=04;q"Mn;%T&4e&<;GrW@ZWX2E7@b;d),+_HK@HgnpQjJ$UUS,4]r,d*hdm^$]?AaK*@Jb!L"qd=Y>&%BME@DJ/OV*r-C8Z7TgM<O6@7fhF'Zn%;C7g`$Y$_sp#)[nB/*(WG1=Ifg3]N._re*K8^(@rYsI^hJk6;(J3^<3hO(Yj%"!HlP7b&*YG2;8gTC.5T2;/=l,GmV6f66TD"(/d%20&6$'P;R,lmDA:95]5%HqJ!0lMN!!?+KbGWI*i].Z8LZG<mV.map,Zrb_Yuc>WL2ZYQ1G-d';]Ni-@_FAF!bku[!=,KH.452u_(%X'keCen_SBourjU"^OR)g@=-[]rhO@<D-iKAD)Xl6'J]/n#4?+#jNfA>t(UH>\g1:6Be7n_<r:#=d*+FHX9q-A1?^oA\3RfFg6@T%[^4fQjdmaen`bI=l^Z&nN/B/Pclj1K)p.^ch.BfK?"jV%G2"FcRNuQl^LpSW$0GOSJdbhaE[S"o',[Df?*<@``%'*^+N+lqNFBZ9%Ik72(aXlbO(G/L<eN$7+Edj<sW<:Fl.G0@Z'Q)l.)%>LT431pd*^MtRQ+C@b?57!r%b5P2@4,/2D]$r%FHsBXS'R$#<lcR,NQK_0%pE[9njB^bcG7K3T42bXY>Ep.BOB\!^DGXODK#Y!%hB*M/hF*\&cterG_J107<[g&P\D2'qAL3_QKl;=1k-b(9HH12^7k_+spX44;%Wj+&JgE<a6"FXUm]H&Pp]P!2RcrcTi_WDcu<B7OWnWLjkJpA1-H:M\7*T8_&X308k*lk$VpRnQ2J@7)'B`?FSFGRIE)p&L;0SUU>%EcRJOSIRF=W<ddqpY&+pQ+_Q$MQ*cTC9dJsY@Wqr$%b(<@,C8c:Yl_Mp!>^bW5@g:6rYVG8lYL.mF$HNOJi9jU9`0$p&3bj.dQ<L%Q\7Y(X*&OMS&DPA7LbVLi!fjB?g%kK`"e!.(`2QV4hRUB>Ol^`:atTZA'gmB>5'=YW7Kc/A)'Re[uD:UKg6gh3nL;h-R;t4]VX#0%S`C@=Ej#'Jlt=mG#oKJEmanD2>0DuD[D"^R"BKt3gC[J%BD7?'.Y5Yj$9iJ&i%=^q<[E_sFL4,"%Fl`UH3oThCT%qh(0^)Wgg3?J%@`o[i[63>:IHO`!c;?s*&84O!-R8<HKVb`$f/,P@XeUVcP&%Z4ce%:Da\=H:,t":#g+\n0[5Tp3"k@qQ.&;&g4+$e3=&:=Keksf9%8\I-:l)GjeN=L,&+e5AsC\jr'_7K&pl4e>t.f[IGXbF`qKP]gSP3Y^L40#1e)Uq[mJUmq4U(VC\AmCRja3\LRpus<jfhQ3/A9^$G%"n*o(I'q\`pg-%ig3Lp8%:nG3[G9epG&"^lO&pg_di0GAP(HG5lHQ;&<s8\@FKf6bn<S+^lS\C#(%X%3CErJ/=[PbV)5S*&P[j2/%8G%'/nd_l`ni!bULN]uC"hSW9:$!Y4P"iO0JpI50`=[F7.&!H%N'`G'gF/F%"<Cda]^[MD]K7\1Tnt<tL"/1UV/h#gZ:Y(`OS=*!%*2+g?&k[Jj.(!Y&`>C`M5mpaJn+>%,["Gn1]>fd:<X:f-NQGnV-LG8/[D@dL#X)Q0:spg_R0="qR/<"qULPgA2g30$GCO0]1l3NU%YhB=F<(a5Bf;(P\R.kZ!*22W_"dF+`;.S'd+/MecTM6r(GB<#J21/o9kQis_s6nPfK?@>>Kpm+9"nN3VWhS_JU3'ip)"eV[mQpk@%!<$"dhR+(OhV+6kciKGW*0ZcG;pJ(;1cBi?Zu.Iq+`qg'1J-UCPngEe61Q9dZsX&PI9LXN]j+\K/RJf5XH$WR1oAfiB>R;n"YZPV%+toWn&mf$I-$In=F]'W46F!0sE>G>pMisSU37oqhGT/I+.l:Z^"eAUp"+b`".g\MHV@pLXe2f#]c;;le7D1_]kc1:)N@sQCL[^UN%m41$P.KuAQ=9F,1==X\bZ)//GB@Jsk";4SYWCFN(*Qb<l/W#L2kGWNljP![K6=(""g0k-fAn%S^"NH<km*8r'U]=Lc60B<^jntoi%K#TW*fWCq"Bp*+1SI(VhjrD>9#=QNl8be8;'^\_>d@3Co)?l[o`*4H<=Yk:s+q#=m+)Xu6I9e2DVP'+cMP$On<(NfCekn988!T9)%+<1QUQdj\-(CWrgiZp-Y0mNIc8bPRjBhkqQ:Fph-@4[Fll<$H2?'JN77O0BQYsq[Wb*bqi"Q='.Y[dUiCs3M1-Tf$,4eh]>7m[f/%),W]B(QoM]/iBZ2j'LUg&7e5_HYqtMa0Si+&IN[0>(5Aap#r<h$sDlS:l%afaIA?>>uTfYJ?%slY0t(S]SHU)7ri@=,NRY@9t2b!%/cSC^'<WrAqIjYg5(B31l2GPBVJQiDI+;f9/p!_Rp5T'jc8+p`='PJU?)o0bFSRY$lSd%F^:MXT=s"CleGWC!l>r"8<<bXpTeASg%q];`=F]3\`0W.L4p9C[c&u5&q[XZAgb)K7/B$iU*J(>iLlp(B#0Eodi,W<cX?4nb%Wd)6GdXRYX?i8Cl9>%8H[d/oe>MEo5'3PEE%*,]npq>,8#iXrOrIU(8#k_`eQlAnN?2Jq`kT8hAN9m.]3;*qYi?;LI'jF//5D0No/IRF.^iAYo.`6J%>R,&4XgG!Lu\c3!+3LS^)%o@n5-p#al%%T@W@rp&H+*%ks:HG@`Ho5F5UGCI`]T&9C,<e42]n+jNkF"r*WViTO'bB!HAj%Dq8E<5T80`>JHeP4flq!X[>4t!kL%3I':j_QB_&8"5grdV,99&QA?\'5:H0P1Z&Wfi>F*h?^5<i_D`Pb*sGD]\Retq8fQ:fq0HLg*$]I9=`V4cdnj+/G1giks>I*r-<)O%gAUp"D/"W/"#db9$%15AIp#j\.4`qSE:F#Yf!@Rd(rC(bZ8qW%_o[c:I=.3fBZH@q/S/(K?_/U+/+==LL(rEQ6;[K?pU%R4LbV4t%q:/]i0a)$";k&<^IUS/j;8-XY5?ti5g,O&-i7d;rWOK8E'@Kn4QoUti_2^Ok>KX?Z!di&,/kl)g(h8>Wq'OFrPRj_\<,^s['8;b6%lWuNW!SO1'VDt[$(h!.@.+)1G"`F`R0agOgdg%pj[j/$r=$86d8>:_W;E3]h(_a$JfkYO#<-3um6\>,,?0cibII#JWG&D0(O?lOq%i<EgQm%r^THb8\2<d2a+)keR4!XX+a/lAE'Hc<3p3NO-\r@+J9?)0_uA"kjZVgN"+?0JE9C2Md9!KT/2App7k/)#IGB(K5B)u(kI%asoX_jKT003lR.\B8LK=4(![7Qk7c"FcMQ0gY+I,2)gIAPK7..8\)$hB1kHW[71oqQ:SiibnDSa>ieGV,<nk">FU[#o<%oJJ1MOI%;;3_$?2=K-X"DVQgbCEPYcA3J;HIL93%fKrHm0"/G"_nm;PH&KgKsBVCU^K%UI_Vk9boL[mOoAiDrZW(]C8YQ('eAA*4Er>g$NVq%7(j19@rRN]93aH$gYOiA86-2`j-)l$4/;jhA"k(E1Um?qlaVuu33-<(V7tn-]N-ZE;VqR'p[*1S!+GKoF9_7;8@VI2?n;'TVf>/a%5/p#QV?CfdbF8@6qQL(`4op;<Nm.eVOOK6Gk:7tT*S0hlHb7a>22F1Xj?<TsXi+F_R]K-LPNZDp*8iF1g+L5/P7NoU":XuS?`S%$%!njc)Y?plJ?su:sC@u.G=2+=]i!+K@#Y_%%&=.PK<g-P*IM*[fQpZ,A\^jDm*^0os#Z*hM/G%?1.Y-1\C2^rq".JhYTbk>q-TQuA%6=;#=K=&R$0Uo.9#*e=bLE,M0j]X=R[<t.'Mn-]U$9E+Yh;l%UYaaHCD&e24T\\pNpJ'ua+7(-,#_A+aYVMPkF+2S<_1NXHlngHk%Q?$i/^e1ReI@*-qTMq2*c!9p9?gsP5c!9q$@,XEKU1r'rBNMnNgW0VG'*tD0TTb^g46,UG<D]AY#<V&JD^j:a#mpd:G?YkgW1_V+%6%2H2a_eM8VMdd,a6=6Y`6QBG4@eRo&;Woo-*A<%"j+ld,X[EKG0C!D;Q`A9BEMFRK3GO^%3gsmlWm^>>Um(1\n[=MW:T54d-cO@%'Kb#.,'A&e8YdtbL3-=GK,mm@[kZ@*)D$StO#Ku+M5`nA\)'29(SNGhW2g,:LFSAA#e_3u'VHJO;eHckRiS/##8hG\5["VS?0!-b%;Qa:_BVuihW$>c,&(EnYAPekpK=VJQ<eCBTjh[EQB?VGqn7lHjeCu"qNiV"RGpLeR%OnooS7kt5g2U.Wo16+9k3K8*.\tMLdplA^%88CMrM]*,?#])5O8ARHl)L_!me[X`_Z]?q$fHGW%)jBV=5s*oH`ucaT[u!2J\+]K0Z]1\/"/(pP=@Iok^'HkVRn1B)[FW:N[aaUY%/%0qB'aP1:%PK9K^':rsm<fV2JpSGH`'VWi)g0)F/.eo`@25UZ4V9\`7$1ki)e>b9Y..eCn;<W))Ah`W4hRUB])ls/=.bBrcr.n%%Z,#'$Vppi!/AqO&q'U>_f$P@te`RYr[ah'@ii4,$DC/!\UpZiI+oLgeUc;>&UcQ>DS600M_H;U#eZiMW*QgEh,6Y"[/BCDQ"bk'm%UcJelG"_qn`_;0I:T.%(+=EIVTJ2[?6?Oj2BSW=Bh?]8/!0Wl1N>.+IQ0JpOfL6;0/`k\&J')m8#2,]_,2&Xu'=),Y7QV<,oHk-*%8&=+2nJ3AsX-2fp3nQ0Bn<S._Ma-/^"Y30L\,qet#SY'bYpOWkd_Q_#OH5!?>WMZ7j2u@9&>$lG42qeL.F5`t'?X8#Bo8`%aG_F4%O<.%PZ&=3/]Fb2S.Hkk"hAW64RR)95=kGESpdnW^-(iPUJkf>tWe/T"H]e#(U;71Z**ijR%T:Za8tB7-dC:Nj:IBaT'7dQVBOC4j%q@m^e`Hhl]`k"gQO7epn728=*7"U:1CO@G2K%"7%EhA"S42rAf`[mh*>&QLZn>Q5]B?]W+_7-D9hXXmOmDE7Q<*sEdfD<OMO@(nl%N7iTB-#+sa#;sW7KJ">XBFX4.17gkaa?8c[:^F1YHphB5Y"RI[+!2+da9O'.faPE-80;;mS)j=AqP,Og`lUES3]Qn%O>@(EnkoQh%?T!Scq<udH?,,n4W[5hT(@1,?FoS"iMD*0)Vu15m70kfDqKssJdCEMuk#&nV[W\>?KEPb`We>MVR]KX9OJAo2]JXK3AsRq^I*224%4f(TAXE,_`M<)5]_'i)N=kg?g)!b<u9q3Ng;;>S/fB5ZC)dghH=kec)pSA)hoKnHhEUF>@)2'-f:k-R\Mg[.!pLj?%:c0FuO<N>L%lUhUYQYO2EIcPkN#EHKSZ6i>\Qbqf9R,<@A>KL/H#S4uR-Cs"BZYMM5,'=9Act),/lRqA]b5FAHY.m]'fBI-9IqC:,qnV%5:Ybt5%H`!^%f'G2_IFe2=Ob[*o$8X'e@Dh_%;^YQG!3_,bY+;klL3M*g\\QA)5FuL(kbEO0jYj\bpH65E`S%NI`_e]o#a-S:6TQOM6=;+?%;M`<M!b2;j/#R*raR!Ll2qIk/44++!#MF"IjU1OJI6P(m^+TUQlCD6F=gbN`XNmm<",K*K"hf+2^7rLr/$]g?ERBdq_->'f-#]]?%f?;?4["@-rrj'Q6X6;6e=m_=%VOBh!qTEV$NN]D:fo&HqdnPNTJ^>'2d!Ngubra.\.QYrq*UK-q]VSm!-.p@_hR+[-9el)VJ$BfY%el*kr?V4%6h7!`t/.5BTg1r*GGEqC;Zh$Wl*FT,t\9@Lf`3nX*kX0--YX8b:2C@/+D_GI2'3['u<@UdMq+*`V[qsFg*"(@4]XBs5%[G0Ci''bGf]"nG;f3#[SDcp+P%pG][*E%EoP\<d@[uh;Y.\aY"T_FD[luqa>;MAFib]:D!maqI0Qi40HcHb],Ys!HsM\%qc4]jec%lHT4K>SGq+N=8jVPl"'uf(>$R?c//sZ\%$er_d!fY7^['kUIP1SaWOS$)Zcc^1t.&mVFQ;MDHC=!Xn/8@WgcaAR,qNB+5;n9E<pI%U+QDC]lbotB>M5\Crgt1ke*Ve`D3hJSJ?!(IlZgfc&^SLCToh3$%s(uK&.smDp_CI<S;V_k\,_c_HBL<S_%;bdIrUsL]q9+_:09^%S^]+s4oDe&R;:R>@^2!j.jCc2_;]knp^&G1>%Bb8""WLGSl01fD8<6b'$TU>Z:Ut*Wh_G,XsuBd.RH#p)^JM.6ufVnJh-BPlm:tK%j<Ub0\jir)cEHZFD%io!QBYEs(0]CgpY,/,&Q4$QR9!Be=^;]'eWi!mn-%tiet^)s:BIRKl)R^2D5b]I?1j6;.V"KF>@dpn8umo+%lKcR!g.#M9+Q+&F_*[c.9Z?ZqBT*:eW]*ML;LWJ_ak-.L28t6=Ik"kh.O_I$12*YGI-MZm[!G4gPoq37%]eA0St)Ha4n+h,'ipJj%F#54V):pP8q@e\o-CAk7O[T/u&@?!:aY(8Kap=nH:)PMR_C7c9,D%r1LaT)G/dLBF87BE7_b\FWAmE'mn"rMXBaNoYA$"%8V2RP%%lbu1n`\G/+b)!"1W=2RSJ3*mTL7tMQ+g+>@@T9R@jR+J[2q2R*)_:'A?7CZ(+"Ut:qo2N?d1/S^]b-,;Y%$8P<G1/!ej[tFf&0rV%']<iPF=>\l2ce9e]i#8-5?Ndip5PoYJfRK<GS:?'>_;23dMr&!>ZLX?N)&^`#P"+#m7K6M)[keV?5>ol#.&!+XtbhbZ&95g]FdL1%<^H3GWjb'm*EP\]=JLKh;Ll).dB6H4QEai*bKEchSR@aWdP5?J-$E.9_&!.EDACseltZCf:9^mXNj6S>FppU*V'Ppn:&;g9HA@j+%&Gj1>1.esBKp>b/q'E`\TmNi5GBq/3lNC_:kS6`i@DU%D-"Y^FB[SD3cl9X!Jt`Xs@Yqd-el9$I\k>-d6-iRcDsaPPDZK*TBG>5e%Y[d=pQEokW1\QY/C7SX25A:)&8s2(eX!ubrk(5BTU1^N/lg0M0B`H5<C_KHTZpXWVCJ:udbJ83$3An&K$N=M:7%.US"fm%c7gTfM%,ES+P3-+/EjZmbt<*1mEn2+b/=(W^:_46Ke!sN8@;BiHPStbp;l(OE"*,6AA;"+Un_Ks(5Ll,6bW.`=hFd8B[TXH+ug9V.//#>uD%jn0=iXsAS0-46\%$_ZDa\gFLKq9tqb:KnGrV>RpI9VkO'YC&Y?"F<D*,V4[bMH3rbHBNc1:'>Xd&O0#aZ5WL2@LBs#S+KH)2m(5U%]EgORT`+s>Th5s_67kX,GEb)o![\N'$&>)j-ZQPe/One:#WZ.KBm'*9&=-_L1/[rP%n1n7Y!NR$PB0\\#m/ZhbfN9n3<O7Un.amh%)ho>];IWod7ZJ+[d0baP:_-/C@42gd^eeQq,6<BJ"DWl^2aKK0N82@5@)](6UQcYg94(FUOP:;<#TZbQ<ftaqoDH0_Ml;nUGPG9.%dIbm8`Ln0=/7Di-BJ+@/+JE,I2<u\d!L]j3c4f4&&D&OoSn0cV/cfZa+ul"k<AK58i+)Cn+sJ?QW[1u8n>lmp9>&%?eQ32gFT2/:%9BU4l/KNG22K>6[4p].<_HQEW-/dXY\$InsFY@T\)a-'MAtqO=&ic5**m8OtHKgVQX'"PR.$pg>J&n.gHjIp+>krIj"X2rojBaKr%%H*Q$V'JTh+_p"T4"c3OT`*!QqUCX0j+0@\?V(h3+_VnG+-YPK3&(AO.'o!C.5APLGJ$nID7_*Cn2pK%%_jH\->pPa`:S5?h2$''%aV-oF:Wi<QS_o7Pb;[*_mnCoX)f`BbPOkUt&,Nd2j#b$=VbaOFVK0Bb5C!5&oEh-RB@F'-fk8U6+]U?*Li7q1='MkB3mKm\0;Y<L%Oifo/o;,V/_td2RFQ7>Se8\aRq,.Pc@jGGQOi1JfQ"3n;RNsrJmGn"?P?dELdrP&Xo;)SKhX"+c,C]+-dD!$#r4PM<oMKQ)`T:':%F,f?U$,i^AK&2t3?dZZS("qc8\7kVsk=\OTCru/AHmo647;HQ!%d-L<iORRk*@5:5/E?P(G4=s>^6CtJ^aeQ->4q%6>[8(=?]>P=%qfoj),hI>K2EP5h;3fP<%eP4PSY\H=0P+lGn(X^p8Qd+TGf#]9o6f-W!1a-V1KL_90&86'0;V=9rMuX.NX<L*9!m]pU][Iso=h>t%RQVWEAPbEqb)Xmk%[aP3^4uff'LH#)_!'X4[qP<SWpBj]FKe+>E0_,RL%pc@Qr<F0[\Fi\r2PqEW5g<8eon9gl@,@rbq^=nV%>\p%4]qTko];WMY(q2)7Koi&4BuWa@nhAso&3IR7Q5P%a2=a4psS,!G*]iq6b?hf>Y5R9L5A>l='S2O=-dB@=@.Yr1EJ/+8[RToVSf55%M[m#:rTt,^3gM'60"&HJlhB,3$EuXKj5ElCTl$j'GB_"F>/4BC3lR&<G3a+W<)3)'J)mKEV$$p0fn_:E>fqLs%#7Ine/^/a>Y3]r%O:^<7jA"VAKZ4a\p_Xh7QLSpn8X:t(M9&9)TW0NaS;qBZF#pIJ4C%0]PL<#G'&T7e:?jD:m@'uE1cj88^!e7YH3s"ri^puEW]Opd%Nr-nQ99ikaj5EnVSRbM'Oo"JkHr=n!BsK5!mnVRablQ[ulDIO?AbhOA_,jDF5T,e#:rfo&LJ*n$7h(\LAA9LkTYqdOm@!12,WaT6%8I78r[I)20q/@bdK=.:d4C%/r-A&2VH,dauN[IDm'I!cG8JJ#XK&</V/4u[ih)QN/29E74!iq!p_ke%Ul?]r0E%.h[e)=3FRjCsN%ek!J1Ojok#;K%jmaf;.'M%4^Q!T$_Wm1MPWE%(sC%,ZnJlHP)WSP*!W/aIYkPX<kn#mer.6oFZ"_keV>g-+KT;Nk@@3Y;7#`OlX2%j];#2V(?+L=ir\W?/smA$:UFc0lI8s1[c1HU1c)nE3O]0_khCN6Rg+=Z@^pHQ=;?_a&8/,^F[>Clr`8`Rm:Z_&k$B"hU"IKWmYHj%FCM_?LJ(?^m7Tb01b7c!@b+cI,-rncAi&a3Z1B/8S,kqM="s(TX/e<7*LB1/=[Rf^'7dQVBNGO5b?;('.V>Z6DDFj?Bf`SB'>(k@%>tP.iJJIg#Z24$_ZEB&8Zc3c($pU8Y,l9>n]$C`?dI<*H$a&M=bG>.XV46*gj4R<;TeWXA[u]LK[?n.%oUdG(YW0XdV'amg"e^%4%"cNpHW[r7[;2e's)DrJ9No=Lt6.h)B(-Q3u'TH^-OR6_<$[0j@ZIC/CY54?J1a-d/UUjo1)HE.]V-0o$A5*lc'T#kq@]c7RY0_7P%P1#e2BXD"@PGM076eOu$'.fN-eJ7k;<LE7qX#8TWnWZAu\LYe"e62:-/4uLti*a$Q-VNPpLWWD;mRerYWNEsCf0i+T[2SE"UngnE%4Ei/)'toaEY)/U)d>;/W;b_<".mN.+4%ZGS>EQZsK.5-?<YN(jX&=aIG:-gaH4((D<Cq=WdT1&ln2=9JYo6NC]*Ea!.k?e81Jq8Z%;A6Z.A#01ImR\lYobAbG9QX;R>M.b'Bf4#=YPOLO":UG[>t$5i-A!c!Bk!DS<sk)\Sg:l[Dbb"BP$LXi@<7GV922_YlTM(-!J@IM%;1[(jGR<cN8V6VI%G!TS@D,ftok#)-X@_Q<csXlsi%68/(OJJsJiWS='0Xp9:R5I07R\(b3(U=XJL4$o&7nR8=`6K,8j]</1Rp"]%Z\1)LInu]*.2&U$X9to>HlDbULbc"g]DIeg'S@rOZ:*58/QnOM,]2+Qp*WM(b;#S>eO-%U)SPI"Wm=iQJJOd#O=&A4Qmg?#rL.8S%Bno09=!rAG!f[sK2*gh7@i1d::6!hsO$EY&RFZi*&'9,WQCe.dTe,U##M\UEJdMn\Wj2gj,^&^`=mtYHFrNO9qCjI!3)in6JE##^%=>^,49mbZr.RAGc88hK6f[3r:;[?(VZl;;JmBjh^e!f"i+`htEhGqalES?s_<=^tqqJ"q&"j?YFMc=`boodsQ[Is:V>1iB35L/k8%9a+>+auF2QldfSdp;OXC4c?hOlAMZiOYCe5S!@kTq?tZt2BmHs9\Ug6m=^hja)d\7U'aHP;G)nF\>]7kQJ^";j1$gmnGE%e%_mk.%->pPa`:T@_h2H?;a`B_'ccb[@S_oC4b;[0aG*c46Q<lc1N86@^>eXQXO8HE^6Ti-PB2<OG9WM8GDLI!+GW_j!qXf'&IW8+IGC1Ru%dk2cW'rG>Y_]`""i]hk&$Nn`iAL=[fBu*<)7'39cg.[=Qd\rdP5TcVWD6GFo'"d2i;MA64%8a-@InJ(+8b$tpr[L-6%ESM_dD8Qj%$ZA&WqO5KKqb*%EiSL\TX^ER^Xl$eCGBW="[#aT.T_s8;>NQFJ9.op"B2tGl\^\lJnO(CLZTf]P^K8A*d1h2DU-g#p1bRE8H?`(c%[cEdPq>4X=d.c,#<m].HX`+!!lL8N^D#$514]!Yef",2uaPIB32sWNOb-eqN^=/Q:^8h,\^r(Wr(Jqc0-fM@[[&b1ma!Z]RG0C!D%Ej#'JXB$QKc+G)f;al0$5i30Z)YgI>i<DHrO1#u%WE\M8/.\eEp:[d_?Y/nqE&n*\CUQHLCl_4Z='Joj0'SJr,t!;*'7dQVB[)%3%lI]t_PM*C9[:"I=[dAnkFYCCT99gm/T%Qti7b9eE5k_dT]hs.NG3-2Xh16A\KR?Yo;hC>X-R[b'^N-XF'cVB9*UJjhS;iB6o^+g,%Z`\$odn]?Cd#M?in]bNChcil(fUE6"p;Q<toDs>eZ@/uML]Q1hh,/CSiCP2"dJf6#D>Di;f&<[Z_=`AuH3&D@P,N'5f\P"%a7`,5%%&$tM(X))BO9E5=NFR$f?E<ec4_Htpl9lYV:H,9]aE#pB);8rp9j;TA`7JgTka2h+[@p%KC6-QX,os;+A8&2W!q;KgXnb2"Hbk"[%h_U<h5U,ofgVu\u4V(;p.+bd82L90El;=L5o%<I=odgC&Sc4AOGU):-g7K"jrPHrdJ^um7LoU_jIu<H'LD8Z_9XN[Pa5)3OFi5Y8%&=0:\lL&nY>5:WNlQ/*Dmp)RsE#V`ReD5BG&W"@Q?r3-`$:9pk8UM-elkk.qb?;9?6d*/?GD2=W":V:cf6(SnKQc(#jnD#fVbQ!W%Hb5Gch2W:iKLgIn5umO]6K>(4I#O)/aFW2GY4WE4p5238eKi'\?uXX2-O>m^Y**;N5ZcsWG,u+ao$#\PGk"7Ze0eY.Q$<[3P?#_Q%&fp>+"2(I8gEj'i46P@^T7FaZQc[M'?!4<-L2=Ilb'rGbH@%#iG3)6_<k%/S9d$a6J3d;s/Qb_J-2U8UY[\14Q?'*oi824$=5tk&%T7Fb-pE$dhq!Thg?+848!VcK`m5VA_g1rY4N=Zpu_-emA"2AhUiB]q'46?N].G&_LCsZ3G?'RONTMnp;ElotZSAK2FRBCZk?$L=t%[qi._Y5E+:Hh66V&4fAY-SP/T'W8!`$8oE!P8qGDcF$u1_E_2Yh%hVBd-5=![,e],OB`qX5?pb#E.=t2\?)6,q;krWkJ\A`&<h]i%>Wm<>P*8m;L(YNoQik!t>_bAE>fjT9Z3;c1mBP6KPZn<k/TWAa!pWBDg7cT_2aG)j<sq3heYi^&^fe2eg'Mq-1n^ueU`Ip9[kZ@*%'J.jZD2i?8bC+/#;(8rrL"rdr/O`f->q&<+P^)[EOK[B'K&r2'XS&[Ob(jR<C0fA`XqZP[j:L0gY!XZ5g8W`4Of`$ep8[:TYhj]X%VL=Z>/>0-[Ug4[[F9]\8e5GeD2ZW5/(0>-R3\KYn<smB9$,Bb;ZnDSUl#F0Z[U=g'?7c9fYd?ba:m)"3'nWe[JJZ$+pjuZRg9eb@%dGW2[*O`#'2$%D/.!?ZG3#e(Jb<R"%\bL.f!noIh46?VKQ]8*%lWG?:Q2tA2#`.R_4=T>AC)L\p/Sigp^@$0h@^Z&./HK:rW85K>%]=n9P?,PK2+phrCpM>p'WiXIjagYtS.)l>9nrHgXf81jt^7\GT2Tp3G,E0Ri&Qaku3i(;ufJ.\s93HGghmV5i`ES88XaC0*2Sf[L%e[AfG(TNHT659\qCHo(^RZ>[LZk^">/&-PV27o^SgWGj^eYpTQ!GUL?FpL<[%4Mcu+*ik`R#0?.pkr.>n/SJdfWh<+2aZRc_1J*=%%/e(5L$'9mm?gq!9:69TTCAA$_+^r4^gF1ZK]cI<d1-m3]b)I7#oLl3hL`LQ<UuYJ#<V&JD^j;3ne7T.0W9i9(&3\ER.))22;4au%UGkMM3WXl'`*6'*X@fLVk[;FNi%=%O<.;],!]GX>AH`]V"X[d#8e#sFkM2C(,WgP;-hnmB@8/%0`$TX>^N`Csp/Ra5SUa"MW2iI5%W5"#T=Jq!]<-.&Y&84VNTI]Q`-r&8$g69V5L=*n7b-J5FK_?+%Z=66;KZ:le[)`$%<`-el.mi/:"eD^DR5:;7$0K^`_G1^LD`Q4Z%fH^&<f'&"1'KD(@QZ+%)1U2iNNm<F`'e.`/8mDOtacb^K$&s+e5Fd^96Ek%A?ShdoD:HQr5(_mSU<_LDcrO.7CUqT25\b(Z^OjB(%^4s2-T4^gH7^Se*,3okV%]u/2PoG#qAAD+);[?)@GP+o.Y"P'QTtS>>9q]t%>=/3Er4C`ga(N<m(Wki9o`nKmg^YdmF_Q<thu79U%3c2$VF&;hbom=`o:Sr:4`W:VET#DiFnr>bg[63a+IJ(a8b>cAr2B*nKf9<$RifU5GqlH!I_#d5lJ4YuBhU\85>#X0??q05c^Wt0R%..)L*d3itJM1X*N9JWdf`7,`K3*tgT,YT[LC>s1!]hl,Ag'\Og,\F0tfH>?o6gZ;?!!9igH=PCsI`;-=:PN<j\W.;qrV(GqYG$jG%l,GmV6f66TD"(/d20&6$'P;R,lmDA:95]5%HqJ!0lMN!!?+KbGZ.j%nAaqD>0'MBMrAo;H^WdkVq$fQ8G4"nf6s9<3nPi2Smce4>%rMlB:jS0A9B3[]L'hlBpH;2u%Slq7'@&U$jf>4`IFbeYX<\9:sPI9,jdU&-F0(5a\&r>g$"^OPChEl!(X&>--dF%A%2-H,JgKE<9%emp5n/S2PHO1f];>2.`uo5[V>q"XL8gD_XTX2]HSQ6>B&$g*FZn`/G;>mt"Q%1.44.*%c%BR.@*<auHu?"A:PXk.$I@X$YnIPEq4%mli5+m-V>iLa<<F_o/:!9Ma&Hk'HA_1FcLtUBE+1B3@GWrnK+0gX(VdD-SQC6$uZ>K4ir1ce<u"Y#0LFOQAK%a!D!P_1HsM=?Lk1%=k5t3=eZ6R"<NTCjD)\]P$AUi/og^73s`"3=)ZMkQ1*0fDH.Na:g46X`iie,*u7Z/7$dMmCR1p9C*.Ou.65S]'_t=3-()/q$W=]=%mCnJ7nU6E1X4pt$>Z>3Un"[fn&G15Oo6)fN7F*qo@q1o=_<)Zt<B7OWnWLjkJpA0BE6'0(ZK!&tAQ<<Yj&)k(crCZC>F1F1J&RCk%Lh/:tOsMBo,]*4>PI$LW,O)05H-c6=7lAi)AMM_8a$465q-$6:Posc#$Kg/NHA\"Bf44!2;8MN76rYVG8lXPW5I'pRW!!O'Z4e)?%N.rH)lfcnc%Nm75PXh;<!1RcR:alP(:b_Z5Hj'o"MI\5o$[.IMhGTXkq)<)f'QfWqB[BT/Z]d4Fp@pamnq5S3UP;AaOGJG'2<$1n%8QI-U8T_1H%e,d*Xd<E[Z\D)g(s$-@Yk/h`qg)N5Hj:fKqp&O6(^RBn7LbVL?kik>\9deU`RX"KTJ;E9G3>ftRcIX*_6IS]Q%I:J%k'GBNRHpZB1?Z^2^8PIaNZ'C$5Via.)6#PB/6s"'VU<4t*Apf[>h^QL^+NJ_DLskt)=l;)%U^p$]omuiDQp__M4e.bq$.(g6=:f;%SXdW&0USq6U6FeSLD7U.9!kIF>0V-E*RuV&'P6/LC]-sJ/7r6:ldDi3m(7.3:Dl!fV\B17.Hj0rhY+I"=;78QTtuWV_cP!e:!kD#%Gdl:R^j?DL?`eMLEj)#`hcR>!h/hIWaCrpqXdA_Nl;)AF,6U>2ctQ.c"guIPA3c!3G0C!D;Q`C#L7Y\Yd05ii.!ij16a<Q5;CaGe%A)W=OHFj6(#FLOG9e>V8SLed.DB!.c3Q]!G@lIOEDu[+&MB4KF.(5:ABYeF&"]L#GUFV]jI`7LpLLiV*OX7$33_-/KcEAbOfKU_D%rE^70d1g1!`SN<W/Qe\`K-qjVi<n_<?Ld+D?s+"G@u2\:&9p/QPNth![YkIB"trWEkQ/#?@]Pl-<a[JtRNM>a3juiNfS(DhJ$GG!%M%LE'p-B4S''m[tBb(U6rEL%,B_m#U-(SHY=gZjP.?krgdgG6n>k(c4^0&Q?_@fT?n(/t?b#rk@RWO/co+!CQU?M0BFCHa;obD<2%62s=QrE)DC[1t@Og6JM]!L@sMPF10)c:k8q2LgRjDCqk3FECA98`LVP's3cfng$K-?j1:n>.TPs/f/$@QQa31kf$;,>!mR)?6TS[%@MK#P@^SU1P,aC_f;Ng)#X"e_cj?7oFL\92'8*&#dt5%`e"K)Q4"9Bh+uN1NO46cI.&j1Z[uFQ=KtnQ53jknFk9!tE1o8TRS`C@=%Eiqc`7]oY93C[bV+<meMaB)8<dI%m[:'uP?'Qg?PDeE<<XpWb.k[8Up>,Orp6\S##;R"T0<'\8n;CRaDUnXU>fk[,m!36Y6pWs`O%M/*HX0fH:@8$15cc`T;B/ecGhM"M:7MKP*O)=&a*U$A@2JNu("3[:W5]3Vsk<'"`(DM-lb9hM[obCnO_FAbHq'=<H#M:BO+MFR?=%E`*0rUS.4A3]l>Q@7a:c`!%Xq%ppd-^*k5N.G"9N71VA:`K<t;M^Yig;N&hV"9g7*BM)M5PKAt54:.!jN'Ehl=[M.J0(Jf[dJN[E%Tnp7<a?#u0gDt-/UY7csoh>KR<g:;LL9C4=H?Bmp:cDN]pTEQP!]+Ad"8i^s6BF,PpU[6CRg>S!h@bGGLOWBN&HdWGjO?RfaLTE^%E*8W6q'X*T\@TJo7pWauq>6CNqeoCkeWF)/a.YrYR`tGtYM'/hrbRcA=J0H["5%1*3P]LpD+%=Yk@@S(5a>4Q-m"ut]k(<8LII8I%TQhDMAR>nKWLb?AcW_sH(_/O3r1i@oqs5kjd.D:+Z;ccD'5WM^BK>+!*NUYCWVk1mE-;f+T2/CpX\@ns*&/tf^,=Zl1qK^HKIRF>%BR%s!2WDRW5\j%"'5pRooFL,/4pa<e^I]r#h'=s1=6r2E`W!^Gg8FqFhQ9"SgeFl7I=*F=abN'jds)8>XUTpo^uTC'hIi#[2SBNB%+'"Gd?E^lf`euf_Y[8agm^ME_3PD+6:M'M&9VAcV-bOiqH(@)ZZS/rD#:j.-Ht3E!UHSKpl6T$Vp@s[\]o@S+D%<2/0A5LMSSoIu%fAa!+g`&'JN!nAS5$G'PWfNa%>VTDXYbOqN'2MiuccCE:9_4IH@"l\\C!<cp+grFUfV!U950uj)ZcsZ!]CW.o`s$bUhj`GAq"I:l%VjFt(*>Y\OA=sGU8'E(f/;2FCZSfFcXL6"e,DcY+L`)f(b\Fl8'9`mnQsh8me&L?KdGZ;^hDPh`MN4b*/I,1J.$]l)=Fep6;]+F!%a;o>T"M<Bt+n9Z^R7+@;'r-[4.Tdj7GT-0h=kbGCFpdFO;i:qWL5T'&4pGG6UPQ#8h!<g;+QY!Jqo2G9a/g7ET6@B?Dqtt-@rRN;%9=n6sA>:[/[>OVYZ(*$g>".@B>kB2M=rY.f9Wj9s7>-&\_=eRj"Q%r]%iOAjo'R>kAD7MV:_-T29\k=K+D8n)''sRS+?f+3V6Jg:%]eDnZWsB]*L?**hcg)5EegH1b$21h'2R\lmq$qF,[a0,[lA3)!jq68nfBp2s@<;:("o88j`)rZBX4)^baX1!:I]KXfs0f\"LhJ$$%\=YLbQ8,bI>Ke3&Ci;[nCe(a)4>6uC%6cjgYpk9b(dPIZ=gh<h'NTptlAPm+!jKWX+@9k5'dR[_\56:DM7Gtd'!)X&4H7J5PjbZ4%-b*t"cWP2PJF5HAaPsj[be[e!KPVUp5(+>9+;Xf^r\q7=IBWc9"VT#3hZ[V]UYAom#C&;`!$Nt=`0_^f"<3Dj?A?Zfr24*F7j..d%/==E+%/!=tk8kT@;dZF+45&\epC`D)k:"[^&@)tSi"Z"ohVhXK-cQ6=`!fFOAi8IUNH>$>:;h`_b\\;0&A3)N1%0YZF<#;S406_p%SH)GNaA0[*;s5ZTL[1(n(_s+`3BW;s[B/ha2aD[5(Ar8:0tSS'l$-^V!Vjb@[J:/<FfmGO+Zp>;@gEjW!`*2FX=*q!W+^n+_c+^]%Apk^;/f,3JQnsY[j7>QZc9@!XRpt;(S'^=s]O5m&CclqD!nIq,WC8r:EOE"l3(fos'dAF20u'1M[J5+MZBSbB/iJL4#D>&=fbd1#%@0`C0)3MWT"foNG,L@)80LpmuI\E[t+Ke53@T9^tCu!L,?d&<:W<-T[_44nL->/fE&0,5G>oR<>VQuV[D;G;p8u^Es,/=j(OG@4=%1#co(X+g43<Y?.K&32k4q:2PS<O?`IA1M+T15<.t/r42Q%j,1E]%ZT$k8_k6nlZ7j'F6^P=:bp)3>HNockU&B9nZ5"@rcuXA]%J_%034aX:%i#gEa>g-b8M`>Xf,nJeIk"GH$ieV5]<.V6V$n!<.A.*&1skpKtuY]aKD_FCuS-(^C%EY0f,n:m]B4]@>,AN<`HG`>)Ai$%*&4'UYd9>Z&PlJtocrd.0bR$OJe]JbV_PrhU9Zd8Xl0Vcr$\YQAQZRs6lGktXDe6gMCL=29&YUt/>j5J9u![0;0XS*0E#(nH@]`u%7B=MK*Mqi.MTQ.HG^gITA`I<'\_%I]g,)6H'8Y4<[#.I)r8?IVbhj$!M5pbD:L#3Ip;G#oM$[2p1`Qs]p!o9IJaNtI@Tsco_qN)L%`md2Of/N5<XeobFFV=WQfjj6+?q4u9M5R[dVc`9_lLbsfnc+VoiF0s1YG9r5B);l-[!=bb>&6fi2+LNs31s8NfL18n0*'jrY/;I+%B%b[_Vc6N/>ToD1CQ.o53XU$YS*4]_YH+JMjmmsd!hFH:&$)#(I)4;m4fiK#Be:WS;'s[.OirOG.!F2S4R23LMC;d$Nd3f,)XJ#a%p_m&s9.D\2U#6Yb0]4#%3PnUkL1h;:'0Q?s6P0Z3JKo+EQ4o!>:p`RIn2+\-=&m+6`.D&e^OUZ-jTn5I(8=gY9Cr@?$q2^lKq<mC%\/lNF;8EU%_pau[?W@D$!<YicIK;s4ars9[(4m:d-$TJXedsC2"eNLn=ALm`;:,a(KVt&A?WE5c"KVI;l6R:'2%FnhPn:'l=pdLh%2jct:-a"0]4E74%)L+k`Jeb#7V_PZpU*<MBjp]/]-!5s<%_7I>&?V[-U*h)A&AalN`)GbA=j>Vl,'"(0$m/tkI4[mr'$PWU<JrXF%9,k)Ml^tCIM$,b*^`?<D"iY.$[Dlce.0[T:=pfF$S`jq7YcjqF=Geu%@H@P?@XTJc`@=FFU/[jC,/GCZ24@BD:.;`>-qcp[*TIZC%A!TsgfPCCT'p:,F#eSr>\;>b)]j8&a?TsF\$%?\)>`#2_?u%Lc8-j&@K=@Ic9@O0FNrY>c0bqbM>2+%2j5'jkmah]\+Z+o.ePFl1%/nmffp]roI5)KTjB#n`Ih\];%8Uc/h^P*kKS/K3p(.Ut&ZG[#0\^UY[Y8Y=Br:_Xj[XY[dBUOYic?5jV37j!LiOgN."9I'97%YSc%V2r=6'FN#g#dhg?5g)QGnd!;D/b`g##dPnu8J,M)LU/7>R;%8e*9SFPH=sg^G:!`%B$-bm8V>;E8V><0-4O-*g7[,3A)g4g3p=iZ%TUOZ^6aD?sk/Y-.J*?AlaUm6T08\B<0Y7eSp6,<FcqHDUpG\3EBr9?p!qD@Y4kth1,u%J0f@a[5D>s%MDu&)X$O)[Mp\`hF\X5S<%e&Q;$ANB_1nKk!W\:?@edIR;R'.l!td?<TZ9@ab.1I9EO'h(c]'J2+8d?6pe93)cZ1Ki+gF[\q=(+jT=d6!O-]ieS3NoHclX,Gh3%?M%iXd5r!Y]iee9Ar4nsdhoc$AFsK!d6!U2fc9FU1U:`NK@%\OH4NUm5e8[&G-U3^h?Zj*7Q19nO;f&ok`#T,p:/a0LEnmC<Fps@%VR)>XUZ4qGUZ4qO,=&h5%ZhXfn>=Q#H=ZX)#OToY-h.ckh(':'UbM(pA51`05OPU<3pn7Z3pre0!i2=J@M_,cif2;QLNM<CLihED%M$-@.cc$ACN++&8;tnV!CEc80Y,"QKmQlp;5kiXE.^mC:(SQ[6ahU3-FBjGL$%VH@Mj5VH.$J19h,63.:>2N(9&cZ,9'RZe]!5#B%fJ]W`,$CU]>Y1Z#5;i_*&g6"8(HWt*A4j/+m&hFCD3&j,V;lA4>M3@JcJ$it<BCnVm]VOSm$rtm6GBDdYTN$G(QR@X@d0CsQHi@8%,gOCt#Mmfi'/$t$\b(p1V)N1VhGLrXB(aS6P:sUP^[u+=dlUJ^]ii5EAe!3N'eq03$(,6sj>?4R/,*JI>jPoY?+^c<BUQqBi[q-t%Pku`;Uh:<Y.G'%;?-,mXUhM%M@67`HO1XP]_q$l^#rE5POg+'::=:J#5=TiEE>-%I>l0M*+[?3p^^86)rGc72DPN+qm'Va165,Ut%85$WBSWbb#7[K?7i[s9Gn&u.E.[\^\?oMti$O^uN?0l%\?+^c<8=mV%ipB@4-fI@JmRjc4nWn4_2sZ/&'hm%'n/F=5Ka509:-3:4%e!iT9r=d7F]d3iH:n^@F1f30`jkB1X$Pt;VoHfs$+?<:GOUO[n7(_*8(N4sl9F@A2p#n!nU!B&Ml:dWpnWn4_90q<W(hHRQRkX'#%C^Xec7KLqP;!aq%'5rQ039jb43pPL`4:719K4;k8P!Y%aC,L6R'91MP-'?]f-']/eXTl`sW]]f@BVL_P[j75"\"o8jUt)-j0o%$@%P#\=s4SLCo3k(oP12)bC!Rb]o+KIVL'54#ZVTq?hVTq=2VZ:Eg.!A-se5",S;@T4E<_o:`+J1^hUn7^a[@l/@N<`en-5rn*:Eh9@%"r.jqXTZTQiK$;T=]6ieo9`(Jc6I&&c=7Da!ROG8XJ3QF?\BbXWq/c=Wq5F"<W5dr!b&pdPH%5Udi.^<-G$5K8AZj/H=^)!=olJi%8iq>CP1<R@JN9[0Cnl&J<rp_N;!\blRFG6BW"adFRH.B23QeDJ1WcZtC&'-"GRNUQj]/QppTDY!b,YpgjAg`;p(KN@5KKn8TN6M.%Fb1oj'e'QFQr4q32R/1G::q1].P$YqSS^r2V,YLn[\U8CDe#YmnY]>6?rC3k_GGt9eY-4]]-us_)ki,LMW?&>P3>N;:81Ce/+JpG%m>F3j3eCS!?BOSNL'cP<>b`<s3dN$X:\7`L-[OO2!_^XqdHsMX7;k3<^A&AU;fL)lJ]LrH$/r-k'>#[Wi/>B=N!55>?V-8(KVu($%6'cagH1lra:nE81PQ`gP#puIg;GHMPTG)6s-H[mdQ$OCV=eIp;Cf"c$T9Nnond4\4QkW^iBWSm<HS!QPKfY6s"IdE=^fBC\9JS2.%4pgUM1+i$^'(,!J;P.En:(*T3\kBPoopOIkQ'QL@Bp"8e)g,?B1gP-rdh4a^5O,V?r<AhDEA$YFY&=F;[e#PH4ER)n1F5)a5ZFWb%Da2R6:skN/9;jibSQ8!T9d-kb>2%@tah'0N?:h&+Xn,ka2+)\\(>L1M]hYVR;Opk`<b.rR!iWg;SQ9h)4*=`gs8E1"XoF"Qp%,ru%oV]J"O6</8p@&%Yc[Yc*^\mcJQVW,-dsqA?hu3+Qs8&)^q7hCSl_hMpVn`/u?U"MOn,NA/rqS5Ir6%<js76!Srqaf&rUW8Oop=#)%oKW?6rtnZ5,g?;\Vn`1+s5DH,!uO##V#~>%AI9_PrivateDataEnd